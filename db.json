{"meta":{"version":1,"warehouse":"3.0.2"},"models":{"Asset":[{"_id":"themes/ayer/source/404.html","path":"404.html","modified":0,"renderable":1},{"_id":"themes/ayer/source/favicon.ico","path":"favicon.ico","modified":0,"renderable":1},{"_id":"themes/ayer/source/css/clipboard.styl","path":"css/clipboard.styl","modified":0,"renderable":1},{"_id":"themes/ayer/source/css/custom.styl","path":"css/custom.styl","modified":0,"renderable":1},{"_id":"themes/ayer/source/dist/main.js","path":"dist/main.js","modified":0,"renderable":1},{"_id":"themes/ayer/source/images/alipay.jpg","path":"images/alipay.jpg","modified":0,"renderable":1},{"_id":"themes/ayer/source/images/ayer.png","path":"images/ayer.png","modified":0,"renderable":1},{"_id":"themes/ayer/source/images/ayer-side.svg","path":"images/ayer-side.svg","modified":0,"renderable":1},{"_id":"themes/ayer/source/images/cover7.jpg","path":"images/cover7.jpg","modified":0,"renderable":1},{"_id":"themes/ayer/source/images/ayer.svg","path":"images/ayer.svg","modified":0,"renderable":1},{"_id":"themes/ayer/source/images/wechat.jpg","path":"images/wechat.jpg","modified":0,"renderable":1},{"_id":"themes/ayer/source/js/clickLove.js","path":"js/clickLove.js","modified":0,"renderable":1},{"_id":"themes/ayer/source/js/busuanzi-2.3.pure.min.js","path":"js/busuanzi-2.3.pure.min.js","modified":0,"renderable":1},{"_id":"themes/ayer/source/images/forkme.png","path":"images/forkme.png","modified":0,"renderable":1},{"_id":"themes/ayer/source/js/lazyload.min.js","path":"js/lazyload.min.js","modified":0,"renderable":1},{"_id":"themes/ayer/source/js/pace.min.js","path":"js/pace.min.js","modified":0,"renderable":1},{"_id":"themes/ayer/source/js/search.js","path":"js/search.js","modified":0,"renderable":1},{"_id":"themes/ayer/source/js/tocbot.min.js","path":"js/tocbot.min.js","modified":0,"renderable":1},{"_id":"themes/ayer/source/images/404.jpg","path":"images/404.jpg","modified":0,"renderable":1},{"_id":"themes/ayer/source/dist/main.css","path":"dist/main.css","modified":0,"renderable":1},{"_id":"themes/ayer/source/images/cover2.jpg","path":"images/cover2.jpg","modified":0,"renderable":1},{"_id":"themes/ayer/source/images/sponsor.jpg","path":"images/sponsor.jpg","modified":0,"renderable":1},{"_id":"themes/ayer/source/js/jquery-2.0.3.min.js","path":"js/jquery-2.0.3.min.js","modified":0,"renderable":1},{"_id":"themes/ayer/source/images/cover6.jpg","path":"images/cover6.jpg","modified":0,"renderable":1},{"_id":"themes/ayer/source/images/cover3.jpg","path":"images/cover3.jpg","modified":0,"renderable":1},{"_id":"source/about/mee.png","path":"about/mee.png","modified":0,"renderable":0},{"_id":"themes/ayer/source/images/cover1.jpg","path":"images/cover1.jpg","modified":0,"renderable":1},{"_id":"themes/ayer/source/images/cover4.jpg","path":"images/cover4.jpg","modified":0,"renderable":1},{"_id":"themes/ayer/source/images/cover8.JPG","path":"images/cover8.JPG","modified":0,"renderable":1},{"_id":"themes/ayer/source/images/cover5.jpg","path":"images/cover5.jpg","modified":0,"renderable":1}],"Cache":[{"_id":"themes/ayer/.gitignore","hash":"568cee11b0fae9c4fc0c2f25307cc062d3c73090","modified":1588923147863},{"_id":"themes/ayer/.postcssrc","hash":"1dd8ddbf9ba6fd3748d0b93c1f0f3d95ec918bf0","modified":1588923147863},{"_id":"themes/ayer/.stylintrc","hash":"557d72b4dcd86e66fc5c688595288cf06b12ce6c","modified":1588923147863},{"_id":"themes/ayer/.travis.yml","hash":"c4bbefb55e020855b98b59657ef0a2816aa97add","modified":1588923147863},{"_id":"themes/ayer/LICENSE","hash":"064037836065f908ffa619cbdae26dea2989ebeb","modified":1588923147864},{"_id":"themes/ayer/README.md","hash":"22945b86ee8f079ffcbb3710a948b51f0db75594","modified":1588923147864},{"_id":"themes/ayer/_config.yml","hash":"849b0558ef80169bd61acb81ae1521f845734553","modified":1588923147864},{"_id":"themes/ayer/package.json","hash":"8c5a97d394b56d0e81d87dc63184543c5f2551a8","modified":1588923147876},{"_id":"source/_posts/TCP.md","hash":"0750af412a36069ad5209b16fa8fab6d9699d301","modified":1590048576967},{"_id":"source/_posts/arry.md","hash":"2a87b331365fd281b145026247208b3ef3d4fb15","modified":1602576032025},{"_id":"source/_posts/hello-world.md","hash":"508a0f13e376531d6adf3e9f9c01867a7925ac9d","modified":1589013697991},{"_id":"source/_posts/http.md","hash":"8ee99cfd979f8ad039f16ce43d2aefe4fff486b0","modified":1589962261310},{"_id":"source/_posts/inherit.md","hash":"ec32af8bebc9620e1b5a9ed948ac9d23a2c0a958","modified":1601449317341},{"_id":"source/_posts/prototype.md","hash":"84f2ead1ecf4c37d2f222b5de28b8cc6d6d4938f","modified":1590210046922},{"_id":"source/_posts/render.md","hash":"24c524b9f64f6ea61ab2cd14cde81d09e3a2e6c5","modified":1590217271264},{"_id":"source/_posts/statusCode.md","hash":"098ee90fdd4c7c198a3f82f3b01e6bbb5e610eff","modified":1589989649425},{"_id":"source/_posts/this.md","hash":"9f69edd40e5992d1a7390deb2dc65db42eabb5ca","modified":1601364302054},{"_id":"source/_posts/throttle.md","hash":"a3216722b758278b1094651e7b18908f7ba14f0a","modified":1603020261745},{"_id":"source/_posts/typeof.md","hash":"eb35d389dbb81278a45403d6494ab4530d59f4d9","modified":1590215244396},{"_id":"source/_posts/webpack.md","hash":"26401e700d5fc7d0b11e7dae2ca0eba4299a6a10","modified":1589897135191},{"_id":"source/_posts/webpack02.md","hash":"e664fbf5f51bfaee30c23b4227f24d48690e75bf","modified":1597666500088},{"_id":"source/_posts/webpack03.md","hash":"69ba9541baef604adffc672793f3b2afc65bb631","modified":1597666500089},{"_id":"source/_posts/webpack04.md","hash":"1b8fa1fbaa9655b69fc6192cc12615d58d008c79","modified":1597666500091},{"_id":"source/_posts/closure.md","hash":"36eed5f50cc40d7c0e1a7933b522eab7ba1f47c3","modified":1602574681966},{"_id":"source/_posts/arithmetic1.md","hash":"7bca83e3e1baa69143e8297d4fe10c878f5b0dcb","modified":1652529691751},{"_id":"source/_posts/call.md","hash":"a3d7af4ec39f45d45236ed9126b58ead60133757","modified":1601035092255},{"_id":"source/tags/index.md","hash":"ec62908d1adf0fbce2e6de6a48963e1c9d35fe3f","modified":1588923147862},{"_id":"source/categories/index.md","hash":"e50342fff852932dfa4ff305dafa20a977492275","modified":1588923147862},{"_id":"source/about/index.md","hash":"2b58cea0678e6132f3a01749f94d2277954ab79d","modified":1588923147859},{"_id":"themes/ayer/.github/FUNDING.yml","hash":"85381e9e2d3b868fb4a8a4339bcb7531690d073e","modified":1588923147862},{"_id":"themes/ayer/languages/default.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1588923147865},{"_id":"themes/ayer/languages/de.yml","hash":"43ae234bd698525a387d9bfed97bbf6007f3222b","modified":1588923147864},{"_id":"themes/ayer/languages/en.yml","hash":"08890246a98692e67636997f395daedf2ec76846","modified":1588923147865},{"_id":"themes/ayer/languages/fr.yml","hash":"ed51a7727ef99d68027f34ec02f31f2c6d553596","modified":1588923147865},{"_id":"themes/ayer/languages/ja.yml","hash":"0e5b2e814e5827a54e42d4fde69e080efee9b567","modified":1588923147865},{"_id":"themes/ayer/languages/es.yml","hash":"ef2b6d4fd3ee17f55d38db28ed40833933099969","modified":1588923147865},{"_id":"themes/ayer/languages/nl.yml","hash":"8b61f493d91bc9f4e3279128bb8ad61a769f74cb","modified":1588923147866},{"_id":"themes/ayer/languages/ko.yml","hash":"8b42c4ab643a47109adc3573096d8c4432440f93","modified":1588923147866},{"_id":"themes/ayer/languages/pt.yml","hash":"d115086dbf01199e6d7deeeb1e7c539bc3d61512","modified":1588923147866},{"_id":"themes/ayer/languages/ru.yml","hash":"6f0376f3396ba8ea80108a05744d8c31e63d6967","modified":1588923147866},{"_id":"themes/ayer/languages/no.yml","hash":"5b40e732a945741f4b32719e9ada512b0d657235","modified":1588923147866},{"_id":"themes/ayer/languages/vi.yml","hash":"bbe6a7358e76bf16311d0454a1b2ec0afe9e623f","modified":1588923147866},{"_id":"themes/ayer/languages/zh-CN.yml","hash":"703b37666e951eb98665401e937b72c04e63ff4c","modified":1588923147866},{"_id":"themes/ayer/languages/zh-TW.yml","hash":"1bec7f20ec2988ba87cccb45265b3b471c2e2270","modified":1588923147866},{"_id":"themes/ayer/layout/categories.ejs","hash":"673e8cb93639525c08ee0b0cb9db44b3a628960c","modified":1588923147873},{"_id":"themes/ayer/layout/index.ejs","hash":"77347cbb8635611d8b1fb84bde75f9dedaf8632d","modified":1588923147873},{"_id":"themes/ayer/layout/layout.ejs","hash":"ad0d04b0d5322ccb6f371f8c9cd62d2ab87f4bca","modified":1588923147874},{"_id":"themes/ayer/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1588923147872},{"_id":"themes/ayer/layout/post.ejs","hash":"a9a48ae63f5d68a36382951166fdd6e482b901f1","modified":1588923147875},{"_id":"themes/ayer/layout/tags.ejs","hash":"88b34dd8d7b1e64fa27aa6ed72af996cf6700809","modified":1588923147875},{"_id":"themes/ayer/scripts/default_config.js","hash":"70d6ee032d75410d540b6789b5949739a47f0125","modified":1588923147878},{"_id":"themes/ayer/layout/page.ejs","hash":"a9a48ae63f5d68a36382951166fdd6e482b901f1","modified":1588923147874},{"_id":"themes/ayer/source/404.html","hash":"1d8673e8a3118f6cdea68cfda2b7ac795876c414","modified":1588923147886},{"_id":"themes/ayer/source/favicon.ico","hash":"473ba682e828a7e34f24fae320e77b6bed4260c7","modified":1588923147888},{"_id":"themes/ayer/source-src/main.js","hash":"77e753cd66579316c8c9e07e673c31ddb6e8e7f2","modified":1588923147886},{"_id":"source/_posts/hello-world/result.png","hash":"b6e44880f80d2b5947e1593cbccf66e5b8af9a6f","modified":1588923147858},{"_id":"themes/ayer/layout/_partial/archive-post.ejs","hash":"9be7173badcca6582c1136204adb3aa432aada21","modified":1588923147867},{"_id":"themes/ayer/layout/_partial/archive.ejs","hash":"a7065fad7532c5f727e8d0e18771616fea662944","modified":1588923147867},{"_id":"themes/ayer/layout/_partial/after-footer.ejs","hash":"9fed2187c4f01d1eef52b5b52411512971a9fb6a","modified":1588923147867},{"_id":"themes/ayer/layout/_partial/ayer.ejs","hash":"ca75120c1b9f9c3d3bd88287c70258a0eb081f83","modified":1588923147867},{"_id":"source/_posts/webpack02/ catalogue.jpeg","hash":"836845afd486daea5b52fe7087ad26fa4a3e022f","modified":1597666500088},{"_id":"themes/ayer/layout/_partial/baidu-analytics.ejs","hash":"f0e6e88f9f7eb08b8fe51449a8a3016273507924","modified":1588923147868},{"_id":"themes/ayer/layout/_partial/article.ejs","hash":"4556d3a4bfcd8cba596adc11e7097d3d5be1de55","modified":1588923147867},{"_id":"themes/ayer/layout/_partial/footer.ejs","hash":"a8351beb8ac814f88b24306051cff5108cc46cf3","modified":1589965689656},{"_id":"themes/ayer/layout/_partial/google-analytics.ejs","hash":"5b389110f4d3b727c33c48f088a8bc7f8b577d19","modified":1588923147868},{"_id":"themes/ayer/layout/_partial/head.ejs","hash":"765d38929aa53b98f0281fb4f29635c93466c3ca","modified":1588923147868},{"_id":"themes/ayer/layout/_partial/katex.ejs","hash":"ff2822fd2f6e8a02ce781aecf5bb031db076e882","modified":1588923147868},{"_id":"themes/ayer/layout/_partial/mathjax.ejs","hash":"4d633c6cc375a0c81fe0ed2a114b1ac4c3cec2d9","modified":1588923147868},{"_id":"themes/ayer/layout/_partial/modal.ejs","hash":"cf441365eff1f8143e3c9ae54954d0ebe0a358e5","modified":1588923147869},{"_id":"themes/ayer/layout/_partial/music.ejs","hash":"cde5caf73f120b1300ec7539bbf675597688c734","modified":1588923147869},{"_id":"themes/ayer/layout/_partial/sidebar.ejs","hash":"e3b411aef6e5f25f6c5c66b93d653ef70da8d4af","modified":1588923147872},{"_id":"themes/ayer/layout/_partial/totop.ejs","hash":"43ba0cd1f9e898bcbd873b1e9a2d47249d6aaf77","modified":1588923147872},{"_id":"themes/ayer/layout/_partial/viewer.ejs","hash":"6663c30882e2b375b15c147080c70d0dcce54a6f","modified":1588923147872},{"_id":"themes/ayer/scripts/filters/index.js","hash":"e435b782178da75656f9616c7af564fb9ff0de50","modified":1588923147878},{"_id":"themes/ayer/scripts/filters/meta_generator.js","hash":"8b3435c4312516dcc266c6b9b8d156a000ca700d","modified":1588923147878},{"_id":"themes/ayer/scripts/helpers/ayer-plus-vendors.js","hash":"7b3df58faaa875d17afbf74ddef5601116f2ce3d","modified":1588923147879},{"_id":"themes/ayer/scripts/helpers/wordcount.js","hash":"f9c8fceb2130929b8f11e22b1c3476c99d1574a8","modified":1588923147879},{"_id":"themes/ayer/scripts/lib/core.js","hash":"7908a82a86d63f35c6f785cacb1cfaf99ae7e0f9","modified":1588923147880},{"_id":"themes/ayer/source/css/clipboard.styl","hash":"017f9b628806eeb199da2e77485cd9ac8e2117b3","modified":1588923147887},{"_id":"themes/ayer/source/css/custom.styl","hash":"d58010fc16b01049622d17e60131033deef4fb0c","modified":1588923147887},{"_id":"themes/ayer/source/dist/main.js","hash":"2c886c8382df92c7af2bd7e446f3e3aa499c829e","modified":1588923147888},{"_id":"themes/ayer/source/images/alipay.jpg","hash":"6a1b5752c7fa8e46b085d73d0b2a202480365088","modified":1588923147890},{"_id":"themes/ayer/source/images/ayer.png","hash":"0466c05244273f645d239cd27513bfa3c50308aa","modified":1588923147891},{"_id":"themes/ayer/source/images/ayer-side.svg","hash":"ad004ce7a873de0f91774f3d5923e010396a07bd","modified":1588923147890},{"_id":"themes/ayer/source/images/cover7.jpg","hash":"573bff6899d2d9c5bcba0dc9c60cd1ec9eb8b029","modified":1588923147908},{"_id":"themes/ayer/source/images/ayer.svg","hash":"379c3307f97c364718a1dbc1e52fb14de12eb11a","modified":1588923147892},{"_id":"themes/ayer/source/images/wechat.jpg","hash":"cae05c4f6bdd799c3132274191f7006fc85118ca","modified":1588923147914},{"_id":"themes/ayer/source/js/clickLove.js","hash":"a35dfb7ff19796c005ee30b55fd95e39d6d59a89","modified":1588923147914},{"_id":"themes/ayer/source/js/busuanzi-2.3.pure.min.js","hash":"6e41f31100ae7eb3a6f23f2c168f6dd56e7f7a9a","modified":1588923147914},{"_id":"themes/ayer/source/images/forkme.png","hash":"99c3e21a169421e4f249befb428396c729863a75","modified":1588923147913},{"_id":"themes/ayer/source/js/lazyload.min.js","hash":"b801b3946fb9b72e03512c0663458e140e1fa77b","modified":1588923147915},{"_id":"themes/ayer/source/js/pace.min.js","hash":"d32ab818e0f97d3b0c80f5631fc23d8a0cb52795","modified":1588923147915},{"_id":"themes/ayer/source/js/search.js","hash":"118be0e0918532ac1225f62e1a0a6f0673e0b173","modified":1588923147916},{"_id":"themes/ayer/source/js/tocbot.min.js","hash":"bae97e8a24a05a99335f8e725641c8ca9c50502a","modified":1588923147916},{"_id":"themes/ayer/source-src/css/_extend.styl","hash":"4980e6333c9e28408b65fcd9d89e1cddfa4508dc","modified":1588923147880},{"_id":"themes/ayer/source-src/css/_mixins.styl","hash":"6959409df2dd0a1ca05be0c0e9b2a884efdfb82d","modified":1588923147880},{"_id":"themes/ayer/source-src/css/_normalize.styl","hash":"b3337320133b7a336db7033aa6bbe94b054c0b21","modified":1588923147880},{"_id":"themes/ayer/source-src/css/_variables.styl","hash":"910dd0682971a616e1610daec23e7ff5a556df98","modified":1588923147885},{"_id":"themes/ayer/source-src/css/style.styl","hash":"51f58c90dae433b59007e4a323d27b5fd4cd319a","modified":1588923147885},{"_id":"themes/ayer/source-src/js/share.js","hash":"a65e4645818e4eb8d4a40d0499e1d04b6ee224bd","modified":1588923147886},{"_id":"themes/ayer/source-src/js/ayer.js","hash":"ab149aa4d4c471266c8b1704e10a4e16cc3925ef","modified":1601447300341},{"_id":"themes/ayer/source/images/404.jpg","hash":"4f36a8d378712427cded03f5166949f5e0ba754c","modified":1588923147889},{"_id":"themes/ayer/source/dist/main.css","hash":"08ec92d9c7cf4f50ef48988a04f7f06b6f784af4","modified":1588923147888},{"_id":"themes/ayer/source/images/cover2.jpg","hash":"f61dd08c95327468c5f6bc5175eff68d00f05b46","modified":1588923147895},{"_id":"themes/ayer/source/images/sponsor.jpg","hash":"b7e414d680091bc30ff415151bdade48a3be291a","modified":1588923147913},{"_id":"themes/ayer/source/js/jquery-2.0.3.min.js","hash":"800edb7787c30f4982bf38f2cb8f4f6fb61340e9","modified":1588923147915},{"_id":"themes/ayer/source-src/css/_remixicon.styl","hash":"cc890008a02430abe15a9cbbdfd87f0dcbedd0b6","modified":1588923147885},{"_id":"themes/ayer/layout/_partial/post/category.ejs","hash":"85f0ebeceee1c32623bfa1e4170dbe1e34442fea","modified":1588923147869},{"_id":"themes/ayer/layout/_partial/post/albums.ejs","hash":"cfb16c9dda7a609776a28702e0c3854a52e422a7","modified":1588923147869},{"_id":"themes/ayer/layout/_partial/post/clipboard.ejs","hash":"d6f82b35bbb060ec22c5facf0eea67cf44c396f6","modified":1588923147869},{"_id":"themes/ayer/layout/_partial/post/date.ejs","hash":"6197802873157656e3077c5099a7dda3d3b01c29","modified":1588923147869},{"_id":"themes/ayer/layout/_partial/post/gallery.ejs","hash":"5f8487fe7bed9a09001c6655244ff35f583cf1eb","modified":1588923147870},{"_id":"themes/ayer/layout/_partial/post/gitalk.ejs","hash":"917ef5daea9c926aea4703ab3e9911c9f6d16b64","modified":1588923147870},{"_id":"themes/ayer/layout/_partial/post/justifiedGallery.ejs","hash":"4a21fd3d7335ffcd0661036fee81a927c125e2e2","modified":1588923147870},{"_id":"themes/ayer/layout/_partial/post/minivaline.ejs","hash":"4c0558f3f27c1f6d9daeed13d31eb8678d3a551e","modified":1588923147870},{"_id":"themes/ayer/layout/_partial/post/nav.ejs","hash":"e59198918e92ef92156aeefbf6023584ac1cae64","modified":1588923147870},{"_id":"themes/ayer/layout/_partial/post/search.ejs","hash":"2c9d19d1685e834aa2020998da2a2d259ce9b9ff","modified":1588923147870},{"_id":"themes/ayer/layout/_partial/post/share.ejs","hash":"0a364766931f48df60b7c92fec8fde1067a93e00","modified":1588923147870},{"_id":"themes/ayer/layout/_partial/post/title.ejs","hash":"3b076a65b9847cd6e0d424f5c2874046ef51d4d9","modified":1588923147871},{"_id":"themes/ayer/layout/_partial/post/tag.ejs","hash":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":1588923147871},{"_id":"themes/ayer/layout/_partial/post/tocbot.ejs","hash":"9898b0dd9237e21908ba40292a8a9f947bed44d2","modified":1588923147871},{"_id":"themes/ayer/layout/_partial/post/valine.ejs","hash":"6250f3c87a4bf3d437291128c7e60608cf807e10","modified":1588923147871},{"_id":"themes/ayer/layout/_partial/post/topping.ejs","hash":"fea793e132f627a8148059a9aee8bc33550506d1","modified":1588923147871},{"_id":"themes/ayer/layout/_partial/post/word.ejs","hash":"4b8e8455709debd73fba6bf3aad63378c4156dc1","modified":1588923147871},{"_id":"themes/ayer/layout/_partial/post/busuanzi.ejs","hash":"2e8836ce04ef22cf8d9ba228363f5b050cd0da03","modified":1588923147869},{"_id":"themes/ayer/source/images/cover6.jpg","hash":"a5b8a5dddff2607fee5fccf5fdef3b214a8468cc","modified":1588923147907},{"_id":"themes/ayer/source-src/css/_partial/albums.styl","hash":"0659d5f7469f24a415354ff767d949926465d515","modified":1588923147880},{"_id":"themes/ayer/source-src/css/_partial/apple.styl","hash":"e06dce604cc58ec39d677e4e59910c2725684901","modified":1588923147880},{"_id":"themes/ayer/source-src/css/_partial/archive.styl","hash":"3e61c25e6ae9a25196c6d904731cf6821c950341","modified":1588923147881},{"_id":"themes/ayer/source-src/css/_partial/article.styl","hash":"5ed306bbd1dbec2f70fb08711a3212566ae637ac","modified":1588923147881},{"_id":"themes/ayer/source-src/css/_partial/ayer.styl","hash":"da46e69f7ecc779ec137deb601c3524524fd758d","modified":1588923147881},{"_id":"themes/ayer/source-src/css/_partial/articles.styl","hash":"39a0bc6c5cf85f0527d6ee81f6feebce8550c1dd","modified":1588923147881},{"_id":"themes/ayer/source-src/css/_partial/footer.styl","hash":"0384890ec33e8e710edcf4fc60d37ca82a499343","modified":1588923147881},{"_id":"themes/ayer/source-src/css/_partial/categories.styl","hash":"67f4824419c497e54469094f239978dd888a9706","modified":1588923147881},{"_id":"themes/ayer/source-src/css/_partial/gallery.styl","hash":"7bdc2c9fb4971dbd7511c5cbb69bd611f20db591","modified":1588923147882},{"_id":"themes/ayer/source-src/css/_partial/float.styl","hash":"d888df89a172e4c8119cb8740fc1eae1a9539157","modified":1588923147881},{"_id":"themes/ayer/source-src/css/_partial/gitalk.styl","hash":"3706eef2e0541493f1679a30241d279e29dfdc17","modified":1588923147882},{"_id":"themes/ayer/source-src/css/_partial/highlight.styl","hash":"e894b3a1aff76e84137e1e6db59a75afd0a53f52","modified":1588923147882},{"_id":"themes/ayer/source-src/css/_partial/justifiedGallery.styl","hash":"f2f43ae9831c3df017b35c68caa94f5eb911f697","modified":1588923147883},{"_id":"themes/ayer/source-src/css/_partial/layout.styl","hash":"b1bcdd213115c2fa8331d4e0f620dc7bcad64dc5","modified":1588923147883},{"_id":"themes/ayer/source-src/css/_partial/lists.styl","hash":"da8a82a48852411c10e279dfee43038d46f4f273","modified":1588923147883},{"_id":"themes/ayer/source-src/css/_partial/mobile.styl","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1588923147883},{"_id":"themes/ayer/source-src/css/_partial/navbar.styl","hash":"bc477e4905ab88da711e0049ac3866dd1f88f80a","modified":1588923147883},{"_id":"themes/ayer/source-src/css/_partial/pace.styl","hash":"bde7bf3577c66a3ac829410d52fa2144212282ef","modified":1588923147884},{"_id":"themes/ayer/source-src/css/_partial/reward.styl","hash":"9d06ee41617f5979fa378c6ebfacf394e58f9628","modified":1588923147884},{"_id":"themes/ayer/source-src/css/_partial/search.styl","hash":"f81076fc6d4a83be3371bcb79ab54d88e2605714","modified":1588923147884},{"_id":"themes/ayer/source-src/css/_partial/share.styl","hash":"9ce2dd3ffdc4e170dfcb975a7158f913bc40b8d8","modified":1588923147884},{"_id":"themes/ayer/source-src/css/_partial/sidebar.styl","hash":"600c70f1de82da5223af290d47a583f9c379d188","modified":1588923147884},{"_id":"themes/ayer/source-src/css/_partial/tag.styl","hash":"87df748185edfba222c3f9a4b9ef8eee0e8e5ad3","modified":1588923147884},{"_id":"themes/ayer/source-src/css/_partial/tocbot.styl","hash":"0363c4df6f2714fb7957d72aed7567348b034040","modified":1588923147884},{"_id":"themes/ayer/source-src/css/_partial/totop.styl","hash":"9e9d8dc167ed2c332e4520cbf41244c34c1ebf64","modified":1588923147884},{"_id":"themes/ayer/screenshots/hexo-theme-ayer.png","hash":"4111670e622ce09837b6b9cc641782af75805079","modified":1588923147877},{"_id":"themes/ayer/source/images/cover3.jpg","hash":"7b4e7c9ce19ce5d5c1588b2567e88ecbb04370af","modified":1588923147896},{"_id":"source/_posts/hello-world/jt.png","hash":"fb1eb689f5519928685d211d55130a2368dc6edc","modified":1588925813258},{"_id":"source/about/mee.png","hash":"fcac33bb2449aade2301db39dc6442c7a6efa56c","modified":1588923147861},{"_id":"themes/ayer/source/images/cover1.jpg","hash":"e019fbed6158ae3e4ec3d255b41bddc1afcbfa90","modified":1588923147894},{"_id":"source/_posts/webpack03/warn.png","hash":"efafff60500a240605f366bc0aab4d39a509ee1b","modified":1597666500090},{"_id":"themes/ayer/source/images/cover4.jpg","hash":"77040e609d2f1c60e00a8e47cb95b25bf7ff5b9c","modified":1588923147899},{"_id":"themes/ayer/source/images/cover8.JPG","hash":"c727b624a223842bac74dba304aae70135c0932f","modified":1588923147912},{"_id":"themes/ayer/source/images/cover5.jpg","hash":"1a2d6182d94b015a45fe4bf8e8a239dfcc0ef776","modified":1588923147905},{"_id":"source/_posts/检测数据类型-md.md","hash":"da283a49f7b418f6f1f9fb982ab06c04254025e2","modified":1601349770878},{"_id":"source/_posts/promise.md","hash":"40123be6fa551095e3e8066a5fc4903dbdfe166a","modified":1604548742921},{"_id":"source/_posts/深浅拷贝.md","hash":"269470144239bd57aee97d9521bef16da80486a5","modified":1601386720676},{"_id":"source/_posts/项目实战.md","hash":"12e57a0079bf1d0ec77ae87dfce54a8e24d7b15d","modified":1652529691761},{"_id":"source/_posts/promise/promise.png","hash":"29d8cd0d3649385fb47ff30d4bdeaefbf574f71e","modified":1604481975046},{"_id":"source/_posts/项目实战/vuex.png","hash":"d8eb689550d633e1e5f4fc10ada31cd1cb466d0c","modified":1652529691769},{"_id":"source/_posts/项目实战/app.png","hash":"d0849fa7a24a46492e16126afbcbb2e53d06cd27","modified":1652529691763},{"_id":"source/_posts/项目实战/filter.png","hash":"accb907e790556487bc39886d6e801e4b8035bc5","modified":1652529691764},{"_id":"source/_posts/项目实战/route.png","hash":"7ed2a38de5b2334b085aedea6d4d65623cf3f5ea","modified":1652529691767}],"Category":[{"name":"网络基础","_id":"ckfl1j01p0002m4oldhy4cuo5"},{"name":"JS基础","_id":"ckfl1j01v0007m4ol66xegef6"},{"name":"前端技术","_id":"ckfl1j01x000dm4ol73nzf18b"},{"name":"性能优化","_id":"ckfl1j02y0012m4ol9pm9bndm"},{"name":"前端构建工具","_id":"ckfl1j03d001km4olbazkf34s"},{"name":"项目","_id":"ckh35fe8j0004g3ol603b76tj"}],"Data":[],"Page":[{"title":"tags","date":"2020-04-13T14:55:58.000Z","layout":"tags","_content":"\n","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2020-04-13 22:55:58\nlayout: tags\n---\n\n","updated":"2020-05-08T07:32:27.862Z","path":"tags/index.html","comments":1,"_id":"ckfl1j02p000tm4ol0j13af14","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"categories","date":"2020-04-13T15:04:29.000Z","layout":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2020-04-13 23:04:29\nlayout: categories\n---\n","updated":"2020-05-08T07:32:27.862Z","path":"categories/index.html","comments":1,"_id":"ckfl1j02t000vm4olca3gcy1s","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"About Me","date":"2020-04-13T14:36:43.000Z","_content":"> A Coder, live in Beijing, China.\n\n姓名：CiXin\n现居：北京\nGitHub：[AmilyCi](https://github.com/AmilyCi)\n邮箱：cixinii@163.com\n\n<div align=center>\n\t<img src=\"./mee.png\" width=\"300\">\n</div>","source":"about/index.md","raw":"---\ntitle:  About Me\ndate: 2020-04-13 22:36:43\n---\n> A Coder, live in Beijing, China.\n\n姓名：CiXin\n现居：北京\nGitHub：[AmilyCi](https://github.com/AmilyCi)\n邮箱：cixinii@163.com\n\n<div align=center>\n\t<img src=\"./mee.png\" width=\"300\">\n</div>","updated":"2020-05-08T07:32:27.859Z","path":"about/index.html","comments":1,"layout":"page","_id":"ckfl1j02v000ym4ol4ome7733","content":"<blockquote>\n<p>A Coder, live in Beijing, China.</p>\n</blockquote>\n<p>姓名：CiXin<br>现居：北京<br>GitHub：<a href=\"https://github.com/AmilyCi\" target=\"_blank\" rel=\"noopener\">AmilyCi</a><br>邮箱：<a href=\"mailto:cixinii@163.com\">cixinii@163.com</a></p>\n<div align=center>\n    <img src=\"./mee.png\" width=\"300\">\n</div>","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>A Coder, live in Beijing, China.</p>\n</blockquote>\n<p>姓名：CiXin<br>现居：北京<br>GitHub：<a href=\"https://github.com/AmilyCi\" target=\"_blank\" rel=\"noopener\">AmilyCi</a><br>邮箱：<a href=\"mailto:cixinii@163.com\">cixinii@163.com</a></p>\n<div align=center>\n    <img src=\"./mee.png\" width=\"300\">\n</div>"}],"Post":[{"title":"TCP的三次握手四次挥手","date":"2020-05-20T16:16:48.000Z","_content":"### 为什么建立连接要三次握手？\n&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;如果只有一次握手，客户端发送连接请求后，没有收到服务端的应答，客户端无法判断连接是否成功。\n\n&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;如果只有两次握手，客户端发出去的第一个连接请求由于某些原因导致延迟，当服务器端收到这个请求时，这个报文早已失效了，但是此时服务器端仍然认为这是客户端建立连接请求的第一次握手，于是客户端回应了服务端，这是第二次握手，因为只有两次握手，所以到这里就已经建立了连接，可是客户端并没有任何数据要发送，而服务端还在傻傻的等候，会造成很大的资源浪费。\n\n&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;如果是三次握手，服务器端会等待客户端的第三次握手，如果第三次握手迟迟不来，服务器端就会释放相关资源。\n\n&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;第三次握手是为了防止已经失效的连接请求报文段突然又传到服务端，因而产生错误。所以三次恰恰可以保证数据可靠传输，又提高了传输的效率。\n### TCP建立连接三次握手\n- 第一次握手：建立连接时，客户端发送一个SYN包到服务端，并包含了自己初始序列号a，之后进入SYN_SEND状态，等待服务器确认。\n\n- 第二次握手：服务端收到这个SYN包并确认之后，会回复一个SYN包，并包含了对上一个a包的回应信息ACK，回应信息为下一个希望收到包的序号a+1，还包含了自己的初始序号b。然后服务器进入SYN_RECV状态。\n\n- 第三次握手：客户端收到回应的SYN包后，回复一个ACK包做回应，其中包含了希望下一个收到包的序号b+1\n\n### TCP断开连接四次挥手","source":"_posts/TCP.md","raw":"---\ntitle: TCP的三次握手四次挥手\ndate: 2020-05-21 00:16:48\ntags: TCP\ncategories:\n- 网络基础\n---\n### 为什么建立连接要三次握手？\n&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;如果只有一次握手，客户端发送连接请求后，没有收到服务端的应答，客户端无法判断连接是否成功。\n\n&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;如果只有两次握手，客户端发出去的第一个连接请求由于某些原因导致延迟，当服务器端收到这个请求时，这个报文早已失效了，但是此时服务器端仍然认为这是客户端建立连接请求的第一次握手，于是客户端回应了服务端，这是第二次握手，因为只有两次握手，所以到这里就已经建立了连接，可是客户端并没有任何数据要发送，而服务端还在傻傻的等候，会造成很大的资源浪费。\n\n&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;如果是三次握手，服务器端会等待客户端的第三次握手，如果第三次握手迟迟不来，服务器端就会释放相关资源。\n\n&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;第三次握手是为了防止已经失效的连接请求报文段突然又传到服务端，因而产生错误。所以三次恰恰可以保证数据可靠传输，又提高了传输的效率。\n### TCP建立连接三次握手\n- 第一次握手：建立连接时，客户端发送一个SYN包到服务端，并包含了自己初始序列号a，之后进入SYN_SEND状态，等待服务器确认。\n\n- 第二次握手：服务端收到这个SYN包并确认之后，会回复一个SYN包，并包含了对上一个a包的回应信息ACK，回应信息为下一个希望收到包的序号a+1，还包含了自己的初始序号b。然后服务器进入SYN_RECV状态。\n\n- 第三次握手：客户端收到回应的SYN包后，回复一个ACK包做回应，其中包含了希望下一个收到包的序号b+1\n\n### TCP断开连接四次挥手","slug":"TCP","published":1,"updated":"2020-05-21T08:09:36.967Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckfl1j01h0000m4olcnaz8wyk","content":"<h3 id=\"为什么建立连接要三次握手？\"><a href=\"#为什么建立连接要三次握手？\" class=\"headerlink\" title=\"为什么建立连接要三次握手？\"></a>为什么建立连接要三次握手？</h3><p>&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;如果只有一次握手，客户端发送连接请求后，没有收到服务端的应答，客户端无法判断连接是否成功。</p>\n<p>&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;如果只有两次握手，客户端发出去的第一个连接请求由于某些原因导致延迟，当服务器端收到这个请求时，这个报文早已失效了，但是此时服务器端仍然认为这是客户端建立连接请求的第一次握手，于是客户端回应了服务端，这是第二次握手，因为只有两次握手，所以到这里就已经建立了连接，可是客户端并没有任何数据要发送，而服务端还在傻傻的等候，会造成很大的资源浪费。</p>\n<p>&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;如果是三次握手，服务器端会等待客户端的第三次握手，如果第三次握手迟迟不来，服务器端就会释放相关资源。</p>\n<p>&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;第三次握手是为了防止已经失效的连接请求报文段突然又传到服务端，因而产生错误。所以三次恰恰可以保证数据可靠传输，又提高了传输的效率。</p>\n<h3 id=\"TCP建立连接三次握手\"><a href=\"#TCP建立连接三次握手\" class=\"headerlink\" title=\"TCP建立连接三次握手\"></a>TCP建立连接三次握手</h3><ul>\n<li><p>第一次握手：建立连接时，客户端发送一个SYN包到服务端，并包含了自己初始序列号a，之后进入SYN_SEND状态，等待服务器确认。</p>\n</li>\n<li><p>第二次握手：服务端收到这个SYN包并确认之后，会回复一个SYN包，并包含了对上一个a包的回应信息ACK，回应信息为下一个希望收到包的序号a+1，还包含了自己的初始序号b。然后服务器进入SYN_RECV状态。</p>\n</li>\n<li><p>第三次握手：客户端收到回应的SYN包后，回复一个ACK包做回应，其中包含了希望下一个收到包的序号b+1</p>\n</li>\n</ul>\n<h3 id=\"TCP断开连接四次挥手\"><a href=\"#TCP断开连接四次挥手\" class=\"headerlink\" title=\"TCP断开连接四次挥手\"></a>TCP断开连接四次挥手</h3>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"为什么建立连接要三次握手？\"><a href=\"#为什么建立连接要三次握手？\" class=\"headerlink\" title=\"为什么建立连接要三次握手？\"></a>为什么建立连接要三次握手？</h3><p>&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;如果只有一次握手，客户端发送连接请求后，没有收到服务端的应答，客户端无法判断连接是否成功。</p>\n<p>&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;如果只有两次握手，客户端发出去的第一个连接请求由于某些原因导致延迟，当服务器端收到这个请求时，这个报文早已失效了，但是此时服务器端仍然认为这是客户端建立连接请求的第一次握手，于是客户端回应了服务端，这是第二次握手，因为只有两次握手，所以到这里就已经建立了连接，可是客户端并没有任何数据要发送，而服务端还在傻傻的等候，会造成很大的资源浪费。</p>\n<p>&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;如果是三次握手，服务器端会等待客户端的第三次握手，如果第三次握手迟迟不来，服务器端就会释放相关资源。</p>\n<p>&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;第三次握手是为了防止已经失效的连接请求报文段突然又传到服务端，因而产生错误。所以三次恰恰可以保证数据可靠传输，又提高了传输的效率。</p>\n<h3 id=\"TCP建立连接三次握手\"><a href=\"#TCP建立连接三次握手\" class=\"headerlink\" title=\"TCP建立连接三次握手\"></a>TCP建立连接三次握手</h3><ul>\n<li><p>第一次握手：建立连接时，客户端发送一个SYN包到服务端，并包含了自己初始序列号a，之后进入SYN_SEND状态，等待服务器确认。</p>\n</li>\n<li><p>第二次握手：服务端收到这个SYN包并确认之后，会回复一个SYN包，并包含了对上一个a包的回应信息ACK，回应信息为下一个希望收到包的序号a+1，还包含了自己的初始序号b。然后服务器进入SYN_RECV状态。</p>\n</li>\n<li><p>第三次握手：客户端收到回应的SYN包后，回复一个ACK包做回应，其中包含了希望下一个收到包的序号b+1</p>\n</li>\n</ul>\n<h3 id=\"TCP断开连接四次挥手\"><a href=\"#TCP断开连接四次挥手\" class=\"headerlink\" title=\"TCP断开连接四次挥手\"></a>TCP断开连接四次挥手</h3>"},{"title":"数组中常用的方法","date":"2020-05-23T09:45:31.000Z","_content":"### 1、push()\n- 向数组的末尾增加新的内容。\n\n- 返回新增后数组的长度。\n\n- 原来数组发生改变。\n\n### 2、pop()\n- 删除数组最后一项内容。\n\n- 返回被删除的那一项。\n\n- 原来的数组发生改变。\n\n### 3、shift()\n- 删除数组中的第一项。\n\n- 返回被删除的那一项。\n\n- 原来的数组发生改变。\n\n### 4、unshhift()\n- 向数组的开头增加内容。\n\n- 返回增加后数组的长度。\n\n- 原来的数组发生改变。\n\n### 5、splice(n,m,x)\n- 从索引 n 开始，删除 m 个，用 x 替换删除的部分。\n\n- 以数组的形式返回被删除的内容。\n\n- 原来的数组改变。\n\n### 6、slice(n,m)\n- 从索引 n 开始，找到索引 m 处，将找到的内容以一个新的数组返回。\n\n- 返回找到的数组。\n\n- 原来的数组不变。\n\n### 7、concat()\n- 把两个数组拼接到一起。\n\n- 返回拼接后的数组。\n\n- 原来的数组不变。\n\n### 8、toString()\n- 把原来的数组转换成字符串。\n\n- 以字符串的形式返回。\n\n- 原来的数组不变。\n\n### 9、join()\n- 按照每一个分隔符，把数组中的每一项拼接成一个字符串。\n\n- 返回以分隔符拼接的字符串。\n\n- 原来的数组不变。\n\n### 10、reverse()\n- 把原来的数组倒过来排列。\n\n- 返回原来的数组倒过来。\n\n- 原来的数组改变。\n\n### 11、sort()\n- 数组进行排序。\n\n- ary.sort(function(a,b) {return a - b})由小到大排序。\n\n- ary.sort(function(a,b) {return b - a})由大到小排序。\n\n- 原来的数组发生改变。\n\n### 12、indexOf()/lastIndexOf()\n- 当前内容在数组中第一次/最后一次出现位置的索引。\n\n- 如果数组中没有找到返回-1，如果找到索引是几就返回几。\n\n- 原来数组不变。\n\n### 13、map()/forEach()\n- 都是用来遍历数组每一项。\n\n- map()原来数组不变，forEach()原来得数组改变。\n\n### 类数组转换为数组\n\n- Array.from()\n\n- Array.prototype.slice.call()\n\n- Array.prototype.forEach()","source":"_posts/arry.md","raw":"---\ntitle: 数组中常用的方法\ndate: 2020-05-23 17:45:31\ntags: JS\ncategories:\n- JS基础\n---\n### 1、push()\n- 向数组的末尾增加新的内容。\n\n- 返回新增后数组的长度。\n\n- 原来数组发生改变。\n\n### 2、pop()\n- 删除数组最后一项内容。\n\n- 返回被删除的那一项。\n\n- 原来的数组发生改变。\n\n### 3、shift()\n- 删除数组中的第一项。\n\n- 返回被删除的那一项。\n\n- 原来的数组发生改变。\n\n### 4、unshhift()\n- 向数组的开头增加内容。\n\n- 返回增加后数组的长度。\n\n- 原来的数组发生改变。\n\n### 5、splice(n,m,x)\n- 从索引 n 开始，删除 m 个，用 x 替换删除的部分。\n\n- 以数组的形式返回被删除的内容。\n\n- 原来的数组改变。\n\n### 6、slice(n,m)\n- 从索引 n 开始，找到索引 m 处，将找到的内容以一个新的数组返回。\n\n- 返回找到的数组。\n\n- 原来的数组不变。\n\n### 7、concat()\n- 把两个数组拼接到一起。\n\n- 返回拼接后的数组。\n\n- 原来的数组不变。\n\n### 8、toString()\n- 把原来的数组转换成字符串。\n\n- 以字符串的形式返回。\n\n- 原来的数组不变。\n\n### 9、join()\n- 按照每一个分隔符，把数组中的每一项拼接成一个字符串。\n\n- 返回以分隔符拼接的字符串。\n\n- 原来的数组不变。\n\n### 10、reverse()\n- 把原来的数组倒过来排列。\n\n- 返回原来的数组倒过来。\n\n- 原来的数组改变。\n\n### 11、sort()\n- 数组进行排序。\n\n- ary.sort(function(a,b) {return a - b})由小到大排序。\n\n- ary.sort(function(a,b) {return b - a})由大到小排序。\n\n- 原来的数组发生改变。\n\n### 12、indexOf()/lastIndexOf()\n- 当前内容在数组中第一次/最后一次出现位置的索引。\n\n- 如果数组中没有找到返回-1，如果找到索引是几就返回几。\n\n- 原来数组不变。\n\n### 13、map()/forEach()\n- 都是用来遍历数组每一项。\n\n- map()原来数组不变，forEach()原来得数组改变。\n\n### 类数组转换为数组\n\n- Array.from()\n\n- Array.prototype.slice.call()\n\n- Array.prototype.forEach()","slug":"arry","published":1,"updated":"2020-10-13T08:00:32.025Z","_id":"ckfl1j01o0001m4olbdq74bzd","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"1、push\"><a href=\"#1、push\" class=\"headerlink\" title=\"1、push()\"></a>1、push()</h3><ul>\n<li><p>向数组的末尾增加新的内容。</p>\n</li>\n<li><p>返回新增后数组的长度。</p>\n</li>\n<li><p>原来数组发生改变。</p>\n</li>\n</ul>\n<h3 id=\"2、pop\"><a href=\"#2、pop\" class=\"headerlink\" title=\"2、pop()\"></a>2、pop()</h3><ul>\n<li><p>删除数组最后一项内容。</p>\n</li>\n<li><p>返回被删除的那一项。</p>\n</li>\n<li><p>原来的数组发生改变。</p>\n</li>\n</ul>\n<h3 id=\"3、shift\"><a href=\"#3、shift\" class=\"headerlink\" title=\"3、shift()\"></a>3、shift()</h3><ul>\n<li><p>删除数组中的第一项。</p>\n</li>\n<li><p>返回被删除的那一项。</p>\n</li>\n<li><p>原来的数组发生改变。</p>\n</li>\n</ul>\n<h3 id=\"4、unshhift\"><a href=\"#4、unshhift\" class=\"headerlink\" title=\"4、unshhift()\"></a>4、unshhift()</h3><ul>\n<li><p>向数组的开头增加内容。</p>\n</li>\n<li><p>返回增加后数组的长度。</p>\n</li>\n<li><p>原来的数组发生改变。</p>\n</li>\n</ul>\n<h3 id=\"5、splice-n-m-x\"><a href=\"#5、splice-n-m-x\" class=\"headerlink\" title=\"5、splice(n,m,x)\"></a>5、splice(n,m,x)</h3><ul>\n<li><p>从索引 n 开始，删除 m 个，用 x 替换删除的部分。</p>\n</li>\n<li><p>以数组的形式返回被删除的内容。</p>\n</li>\n<li><p>原来的数组改变。</p>\n</li>\n</ul>\n<h3 id=\"6、slice-n-m\"><a href=\"#6、slice-n-m\" class=\"headerlink\" title=\"6、slice(n,m)\"></a>6、slice(n,m)</h3><ul>\n<li><p>从索引 n 开始，找到索引 m 处，将找到的内容以一个新的数组返回。</p>\n</li>\n<li><p>返回找到的数组。</p>\n</li>\n<li><p>原来的数组不变。</p>\n</li>\n</ul>\n<h3 id=\"7、concat\"><a href=\"#7、concat\" class=\"headerlink\" title=\"7、concat()\"></a>7、concat()</h3><ul>\n<li><p>把两个数组拼接到一起。</p>\n</li>\n<li><p>返回拼接后的数组。</p>\n</li>\n<li><p>原来的数组不变。</p>\n</li>\n</ul>\n<h3 id=\"8、toString\"><a href=\"#8、toString\" class=\"headerlink\" title=\"8、toString()\"></a>8、toString()</h3><ul>\n<li><p>把原来的数组转换成字符串。</p>\n</li>\n<li><p>以字符串的形式返回。</p>\n</li>\n<li><p>原来的数组不变。</p>\n</li>\n</ul>\n<h3 id=\"9、join\"><a href=\"#9、join\" class=\"headerlink\" title=\"9、join()\"></a>9、join()</h3><ul>\n<li><p>按照每一个分隔符，把数组中的每一项拼接成一个字符串。</p>\n</li>\n<li><p>返回以分隔符拼接的字符串。</p>\n</li>\n<li><p>原来的数组不变。</p>\n</li>\n</ul>\n<h3 id=\"10、reverse\"><a href=\"#10、reverse\" class=\"headerlink\" title=\"10、reverse()\"></a>10、reverse()</h3><ul>\n<li><p>把原来的数组倒过来排列。</p>\n</li>\n<li><p>返回原来的数组倒过来。</p>\n</li>\n<li><p>原来的数组改变。</p>\n</li>\n</ul>\n<h3 id=\"11、sort\"><a href=\"#11、sort\" class=\"headerlink\" title=\"11、sort()\"></a>11、sort()</h3><ul>\n<li><p>数组进行排序。</p>\n</li>\n<li><p>ary.sort(function(a,b) {return a - b})由小到大排序。</p>\n</li>\n<li><p>ary.sort(function(a,b) {return b - a})由大到小排序。</p>\n</li>\n<li><p>原来的数组发生改变。</p>\n</li>\n</ul>\n<h3 id=\"12、indexOf-lastIndexOf\"><a href=\"#12、indexOf-lastIndexOf\" class=\"headerlink\" title=\"12、indexOf()/lastIndexOf()\"></a>12、indexOf()/lastIndexOf()</h3><ul>\n<li><p>当前内容在数组中第一次/最后一次出现位置的索引。</p>\n</li>\n<li><p>如果数组中没有找到返回-1，如果找到索引是几就返回几。</p>\n</li>\n<li><p>原来数组不变。</p>\n</li>\n</ul>\n<h3 id=\"13、map-forEach\"><a href=\"#13、map-forEach\" class=\"headerlink\" title=\"13、map()/forEach()\"></a>13、map()/forEach()</h3><ul>\n<li><p>都是用来遍历数组每一项。</p>\n</li>\n<li><p>map()原来数组不变，forEach()原来得数组改变。</p>\n</li>\n</ul>\n<h3 id=\"类数组转换为数组\"><a href=\"#类数组转换为数组\" class=\"headerlink\" title=\"类数组转换为数组\"></a>类数组转换为数组</h3><ul>\n<li><p>Array.from()</p>\n</li>\n<li><p>Array.prototype.slice.call()</p>\n</li>\n<li><p>Array.prototype.forEach()</p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"1、push\"><a href=\"#1、push\" class=\"headerlink\" title=\"1、push()\"></a>1、push()</h3><ul>\n<li><p>向数组的末尾增加新的内容。</p>\n</li>\n<li><p>返回新增后数组的长度。</p>\n</li>\n<li><p>原来数组发生改变。</p>\n</li>\n</ul>\n<h3 id=\"2、pop\"><a href=\"#2、pop\" class=\"headerlink\" title=\"2、pop()\"></a>2、pop()</h3><ul>\n<li><p>删除数组最后一项内容。</p>\n</li>\n<li><p>返回被删除的那一项。</p>\n</li>\n<li><p>原来的数组发生改变。</p>\n</li>\n</ul>\n<h3 id=\"3、shift\"><a href=\"#3、shift\" class=\"headerlink\" title=\"3、shift()\"></a>3、shift()</h3><ul>\n<li><p>删除数组中的第一项。</p>\n</li>\n<li><p>返回被删除的那一项。</p>\n</li>\n<li><p>原来的数组发生改变。</p>\n</li>\n</ul>\n<h3 id=\"4、unshhift\"><a href=\"#4、unshhift\" class=\"headerlink\" title=\"4、unshhift()\"></a>4、unshhift()</h3><ul>\n<li><p>向数组的开头增加内容。</p>\n</li>\n<li><p>返回增加后数组的长度。</p>\n</li>\n<li><p>原来的数组发生改变。</p>\n</li>\n</ul>\n<h3 id=\"5、splice-n-m-x\"><a href=\"#5、splice-n-m-x\" class=\"headerlink\" title=\"5、splice(n,m,x)\"></a>5、splice(n,m,x)</h3><ul>\n<li><p>从索引 n 开始，删除 m 个，用 x 替换删除的部分。</p>\n</li>\n<li><p>以数组的形式返回被删除的内容。</p>\n</li>\n<li><p>原来的数组改变。</p>\n</li>\n</ul>\n<h3 id=\"6、slice-n-m\"><a href=\"#6、slice-n-m\" class=\"headerlink\" title=\"6、slice(n,m)\"></a>6、slice(n,m)</h3><ul>\n<li><p>从索引 n 开始，找到索引 m 处，将找到的内容以一个新的数组返回。</p>\n</li>\n<li><p>返回找到的数组。</p>\n</li>\n<li><p>原来的数组不变。</p>\n</li>\n</ul>\n<h3 id=\"7、concat\"><a href=\"#7、concat\" class=\"headerlink\" title=\"7、concat()\"></a>7、concat()</h3><ul>\n<li><p>把两个数组拼接到一起。</p>\n</li>\n<li><p>返回拼接后的数组。</p>\n</li>\n<li><p>原来的数组不变。</p>\n</li>\n</ul>\n<h3 id=\"8、toString\"><a href=\"#8、toString\" class=\"headerlink\" title=\"8、toString()\"></a>8、toString()</h3><ul>\n<li><p>把原来的数组转换成字符串。</p>\n</li>\n<li><p>以字符串的形式返回。</p>\n</li>\n<li><p>原来的数组不变。</p>\n</li>\n</ul>\n<h3 id=\"9、join\"><a href=\"#9、join\" class=\"headerlink\" title=\"9、join()\"></a>9、join()</h3><ul>\n<li><p>按照每一个分隔符，把数组中的每一项拼接成一个字符串。</p>\n</li>\n<li><p>返回以分隔符拼接的字符串。</p>\n</li>\n<li><p>原来的数组不变。</p>\n</li>\n</ul>\n<h3 id=\"10、reverse\"><a href=\"#10、reverse\" class=\"headerlink\" title=\"10、reverse()\"></a>10、reverse()</h3><ul>\n<li><p>把原来的数组倒过来排列。</p>\n</li>\n<li><p>返回原来的数组倒过来。</p>\n</li>\n<li><p>原来的数组改变。</p>\n</li>\n</ul>\n<h3 id=\"11、sort\"><a href=\"#11、sort\" class=\"headerlink\" title=\"11、sort()\"></a>11、sort()</h3><ul>\n<li><p>数组进行排序。</p>\n</li>\n<li><p>ary.sort(function(a,b) {return a - b})由小到大排序。</p>\n</li>\n<li><p>ary.sort(function(a,b) {return b - a})由大到小排序。</p>\n</li>\n<li><p>原来的数组发生改变。</p>\n</li>\n</ul>\n<h3 id=\"12、indexOf-lastIndexOf\"><a href=\"#12、indexOf-lastIndexOf\" class=\"headerlink\" title=\"12、indexOf()/lastIndexOf()\"></a>12、indexOf()/lastIndexOf()</h3><ul>\n<li><p>当前内容在数组中第一次/最后一次出现位置的索引。</p>\n</li>\n<li><p>如果数组中没有找到返回-1，如果找到索引是几就返回几。</p>\n</li>\n<li><p>原来数组不变。</p>\n</li>\n</ul>\n<h3 id=\"13、map-forEach\"><a href=\"#13、map-forEach\" class=\"headerlink\" title=\"13、map()/forEach()\"></a>13、map()/forEach()</h3><ul>\n<li><p>都是用来遍历数组每一项。</p>\n</li>\n<li><p>map()原来数组不变，forEach()原来得数组改变。</p>\n</li>\n</ul>\n<h3 id=\"类数组转换为数组\"><a href=\"#类数组转换为数组\" class=\"headerlink\" title=\"类数组转换为数组\"></a>类数组转换为数组</h3><ul>\n<li><p>Array.from()</p>\n</li>\n<li><p>Array.prototype.slice.call()</p>\n</li>\n<li><p>Array.prototype.forEach()</p>\n</li>\n</ul>\n"},{"title":"前端跨域解决方案","_content":"&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;说到跨域我们不得不先来说说为什么会产生跨域。其实跨域就是指浏览器不能执行其它网站的脚本，它是由浏览器的同源策略造成的，是浏览器对javascript施加的安全限制。\n&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;那什么又是同源策略呢？同源策略是一种约定，它是浏览器最核心也最基本的安全功能，所谓的同源是指域名、协议、端口相同。\n&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;下面就让我来介绍几种解决跨域的方法吧！\n### 1、JSONP\n- 原理：就是利用```<script> ```标签没有跨域限制的漏洞。通过```<script>```标签指向一个需要访问的地址并提供一个回调函数来接收数据当需要通讯时。\n客户端\n```xml\n<script>\n    function jsonp(data) {\n        console.log(data)\n    }\n</script>\n<script type=\"text/javascript\" src=\"http://127.0.0.1:8888/get/jsonp?callback=jsonp\"></script>\n```\n服务端\n```js\nrouter.get('/get/jsonp', (ctx, next) => {\n    let callbackName = ctx.callback || 'callback'\n    let data = {\n        \"errcode\": 0,\n        \"data\": {\n            \"name\": \"cx\",\n            \"sex\": \"girl\",\n            \"address\": \"BeiJing\"\n        }\n    let jsonpStr = `~${callbackName}(${JSON.stringify(data)})`\n    ctx.type = 'text/javascript'\n    ctx.body = jsonpStr\n    }\n})\n```\n页面显示\n![](./hello-world/result.png)\n- 优点\n    - JSONP 使用简单且兼容性不错\n- 缺点\n    - 只限于 get 请求（即只读）\n    - 它只支持跨域HTTP这种情况\n    - jsonp在调用失败的时候，不会返回各种HTTP状态码（jsonp的错误处理机制并不完善，我们没办法进行错误处理）\n    - 需要客户端和服务端定制进行开发，服务端返回的数据不是标准的json数据，而是callback包裹的数据\n    - JSONP只会发一次请求\n\n&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;在我们开发中可能会遇到多个JSONP请求的回调函数名是相同的，这时候就需要自己封装一个JSONP，下面是实现的代码\n```js\nfunction jsonp(url, jsonpCallback, success) {\n    let script = document.createElement('script')\n    script.src = url\n    script.async = true\n    script.type = 'text/javascript'\n    window[jsonpCallback] = function(data) {\n        success && success(data)\n    }\n    document.body.appendChild(script)\n}\njsonp('http://127.0.0.1:8888/get/jsonp', 'callback', function(value) {\n    console.log(value)\n})\n```\n\n### 2、CORS\n- 原理：服务端设置 Access-Control-Allow-Origin 就可以开启 CORS。 该属性表示哪些域名可以访问资源，如果设置通配符则表示所有网站都可以访问资源。\n\n&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;虽然设置 CORS和前端没什么关系，但是通过这种方式解决跨域问题的话，会在发送请求时出现两种情况，分别为简单请求和复杂请求\n#### 简单请求\n1、使用下列方法之一：\n- GET\n- HEAD\n- POST\n\n2、HTTP头信息不超出以下几种字段：\n- Accept\n- Accept-Language\n- Content-Language\n- Last-Event-ID\n- Content-Type：只限于三个值application/x-www-form-urlencoded、multipart/form-data、text/plain\n\n#### 复杂请求\n&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;不满足简单请求的就是复杂请求，对于复杂请求来说，首先会发起一个预检请求，该请求是 option 方法，通过该请求来知道服务端是否允许跨域请求。当使用XMLHttpRequest发送请求时，浏览器发现该请求不符合同源策略，会给该请求加一个请求头：Origin，后台进行一系列处理，如果确定接受请求则在返回结果中加入一个响应头：Access-Control-Allow-Origin;浏览器判断该相应头中是否包含Origin的值，如果有则浏览器会处理响应，我们就可以拿到响应数据，如果不包含浏览器直接驳回，这时我们无法拿到响应数据。\n- 优点：\n  - CORS支持所有的浏览器请求类型，承载的请求数据量更大，开放更简洁，服务端只需要将处理后的数据直接返回，不需要再特殊处理。\n  - CORS可以通过onerror事件监听错误，并且浏览器控制台会看到报错信息，利于排查。\n\n### 3、document.domain\n&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;该方法只能用于主域名相同的情况下,比如```a.test.com``` 和 ```b.test.com```,只需要给页面添加```document.domain = 'test.com'```就可以实现跨域。\n&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;比如我们可以打开 [id.qq.com](https://id.qq.com/login/ptlogin.html)，调出控制台，输入```let w = window.open('http://www.qq.com')```，之后访问```w.document```，发现控制台会报出跨域相关的错误。这时我们再在控制台中输入```document.domain = 'qq.com'```，再访问```w.document```，这样就可以了。\n![](./hello-world/jt.png)\n- 注意：两个域名的主域名必须相同，并且所有的协议、端口都要一致，否则无法利用document.domain进行跨域。\n\n### 4、postMessage\n&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;这种方式一般会用在iframe嵌入其他页面时需要通信的情况下，只要正确的使用，这种方法很安全。\n```xml\n<iframe id=\"iframe\" src=\"http://test.com\"></iframe>\n```\n```js\n// 发送端\nconst iframe = document.getElementById('iframe);\niframe.contentWindow.postMessage('{\"method\":\"closeWindows\"}', \"http://test.com\")\n```\n```js\n//接收端\nwindow.addEventListener(\"message\", function(e){\n  console.log(e.data)\n}, false)\n```\n- 注意：\n  - 当使用postMessage将数据发送到其他窗口时，始终指定精确的目标origin，而不是*。 恶意网站可以在您不知情的情况下更改窗口的位置，因此它可以拦截使用postMessage发送的数据。\n  - 如果不希望从其他网站接收message，不要为message事件添加任何事件侦听器，这是一个完全万无一失的方式来避免安全问题。","source":"_posts/hello-world.md","raw":"---\ntitle: 前端跨域解决方案\ncategories:\n- 前端技术\n---\n&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;说到跨域我们不得不先来说说为什么会产生跨域。其实跨域就是指浏览器不能执行其它网站的脚本，它是由浏览器的同源策略造成的，是浏览器对javascript施加的安全限制。\n&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;那什么又是同源策略呢？同源策略是一种约定，它是浏览器最核心也最基本的安全功能，所谓的同源是指域名、协议、端口相同。\n&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;下面就让我来介绍几种解决跨域的方法吧！\n### 1、JSONP\n- 原理：就是利用```<script> ```标签没有跨域限制的漏洞。通过```<script>```标签指向一个需要访问的地址并提供一个回调函数来接收数据当需要通讯时。\n客户端\n```xml\n<script>\n    function jsonp(data) {\n        console.log(data)\n    }\n</script>\n<script type=\"text/javascript\" src=\"http://127.0.0.1:8888/get/jsonp?callback=jsonp\"></script>\n```\n服务端\n```js\nrouter.get('/get/jsonp', (ctx, next) => {\n    let callbackName = ctx.callback || 'callback'\n    let data = {\n        \"errcode\": 0,\n        \"data\": {\n            \"name\": \"cx\",\n            \"sex\": \"girl\",\n            \"address\": \"BeiJing\"\n        }\n    let jsonpStr = `~${callbackName}(${JSON.stringify(data)})`\n    ctx.type = 'text/javascript'\n    ctx.body = jsonpStr\n    }\n})\n```\n页面显示\n![](./hello-world/result.png)\n- 优点\n    - JSONP 使用简单且兼容性不错\n- 缺点\n    - 只限于 get 请求（即只读）\n    - 它只支持跨域HTTP这种情况\n    - jsonp在调用失败的时候，不会返回各种HTTP状态码（jsonp的错误处理机制并不完善，我们没办法进行错误处理）\n    - 需要客户端和服务端定制进行开发，服务端返回的数据不是标准的json数据，而是callback包裹的数据\n    - JSONP只会发一次请求\n\n&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;在我们开发中可能会遇到多个JSONP请求的回调函数名是相同的，这时候就需要自己封装一个JSONP，下面是实现的代码\n```js\nfunction jsonp(url, jsonpCallback, success) {\n    let script = document.createElement('script')\n    script.src = url\n    script.async = true\n    script.type = 'text/javascript'\n    window[jsonpCallback] = function(data) {\n        success && success(data)\n    }\n    document.body.appendChild(script)\n}\njsonp('http://127.0.0.1:8888/get/jsonp', 'callback', function(value) {\n    console.log(value)\n})\n```\n\n### 2、CORS\n- 原理：服务端设置 Access-Control-Allow-Origin 就可以开启 CORS。 该属性表示哪些域名可以访问资源，如果设置通配符则表示所有网站都可以访问资源。\n\n&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;虽然设置 CORS和前端没什么关系，但是通过这种方式解决跨域问题的话，会在发送请求时出现两种情况，分别为简单请求和复杂请求\n#### 简单请求\n1、使用下列方法之一：\n- GET\n- HEAD\n- POST\n\n2、HTTP头信息不超出以下几种字段：\n- Accept\n- Accept-Language\n- Content-Language\n- Last-Event-ID\n- Content-Type：只限于三个值application/x-www-form-urlencoded、multipart/form-data、text/plain\n\n#### 复杂请求\n&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;不满足简单请求的就是复杂请求，对于复杂请求来说，首先会发起一个预检请求，该请求是 option 方法，通过该请求来知道服务端是否允许跨域请求。当使用XMLHttpRequest发送请求时，浏览器发现该请求不符合同源策略，会给该请求加一个请求头：Origin，后台进行一系列处理，如果确定接受请求则在返回结果中加入一个响应头：Access-Control-Allow-Origin;浏览器判断该相应头中是否包含Origin的值，如果有则浏览器会处理响应，我们就可以拿到响应数据，如果不包含浏览器直接驳回，这时我们无法拿到响应数据。\n- 优点：\n  - CORS支持所有的浏览器请求类型，承载的请求数据量更大，开放更简洁，服务端只需要将处理后的数据直接返回，不需要再特殊处理。\n  - CORS可以通过onerror事件监听错误，并且浏览器控制台会看到报错信息，利于排查。\n\n### 3、document.domain\n&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;该方法只能用于主域名相同的情况下,比如```a.test.com``` 和 ```b.test.com```,只需要给页面添加```document.domain = 'test.com'```就可以实现跨域。\n&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;比如我们可以打开 [id.qq.com](https://id.qq.com/login/ptlogin.html)，调出控制台，输入```let w = window.open('http://www.qq.com')```，之后访问```w.document```，发现控制台会报出跨域相关的错误。这时我们再在控制台中输入```document.domain = 'qq.com'```，再访问```w.document```，这样就可以了。\n![](./hello-world/jt.png)\n- 注意：两个域名的主域名必须相同，并且所有的协议、端口都要一致，否则无法利用document.domain进行跨域。\n\n### 4、postMessage\n&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;这种方式一般会用在iframe嵌入其他页面时需要通信的情况下，只要正确的使用，这种方法很安全。\n```xml\n<iframe id=\"iframe\" src=\"http://test.com\"></iframe>\n```\n```js\n// 发送端\nconst iframe = document.getElementById('iframe);\niframe.contentWindow.postMessage('{\"method\":\"closeWindows\"}', \"http://test.com\")\n```\n```js\n//接收端\nwindow.addEventListener(\"message\", function(e){\n  console.log(e.data)\n}, false)\n```\n- 注意：\n  - 当使用postMessage将数据发送到其他窗口时，始终指定精确的目标origin，而不是*。 恶意网站可以在您不知情的情况下更改窗口的位置，因此它可以拦截使用postMessage发送的数据。\n  - 如果不希望从其他网站接收message，不要为message事件添加任何事件侦听器，这是一个完全万无一失的方式来避免安全问题。","slug":"hello-world","published":1,"date":"2020-05-08T07:32:27.855Z","updated":"2020-05-09T08:41:37.991Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckfl1j01s0004m4olh9mq581v","content":"<p>&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;说到跨域我们不得不先来说说为什么会产生跨域。其实跨域就是指浏览器不能执行其它网站的脚本，它是由浏览器的同源策略造成的，是浏览器对javascript施加的安全限制。<br>&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;那什么又是同源策略呢？同源策略是一种约定，它是浏览器最核心也最基本的安全功能，所谓的同源是指域名、协议、端口相同。<br>&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;下面就让我来介绍几种解决跨域的方法吧！</p>\n<h3 id=\"1、JSONP\"><a href=\"#1、JSONP\" class=\"headerlink\" title=\"1、JSONP\"></a>1、JSONP</h3><ul>\n<li>原理：就是利用<code>&lt;script&gt;</code>标签没有跨域限制的漏洞。通过<code>&lt;script&gt;</code>标签指向一个需要访问的地址并提供一个回调函数来接收数据当需要通讯时。<br>客户端<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"actionscript\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">jsonp</span><span class=\"hljs-params\">(data)</span> </span>&#123;</span><br><span class=\"javascript\">        <span class=\"hljs-built_in\">console</span>.log(data)</span><br>    &#125;<br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"text/javascript\"</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"http://127.0.0.1:8888/get/jsonp?callback=jsonp\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br></code></pre></td></tr></table></figure>\n服务端<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">router.get(<span class=\"hljs-string\">'/get/jsonp'</span>, (ctx, next) =&gt; &#123;<br>    <span class=\"hljs-keyword\">let</span> callbackName = ctx.callback || <span class=\"hljs-string\">'callback'</span><br>    <span class=\"hljs-keyword\">let</span> data = &#123;<br>        <span class=\"hljs-string\">\"errcode\"</span>: <span class=\"hljs-number\">0</span>,<br>        <span class=\"hljs-string\">\"data\"</span>: &#123;<br>            <span class=\"hljs-string\">\"name\"</span>: <span class=\"hljs-string\">\"cx\"</span>,<br>            <span class=\"hljs-string\">\"sex\"</span>: <span class=\"hljs-string\">\"girl\"</span>,<br>            <span class=\"hljs-string\">\"address\"</span>: <span class=\"hljs-string\">\"BeiJing\"</span><br>        &#125;<br>    <span class=\"hljs-keyword\">let</span> jsonpStr = <span class=\"hljs-string\">`~<span class=\"hljs-subst\">$&#123;callbackName&#125;</span>(<span class=\"hljs-subst\">$&#123;<span class=\"hljs-built_in\">JSON</span>.stringify(data)&#125;</span>)`</span><br>    ctx.type = <span class=\"hljs-string\">'text/javascript'</span><br>    ctx.body = jsonpStr<br>    &#125;<br>&#125;)<br></code></pre></td></tr></table></figure>\n页面显示<img src=\"/blog/2020/05/08/hello-world/result.png\" class=\"\"></li>\n<li>优点<ul>\n<li>JSONP 使用简单且兼容性不错</li>\n</ul>\n</li>\n<li>缺点<ul>\n<li>只限于 get 请求（即只读）</li>\n<li>它只支持跨域HTTP这种情况</li>\n<li>jsonp在调用失败的时候，不会返回各种HTTP状态码（jsonp的错误处理机制并不完善，我们没办法进行错误处理）</li>\n<li>需要客户端和服务端定制进行开发，服务端返回的数据不是标准的json数据，而是callback包裹的数据</li>\n<li>JSONP只会发一次请求</li>\n</ul>\n</li>\n</ul>\n<p>&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;在我们开发中可能会遇到多个JSONP请求的回调函数名是相同的，这时候就需要自己封装一个JSONP，下面是实现的代码</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">jsonp</span>(<span class=\"hljs-params\">url, jsonpCallback, success</span>) </span>&#123;<br>    <span class=\"hljs-keyword\">let</span> script = <span class=\"hljs-built_in\">document</span>.createElement(<span class=\"hljs-string\">'script'</span>)<br>    script.src = url<br>    script.async = <span class=\"hljs-literal\">true</span><br>    script.type = <span class=\"hljs-string\">'text/javascript'</span><br>    <span class=\"hljs-built_in\">window</span>[jsonpCallback] = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">data</span>) </span>&#123;<br>        success &amp;&amp; success(data)<br>    &#125;<br>    <span class=\"hljs-built_in\">document</span>.body.appendChild(script)<br>&#125;<br>jsonp(<span class=\"hljs-string\">'http://127.0.0.1:8888/get/jsonp'</span>, <span class=\"hljs-string\">'callback'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">value</span>) </span>&#123;<br>    <span class=\"hljs-built_in\">console</span>.log(value)<br>&#125;)<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"2、CORS\"><a href=\"#2、CORS\" class=\"headerlink\" title=\"2、CORS\"></a>2、CORS</h3><ul>\n<li>原理：服务端设置 Access-Control-Allow-Origin 就可以开启 CORS。 该属性表示哪些域名可以访问资源，如果设置通配符则表示所有网站都可以访问资源。</li>\n</ul>\n<p>&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;虽然设置 CORS和前端没什么关系，但是通过这种方式解决跨域问题的话，会在发送请求时出现两种情况，分别为简单请求和复杂请求</p>\n<h4 id=\"简单请求\"><a href=\"#简单请求\" class=\"headerlink\" title=\"简单请求\"></a>简单请求</h4><p>1、使用下列方法之一：</p>\n<ul>\n<li>GET</li>\n<li>HEAD</li>\n<li>POST</li>\n</ul>\n<p>2、HTTP头信息不超出以下几种字段：</p>\n<ul>\n<li>Accept</li>\n<li>Accept-Language</li>\n<li>Content-Language</li>\n<li>Last-Event-ID</li>\n<li>Content-Type：只限于三个值application/x-www-form-urlencoded、multipart/form-data、text/plain</li>\n</ul>\n<h4 id=\"复杂请求\"><a href=\"#复杂请求\" class=\"headerlink\" title=\"复杂请求\"></a>复杂请求</h4><p>&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;不满足简单请求的就是复杂请求，对于复杂请求来说，首先会发起一个预检请求，该请求是 option 方法，通过该请求来知道服务端是否允许跨域请求。当使用XMLHttpRequest发送请求时，浏览器发现该请求不符合同源策略，会给该请求加一个请求头：Origin，后台进行一系列处理，如果确定接受请求则在返回结果中加入一个响应头：Access-Control-Allow-Origin;浏览器判断该相应头中是否包含Origin的值，如果有则浏览器会处理响应，我们就可以拿到响应数据，如果不包含浏览器直接驳回，这时我们无法拿到响应数据。</p>\n<ul>\n<li>优点：<ul>\n<li>CORS支持所有的浏览器请求类型，承载的请求数据量更大，开放更简洁，服务端只需要将处理后的数据直接返回，不需要再特殊处理。</li>\n<li>CORS可以通过onerror事件监听错误，并且浏览器控制台会看到报错信息，利于排查。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"3、document-domain\"><a href=\"#3、document-domain\" class=\"headerlink\" title=\"3、document.domain\"></a>3、document.domain</h3><p>&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;该方法只能用于主域名相同的情况下,比如<code>a.test.com</code> 和 <code>b.test.com</code>,只需要给页面添加<code>document.domain = &#39;test.com&#39;</code>就可以实现跨域。<br>&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;比如我们可以打开 <a href=\"https://id.qq.com/login/ptlogin.html\" target=\"_blank\" rel=\"noopener\">id.qq.com</a>，调出控制台，输入<code>let w = window.open(&#39;http://www.qq.com&#39;)</code>，之后访问<code>w.document</code>，发现控制台会报出跨域相关的错误。这时我们再在控制台中输入<code>document.domain = &#39;qq.com&#39;</code>，再访问<code>w.document</code>，这样就可以了。</p>\n{% asset_img jt.png  %}\n<ul>\n<li>注意：两个域名的主域名必须相同，并且所有的协议、端口都要一致，否则无法利用document.domain进行跨域。</li>\n</ul>\n<h3 id=\"4、postMessage\"><a href=\"#4、postMessage\" class=\"headerlink\" title=\"4、postMessage\"></a>4、postMessage</h3><p>&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;这种方式一般会用在iframe嵌入其他页面时需要通信的情况下，只要正确的使用，这种方法很安全。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">iframe</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"iframe\"</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"http://test.com\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">iframe</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// 发送端</span><br><span class=\"hljs-keyword\">const</span> iframe = <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">'iframe);</span><br><span class=\"hljs-string\">iframe.contentWindow.postMessage('</span>&#123;<span class=\"hljs-string\">\"method\"</span>:<span class=\"hljs-string\">\"closeWindows\"</span>&#125;<span class=\"hljs-string\">', \"http://test.com\")</span><br></code></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">//接收端</span><br><span class=\"hljs-built_in\">window</span>.addEventListener(<span class=\"hljs-string\">\"message\"</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">e</span>)</span>&#123;<br>  <span class=\"hljs-built_in\">console</span>.log(e.data)<br>&#125;, <span class=\"hljs-literal\">false</span>)<br></code></pre></td></tr></table></figure>\n<ul>\n<li>注意：<ul>\n<li>当使用postMessage将数据发送到其他窗口时，始终指定精确的目标origin，而不是*。 恶意网站可以在您不知情的情况下更改窗口的位置，因此它可以拦截使用postMessage发送的数据。</li>\n<li>如果不希望从其他网站接收message，不要为message事件添加任何事件侦听器，这是一个完全万无一失的方式来避免安全问题。</li>\n</ul>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;说到跨域我们不得不先来说说为什么会产生跨域。其实跨域就是指浏览器不能执行其它网站的脚本，它是由浏览器的同源策略造成的，是浏览器对javascript施加的安全限制。<br>&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;那什么又是同源策略呢？同源策略是一种约定，它是浏览器最核心也最基本的安全功能，所谓的同源是指域名、协议、端口相同。<br>&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;下面就让我来介绍几种解决跨域的方法吧！</p>\n<h3 id=\"1、JSONP\"><a href=\"#1、JSONP\" class=\"headerlink\" title=\"1、JSONP\"></a>1、JSONP</h3><ul>\n<li>原理：就是利用<code>&lt;script&gt;</code>标签没有跨域限制的漏洞。通过<code>&lt;script&gt;</code>标签指向一个需要访问的地址并提供一个回调函数来接收数据当需要通讯时。<br>客户端<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"actionscript\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">jsonp</span><span class=\"hljs-params\">(data)</span> </span>&#123;</span><br><span class=\"javascript\">        <span class=\"hljs-built_in\">console</span>.log(data)</span><br>    &#125;<br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"text/javascript\"</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"http://127.0.0.1:8888/get/jsonp?callback=jsonp\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br></code></pre></td></tr></table></figure>\n服务端<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">router.get(<span class=\"hljs-string\">'/get/jsonp'</span>, (ctx, next) =&gt; &#123;<br>    <span class=\"hljs-keyword\">let</span> callbackName = ctx.callback || <span class=\"hljs-string\">'callback'</span><br>    <span class=\"hljs-keyword\">let</span> data = &#123;<br>        <span class=\"hljs-string\">\"errcode\"</span>: <span class=\"hljs-number\">0</span>,<br>        <span class=\"hljs-string\">\"data\"</span>: &#123;<br>            <span class=\"hljs-string\">\"name\"</span>: <span class=\"hljs-string\">\"cx\"</span>,<br>            <span class=\"hljs-string\">\"sex\"</span>: <span class=\"hljs-string\">\"girl\"</span>,<br>            <span class=\"hljs-string\">\"address\"</span>: <span class=\"hljs-string\">\"BeiJing\"</span><br>        &#125;<br>    <span class=\"hljs-keyword\">let</span> jsonpStr = <span class=\"hljs-string\">`~<span class=\"hljs-subst\">$&#123;callbackName&#125;</span>(<span class=\"hljs-subst\">$&#123;<span class=\"hljs-built_in\">JSON</span>.stringify(data)&#125;</span>)`</span><br>    ctx.type = <span class=\"hljs-string\">'text/javascript'</span><br>    ctx.body = jsonpStr<br>    &#125;<br>&#125;)<br></code></pre></td></tr></table></figure>\n页面显示<img src=\"/blog/2020/05/08/hello-world/result.png\" class=\"\"></li>\n<li>优点<ul>\n<li>JSONP 使用简单且兼容性不错</li>\n</ul>\n</li>\n<li>缺点<ul>\n<li>只限于 get 请求（即只读）</li>\n<li>它只支持跨域HTTP这种情况</li>\n<li>jsonp在调用失败的时候，不会返回各种HTTP状态码（jsonp的错误处理机制并不完善，我们没办法进行错误处理）</li>\n<li>需要客户端和服务端定制进行开发，服务端返回的数据不是标准的json数据，而是callback包裹的数据</li>\n<li>JSONP只会发一次请求</li>\n</ul>\n</li>\n</ul>\n<p>&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;在我们开发中可能会遇到多个JSONP请求的回调函数名是相同的，这时候就需要自己封装一个JSONP，下面是实现的代码</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">jsonp</span>(<span class=\"hljs-params\">url, jsonpCallback, success</span>) </span>&#123;<br>    <span class=\"hljs-keyword\">let</span> script = <span class=\"hljs-built_in\">document</span>.createElement(<span class=\"hljs-string\">'script'</span>)<br>    script.src = url<br>    script.async = <span class=\"hljs-literal\">true</span><br>    script.type = <span class=\"hljs-string\">'text/javascript'</span><br>    <span class=\"hljs-built_in\">window</span>[jsonpCallback] = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">data</span>) </span>&#123;<br>        success &amp;&amp; success(data)<br>    &#125;<br>    <span class=\"hljs-built_in\">document</span>.body.appendChild(script)<br>&#125;<br>jsonp(<span class=\"hljs-string\">'http://127.0.0.1:8888/get/jsonp'</span>, <span class=\"hljs-string\">'callback'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">value</span>) </span>&#123;<br>    <span class=\"hljs-built_in\">console</span>.log(value)<br>&#125;)<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"2、CORS\"><a href=\"#2、CORS\" class=\"headerlink\" title=\"2、CORS\"></a>2、CORS</h3><ul>\n<li>原理：服务端设置 Access-Control-Allow-Origin 就可以开启 CORS。 该属性表示哪些域名可以访问资源，如果设置通配符则表示所有网站都可以访问资源。</li>\n</ul>\n<p>&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;虽然设置 CORS和前端没什么关系，但是通过这种方式解决跨域问题的话，会在发送请求时出现两种情况，分别为简单请求和复杂请求</p>\n<h4 id=\"简单请求\"><a href=\"#简单请求\" class=\"headerlink\" title=\"简单请求\"></a>简单请求</h4><p>1、使用下列方法之一：</p>\n<ul>\n<li>GET</li>\n<li>HEAD</li>\n<li>POST</li>\n</ul>\n<p>2、HTTP头信息不超出以下几种字段：</p>\n<ul>\n<li>Accept</li>\n<li>Accept-Language</li>\n<li>Content-Language</li>\n<li>Last-Event-ID</li>\n<li>Content-Type：只限于三个值application/x-www-form-urlencoded、multipart/form-data、text/plain</li>\n</ul>\n<h4 id=\"复杂请求\"><a href=\"#复杂请求\" class=\"headerlink\" title=\"复杂请求\"></a>复杂请求</h4><p>&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;不满足简单请求的就是复杂请求，对于复杂请求来说，首先会发起一个预检请求，该请求是 option 方法，通过该请求来知道服务端是否允许跨域请求。当使用XMLHttpRequest发送请求时，浏览器发现该请求不符合同源策略，会给该请求加一个请求头：Origin，后台进行一系列处理，如果确定接受请求则在返回结果中加入一个响应头：Access-Control-Allow-Origin;浏览器判断该相应头中是否包含Origin的值，如果有则浏览器会处理响应，我们就可以拿到响应数据，如果不包含浏览器直接驳回，这时我们无法拿到响应数据。</p>\n<ul>\n<li>优点：<ul>\n<li>CORS支持所有的浏览器请求类型，承载的请求数据量更大，开放更简洁，服务端只需要将处理后的数据直接返回，不需要再特殊处理。</li>\n<li>CORS可以通过onerror事件监听错误，并且浏览器控制台会看到报错信息，利于排查。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"3、document-domain\"><a href=\"#3、document-domain\" class=\"headerlink\" title=\"3、document.domain\"></a>3、document.domain</h3><p>&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;该方法只能用于主域名相同的情况下,比如<code>a.test.com</code> 和 <code>b.test.com</code>,只需要给页面添加<code>document.domain = &#39;test.com&#39;</code>就可以实现跨域。<br>&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;比如我们可以打开 <a href=\"https://id.qq.com/login/ptlogin.html\" target=\"_blank\" rel=\"noopener\">id.qq.com</a>，调出控制台，输入<code>let w = window.open(&#39;http://www.qq.com&#39;)</code>，之后访问<code>w.document</code>，发现控制台会报出跨域相关的错误。这时我们再在控制台中输入<code>document.domain = &#39;qq.com&#39;</code>，再访问<code>w.document</code>，这样就可以了。</p>\n{% asset_img jt.png  %}\n<ul>\n<li>注意：两个域名的主域名必须相同，并且所有的协议、端口都要一致，否则无法利用document.domain进行跨域。</li>\n</ul>\n<h3 id=\"4、postMessage\"><a href=\"#4、postMessage\" class=\"headerlink\" title=\"4、postMessage\"></a>4、postMessage</h3><p>&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;这种方式一般会用在iframe嵌入其他页面时需要通信的情况下，只要正确的使用，这种方法很安全。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">iframe</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"iframe\"</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"http://test.com\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">iframe</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// 发送端</span><br><span class=\"hljs-keyword\">const</span> iframe = <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">'iframe);</span><br><span class=\"hljs-string\">iframe.contentWindow.postMessage('</span>&#123;<span class=\"hljs-string\">\"method\"</span>:<span class=\"hljs-string\">\"closeWindows\"</span>&#125;<span class=\"hljs-string\">', \"http://test.com\")</span><br></code></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">//接收端</span><br><span class=\"hljs-built_in\">window</span>.addEventListener(<span class=\"hljs-string\">\"message\"</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">e</span>)</span>&#123;<br>  <span class=\"hljs-built_in\">console</span>.log(e.data)<br>&#125;, <span class=\"hljs-literal\">false</span>)<br></code></pre></td></tr></table></figure>\n<ul>\n<li>注意：<ul>\n<li>当使用postMessage将数据发送到其他窗口时，始终指定精确的目标origin，而不是*。 恶意网站可以在您不知情的情况下更改窗口的位置，因此它可以拦截使用postMessage发送的数据。</li>\n<li>如果不希望从其他网站接收message，不要为message事件添加任何事件侦听器，这是一个完全万无一失的方式来避免安全问题。</li>\n</ul>\n</li>\n</ul>\n"},{"title":"http和https","date":"2020-05-20T03:46:50.000Z","_content":"### http\n&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;http 协议的全称为```超文本传输协议```。http 是以明文的方式发送内容，不提供任何方式的数据加密，因此 http 不适合传输敏感信息。\n&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;http 默认工作在TCP协议 80 端口。\n### https\n&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;https 协议的全称为```超文本传输安全协议```。它是为了解决 http 传输不安全而诞生的。https 在 http 的基础上加入了 SSL 协议，SSL 依靠证书来验证服务器的身份，并为浏览器和服务器之间的通信加密。\n&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;https 默认工作在 TCP 协议 443 端口。\n### https与http的区别\n- http 是明文传输，数据都是未加密的，安全性较差，https 数据传输的过程是加密的，安全性好。\n- https 协议需要到CA申请证书，免费的证书比较少，所以需要一定的费用\n- http 页面响应速度比 https 快，因为 http 使用 TCP 三次握手建立连接，客户端和服务器需要交换3个包，https 除了 TCP 的三个包，还需要加上ssl握手需要的9个包，一共是12个包。\n- https 和 http 使用的是完全不同的连接方式，用的端口也不一样，http 用的是 80 端口，https 用的是 443 端口。\n- https 其实就是建构在 SSL/TLS 之上的 http 协议，所以 https 比 http 要更耗费服务器资源。","source":"_posts/http.md","raw":"---\ntitle: http和https\ndate: 2020-05-20 11:46:50\ntags: http\ncategories:\n- 网络基础\n---\n### http\n&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;http 协议的全称为```超文本传输协议```。http 是以明文的方式发送内容，不提供任何方式的数据加密，因此 http 不适合传输敏感信息。\n&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;http 默认工作在TCP协议 80 端口。\n### https\n&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;https 协议的全称为```超文本传输安全协议```。它是为了解决 http 传输不安全而诞生的。https 在 http 的基础上加入了 SSL 协议，SSL 依靠证书来验证服务器的身份，并为浏览器和服务器之间的通信加密。\n&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;https 默认工作在 TCP 协议 443 端口。\n### https与http的区别\n- http 是明文传输，数据都是未加密的，安全性较差，https 数据传输的过程是加密的，安全性好。\n- https 协议需要到CA申请证书，免费的证书比较少，所以需要一定的费用\n- http 页面响应速度比 https 快，因为 http 使用 TCP 三次握手建立连接，客户端和服务器需要交换3个包，https 除了 TCP 的三个包，还需要加上ssl握手需要的9个包，一共是12个包。\n- https 和 http 使用的是完全不同的连接方式，用的端口也不一样，http 用的是 80 端口，https 用的是 443 端口。\n- https 其实就是建构在 SSL/TLS 之上的 http 协议，所以 https 比 http 要更耗费服务器资源。","slug":"http","published":1,"updated":"2020-05-20T08:11:01.310Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckfl1j01t0005m4olfb4u4qmf","content":"<h3 id=\"http\"><a href=\"#http\" class=\"headerlink\" title=\"http\"></a>http</h3><p>&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;http 协议的全称为<code>超文本传输协议</code>。http 是以明文的方式发送内容，不提供任何方式的数据加密，因此 http 不适合传输敏感信息。<br>&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;http 默认工作在TCP协议 80 端口。</p>\n<h3 id=\"https\"><a href=\"#https\" class=\"headerlink\" title=\"https\"></a>https</h3><p>&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;https 协议的全称为<code>超文本传输安全协议</code>。它是为了解决 http 传输不安全而诞生的。https 在 http 的基础上加入了 SSL 协议，SSL 依靠证书来验证服务器的身份，并为浏览器和服务器之间的通信加密。<br>&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;https 默认工作在 TCP 协议 443 端口。</p>\n<h3 id=\"https与http的区别\"><a href=\"#https与http的区别\" class=\"headerlink\" title=\"https与http的区别\"></a>https与http的区别</h3><ul>\n<li>http 是明文传输，数据都是未加密的，安全性较差，https 数据传输的过程是加密的，安全性好。</li>\n<li>https 协议需要到CA申请证书，免费的证书比较少，所以需要一定的费用</li>\n<li>http 页面响应速度比 https 快，因为 http 使用 TCP 三次握手建立连接，客户端和服务器需要交换3个包，https 除了 TCP 的三个包，还需要加上ssl握手需要的9个包，一共是12个包。</li>\n<li>https 和 http 使用的是完全不同的连接方式，用的端口也不一样，http 用的是 80 端口，https 用的是 443 端口。</li>\n<li>https 其实就是建构在 SSL/TLS 之上的 http 协议，所以 https 比 http 要更耗费服务器资源。</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"http\"><a href=\"#http\" class=\"headerlink\" title=\"http\"></a>http</h3><p>&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;http 协议的全称为<code>超文本传输协议</code>。http 是以明文的方式发送内容，不提供任何方式的数据加密，因此 http 不适合传输敏感信息。<br>&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;http 默认工作在TCP协议 80 端口。</p>\n<h3 id=\"https\"><a href=\"#https\" class=\"headerlink\" title=\"https\"></a>https</h3><p>&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;https 协议的全称为<code>超文本传输安全协议</code>。它是为了解决 http 传输不安全而诞生的。https 在 http 的基础上加入了 SSL 协议，SSL 依靠证书来验证服务器的身份，并为浏览器和服务器之间的通信加密。<br>&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;https 默认工作在 TCP 协议 443 端口。</p>\n<h3 id=\"https与http的区别\"><a href=\"#https与http的区别\" class=\"headerlink\" title=\"https与http的区别\"></a>https与http的区别</h3><ul>\n<li>http 是明文传输，数据都是未加密的，安全性较差，https 数据传输的过程是加密的，安全性好。</li>\n<li>https 协议需要到CA申请证书，免费的证书比较少，所以需要一定的费用</li>\n<li>http 页面响应速度比 https 快，因为 http 使用 TCP 三次握手建立连接，客户端和服务器需要交换3个包，https 除了 TCP 的三个包，还需要加上ssl握手需要的9个包，一共是12个包。</li>\n<li>https 和 http 使用的是完全不同的连接方式，用的端口也不一样，http 用的是 80 端口，https 用的是 443 端口。</li>\n<li>https 其实就是建构在 SSL/TLS 之上的 http 协议，所以 https 比 http 要更耗费服务器资源。</li>\n</ul>\n"},{"title":"js中的继承","date":"2020-09-25T11:58:31.000Z","_content":"### 1、原型链继承\n- 原理：原型链对象变成父类的实例，子类就可以调用父类的方法和属性（利用原型让一个引用类型继承另一个引用类型的属性和方法）\n```js\nfunction Parent(){ }\n\nParent.prototype.age = 13\nParent.prototype.getName = function(){\n  return this.name\n}\n\nfunction Child(name){\n  this.name = name\n}\n\nChild.prototype = new Parent()\n\nlet child = new Child('AmilyCi')\n\nconsole.log(child.age) // 13\nconsole.log(child.getName()) // 'AmilyCi'\n```\n- 优点：实现起来简单\n- 缺点：不能向父类传递参数，引用类型的属性会被所有实例共享\n\n```js\nfunction Parent(){\n  this.likeSports = ['badminton', 'basketball', 'swimming']\n}\n\nParent.prototype.age = 13\nParent.prototype.getName = function(){\n  return this.name\n}\n\nfunction Child(name){\n  this.name = name\n}\n\nChild.prototype = new Parent()\n\nlet person1 = new Child('AmilyCx')\nlet person2 = new Child('Json')\n\nperson1.likeSports.push('shopping')\nconsole.log(person1.likeSports) // [\"badminton\", \"basketball\", \"swimming\", \"shopping\"]\nconsole.log(person2.likeSports) // [\"badminton\", \"basketball\", \"swimming\", \"shopping\"]\n```\n你会发现，当我们给 person1 增加一个喜欢的运动时，我们打印出 person2 喜欢的运动，这时候 person2 的喜欢运动中也增加了这个运动。这个属性会被所有的实例共享。\n\n### 2、构造函数继承\n- 原理：子类构造函数内部调用父类构造函数，并传入this\n```js\nfunction Parent(name){\n  this.name = name\n  this.likeSports = ['badminton', 'basketball', 'swimming']\n}\n\nfunction Child(name){\n  Parent.call(this, name)\n}\n\nParent.prototype.getName = function(){\n  return this.name\n}\n\nlet person1 = new Child('Lucy')\nlet person2 = new Child('LiLy')\nperson1.likeSports.push('shopping')\n\nconsole.log(person1.likeSports) // [\"badminton\", \"basketball\", \"swimming\", \"shopping\"]\nconsole.log(person2.likeSports) // [\"badminton\", \"basketball\", \"swimming\"]\nconsole.log(person1.name) // Lucy\nconsole.log(person1.getName()) // Uncaught TypeError: person1.getName is not a function\n```\n这次，我们通过 call 方法，可以给父类传参啦，并且我们给 person1 增加一项喜欢的运动，person2 不会也被加上啦。\n但是我们发现，我们创建的实例并不能调用父类的方法了，会报错，这是因为我们现在用的构造函数方式导致父类并不在子类的原型链上，所以子类无法调用父类的方法。\n\n### 3、组合继承\n\n- 原理：结合了前两个方法的优点\n\n```js\nfunction Parent(name){\n  this.name = name\n  this.likeSports = ['badminton', 'basketball', 'swimming']\n}\n\nParent.prototype.getName = function(){\n  return this.name\n}\n\nfunction Child(name, age){\n  Parent.call(this, name)\n  this.age = age\n}\n\nChild.prototype = new Parent()\nChild.prototype.constructor = Child\nChild.prototype.getAge = function(){\n  return this.age\n}\n\nlet person1 = new Child('Lucy', 18)\nlet person2 = new Child('Lily', 20)\nperson1.likeSports.push('shopping')\n\nconsole.log(person1.likeSports) // [\"badminton\", \"basketball\", \"swimming\", \"shopping\"]\nconsole.log(person2.likeSports) // [\"badminton\", \"basketball\", \"swimming\"]\nconsole.log(person1.name) // Lucy\nconsole.log(person1.getAge()) // 18\nconsole.log(person1.getName()) // Lucy\n```\n这样我们解决了传参的问题，引用类型的属性共享的问题，还有调用父类原型上的方法的问题都解决了。\n但是现在还有一个不足之处，在给 Child 原型赋值的时候都会执行一次父类构造函数，所以无论什么情况下都会调用两次父类构造函数\n\n### 4、寄生组合继承\n\n- 原理：首先用一个空对象建立和父类的关系，再用这个空对象作为子类的原型对象\n\n```js\nfunction inheritProtype(child,parent) {\n    var prototype = Object.create(parent.prototype);// 创建对象\n    prototype.constructor = child;\n    child.prototype = prototype\n}\n\nfunction Parent(name) {\n    this.name = name\n    this.likeSports = ['badminton', 'basketball', 'swimming']\n}\n\nParent.prototype.getName = function(){\n    return this.name\n}\n\nfunction Child(name,age){\n    Parent.call(this,name);\n    this.age = age;\n}\ninheritProtype(Child,Parent);\n\nChild.prototype.getAge = function(){\n  return this.age\n} \n\nlet person1 = new Child('Keven',13);\nlet person2 = new Child('Lucy',15);\n\nperson1.likeSports.push('shopping')\n\nconsole.log(person1.likeSports) // [\"badminton\", \"basketball\", \"swimming\", \"shopping\"]\nconsole.log(person2.likeSports) // [\"badminton\", \"basketball\", \"swimming\"]\nconsole.log(person1.name) // \"Keven\"\nconsole.log(person1.getName()) // Keven\nconsole.log(person1.getAge()) // 13\n```\n\n```js\nfunction Parent(name){\n  this.name = name\n  this.likeSports = ['badminton', 'basketball', 'swimming']\n}\nParent.prototype.getName = function(){\n  return this.name\n}\nfunction Child(name, age){\n  Parent.call(this, name)\n  this.age = age\n}\nChild.prototype = Object.create(Parent.prototype, {\n  constructor: {\n    value: Child,\n    enumerable: false,\n    configurable: true,\n    writable: true\n  }\n})\nChild.prototype.getAge = function(){\n  return this.age\n}\n\nlet person1 = new Child('Keven',13);\nlet person2 = new Child('Lucy',15);\n\nperson1.likeSports.push('shopping')\n\nconsole.log(person1.likeSports) // [\"badminton\", \"basketball\", \"swimming\", \"shopping\"]\nconsole.log(person2.likeSports) // [\"badminton\", \"basketball\", \"swimming\"]\nconsole.log(person1.name)  // Keven\nconsole.log(person1.getName()) // Keven\nconsole.log(person1.getAge()) //13\n\n```\n\n解决父类被调用两次的情况，这是最常用的方式\n\n### 5、class继承\n\n- ES6为我们提供了 class、 extends 关键字可以轻松的实现上面那种继承方式\n```js\nclass Parent {\n  constructor(name, age){\n    this.name = name\n    this.age = age\n    this.likeSports = ['badminton', 'basketball', 'swimming']\n  }\n  getName(){\n    return this.name\n  }\n  getAge(){\n    return this.age\n  }\n}\nclass Child extends Parent{\n  constructor(name, age){\n    super(name,age)\n  }\n}\n\nlet person1 = new Child('Lucy', 28)\nlet person2 = new Child('Lily', 30)\n\nperson1.likeSports.push('shopping')\n\nconsole.log(person1.likeSports) // [\"badminton\", \"basketball\", \"swimming\", \"shopping\"]\nconsole.log(person2.likeSports) // [\"badminton\", \"basketball\", \"swimming\"]\nconsole.log(person1.name) // Lucy\nconsole.log(person1.getName()) // Lucy\nconsole.log(person2.getAge()) // 30\n```","source":"_posts/inherit.md","raw":"---\ntitle: js中的继承\ndate: 2020-09-25 19:58:31\ntags: JS\ncategories:\n- JS基础\n---\n### 1、原型链继承\n- 原理：原型链对象变成父类的实例，子类就可以调用父类的方法和属性（利用原型让一个引用类型继承另一个引用类型的属性和方法）\n```js\nfunction Parent(){ }\n\nParent.prototype.age = 13\nParent.prototype.getName = function(){\n  return this.name\n}\n\nfunction Child(name){\n  this.name = name\n}\n\nChild.prototype = new Parent()\n\nlet child = new Child('AmilyCi')\n\nconsole.log(child.age) // 13\nconsole.log(child.getName()) // 'AmilyCi'\n```\n- 优点：实现起来简单\n- 缺点：不能向父类传递参数，引用类型的属性会被所有实例共享\n\n```js\nfunction Parent(){\n  this.likeSports = ['badminton', 'basketball', 'swimming']\n}\n\nParent.prototype.age = 13\nParent.prototype.getName = function(){\n  return this.name\n}\n\nfunction Child(name){\n  this.name = name\n}\n\nChild.prototype = new Parent()\n\nlet person1 = new Child('AmilyCx')\nlet person2 = new Child('Json')\n\nperson1.likeSports.push('shopping')\nconsole.log(person1.likeSports) // [\"badminton\", \"basketball\", \"swimming\", \"shopping\"]\nconsole.log(person2.likeSports) // [\"badminton\", \"basketball\", \"swimming\", \"shopping\"]\n```\n你会发现，当我们给 person1 增加一个喜欢的运动时，我们打印出 person2 喜欢的运动，这时候 person2 的喜欢运动中也增加了这个运动。这个属性会被所有的实例共享。\n\n### 2、构造函数继承\n- 原理：子类构造函数内部调用父类构造函数，并传入this\n```js\nfunction Parent(name){\n  this.name = name\n  this.likeSports = ['badminton', 'basketball', 'swimming']\n}\n\nfunction Child(name){\n  Parent.call(this, name)\n}\n\nParent.prototype.getName = function(){\n  return this.name\n}\n\nlet person1 = new Child('Lucy')\nlet person2 = new Child('LiLy')\nperson1.likeSports.push('shopping')\n\nconsole.log(person1.likeSports) // [\"badminton\", \"basketball\", \"swimming\", \"shopping\"]\nconsole.log(person2.likeSports) // [\"badminton\", \"basketball\", \"swimming\"]\nconsole.log(person1.name) // Lucy\nconsole.log(person1.getName()) // Uncaught TypeError: person1.getName is not a function\n```\n这次，我们通过 call 方法，可以给父类传参啦，并且我们给 person1 增加一项喜欢的运动，person2 不会也被加上啦。\n但是我们发现，我们创建的实例并不能调用父类的方法了，会报错，这是因为我们现在用的构造函数方式导致父类并不在子类的原型链上，所以子类无法调用父类的方法。\n\n### 3、组合继承\n\n- 原理：结合了前两个方法的优点\n\n```js\nfunction Parent(name){\n  this.name = name\n  this.likeSports = ['badminton', 'basketball', 'swimming']\n}\n\nParent.prototype.getName = function(){\n  return this.name\n}\n\nfunction Child(name, age){\n  Parent.call(this, name)\n  this.age = age\n}\n\nChild.prototype = new Parent()\nChild.prototype.constructor = Child\nChild.prototype.getAge = function(){\n  return this.age\n}\n\nlet person1 = new Child('Lucy', 18)\nlet person2 = new Child('Lily', 20)\nperson1.likeSports.push('shopping')\n\nconsole.log(person1.likeSports) // [\"badminton\", \"basketball\", \"swimming\", \"shopping\"]\nconsole.log(person2.likeSports) // [\"badminton\", \"basketball\", \"swimming\"]\nconsole.log(person1.name) // Lucy\nconsole.log(person1.getAge()) // 18\nconsole.log(person1.getName()) // Lucy\n```\n这样我们解决了传参的问题，引用类型的属性共享的问题，还有调用父类原型上的方法的问题都解决了。\n但是现在还有一个不足之处，在给 Child 原型赋值的时候都会执行一次父类构造函数，所以无论什么情况下都会调用两次父类构造函数\n\n### 4、寄生组合继承\n\n- 原理：首先用一个空对象建立和父类的关系，再用这个空对象作为子类的原型对象\n\n```js\nfunction inheritProtype(child,parent) {\n    var prototype = Object.create(parent.prototype);// 创建对象\n    prototype.constructor = child;\n    child.prototype = prototype\n}\n\nfunction Parent(name) {\n    this.name = name\n    this.likeSports = ['badminton', 'basketball', 'swimming']\n}\n\nParent.prototype.getName = function(){\n    return this.name\n}\n\nfunction Child(name,age){\n    Parent.call(this,name);\n    this.age = age;\n}\ninheritProtype(Child,Parent);\n\nChild.prototype.getAge = function(){\n  return this.age\n} \n\nlet person1 = new Child('Keven',13);\nlet person2 = new Child('Lucy',15);\n\nperson1.likeSports.push('shopping')\n\nconsole.log(person1.likeSports) // [\"badminton\", \"basketball\", \"swimming\", \"shopping\"]\nconsole.log(person2.likeSports) // [\"badminton\", \"basketball\", \"swimming\"]\nconsole.log(person1.name) // \"Keven\"\nconsole.log(person1.getName()) // Keven\nconsole.log(person1.getAge()) // 13\n```\n\n```js\nfunction Parent(name){\n  this.name = name\n  this.likeSports = ['badminton', 'basketball', 'swimming']\n}\nParent.prototype.getName = function(){\n  return this.name\n}\nfunction Child(name, age){\n  Parent.call(this, name)\n  this.age = age\n}\nChild.prototype = Object.create(Parent.prototype, {\n  constructor: {\n    value: Child,\n    enumerable: false,\n    configurable: true,\n    writable: true\n  }\n})\nChild.prototype.getAge = function(){\n  return this.age\n}\n\nlet person1 = new Child('Keven',13);\nlet person2 = new Child('Lucy',15);\n\nperson1.likeSports.push('shopping')\n\nconsole.log(person1.likeSports) // [\"badminton\", \"basketball\", \"swimming\", \"shopping\"]\nconsole.log(person2.likeSports) // [\"badminton\", \"basketball\", \"swimming\"]\nconsole.log(person1.name)  // Keven\nconsole.log(person1.getName()) // Keven\nconsole.log(person1.getAge()) //13\n\n```\n\n解决父类被调用两次的情况，这是最常用的方式\n\n### 5、class继承\n\n- ES6为我们提供了 class、 extends 关键字可以轻松的实现上面那种继承方式\n```js\nclass Parent {\n  constructor(name, age){\n    this.name = name\n    this.age = age\n    this.likeSports = ['badminton', 'basketball', 'swimming']\n  }\n  getName(){\n    return this.name\n  }\n  getAge(){\n    return this.age\n  }\n}\nclass Child extends Parent{\n  constructor(name, age){\n    super(name,age)\n  }\n}\n\nlet person1 = new Child('Lucy', 28)\nlet person2 = new Child('Lily', 30)\n\nperson1.likeSports.push('shopping')\n\nconsole.log(person1.likeSports) // [\"badminton\", \"basketball\", \"swimming\", \"shopping\"]\nconsole.log(person2.likeSports) // [\"badminton\", \"basketball\", \"swimming\"]\nconsole.log(person1.name) // Lucy\nconsole.log(person1.getName()) // Lucy\nconsole.log(person2.getAge()) // 30\n```","slug":"inherit","published":1,"updated":"2020-09-30T07:01:57.341Z","_id":"ckfl1j01u0006m4oldzbtax2l","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"1、原型链继承\"><a href=\"#1、原型链继承\" class=\"headerlink\" title=\"1、原型链继承\"></a>1、原型链继承</h3><ul>\n<li>原理：原型链对象变成父类的实例，子类就可以调用父类的方法和属性（利用原型让一个引用类型继承另一个引用类型的属性和方法）<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">Parent</span>(<span class=\"hljs-params\"></span>)</span>&#123; &#125;<br><br>Parent.prototype.age = <span class=\"hljs-number\">13</span><br>Parent.prototype.getName = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.name<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">Child</span>(<span class=\"hljs-params\">name</span>)</span>&#123;<br>  <span class=\"hljs-keyword\">this</span>.name = name<br>&#125;<br><br>Child.prototype = <span class=\"hljs-keyword\">new</span> Parent()<br><br><span class=\"hljs-keyword\">let</span> child = <span class=\"hljs-keyword\">new</span> Child(<span class=\"hljs-string\">'AmilyCi'</span>)<br><br><span class=\"hljs-built_in\">console</span>.log(child.age) <span class=\"hljs-comment\">// 13</span><br><span class=\"hljs-built_in\">console</span>.log(child.getName()) <span class=\"hljs-comment\">// 'AmilyCi'</span><br></code></pre></td></tr></table></figure></li>\n<li>优点：实现起来简单</li>\n<li>缺点：不能向父类传递参数，引用类型的属性会被所有实例共享</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">Parent</span>(<span class=\"hljs-params\"></span>)</span>&#123;<br>  <span class=\"hljs-keyword\">this</span>.likeSports = [<span class=\"hljs-string\">'badminton'</span>, <span class=\"hljs-string\">'basketball'</span>, <span class=\"hljs-string\">'swimming'</span>]<br>&#125;<br><br>Parent.prototype.age = <span class=\"hljs-number\">13</span><br>Parent.prototype.getName = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.name<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">Child</span>(<span class=\"hljs-params\">name</span>)</span>&#123;<br>  <span class=\"hljs-keyword\">this</span>.name = name<br>&#125;<br><br>Child.prototype = <span class=\"hljs-keyword\">new</span> Parent()<br><br><span class=\"hljs-keyword\">let</span> person1 = <span class=\"hljs-keyword\">new</span> Child(<span class=\"hljs-string\">'AmilyCx'</span>)<br><span class=\"hljs-keyword\">let</span> person2 = <span class=\"hljs-keyword\">new</span> Child(<span class=\"hljs-string\">'Json'</span>)<br><br>person1.likeSports.push(<span class=\"hljs-string\">'shopping'</span>)<br><span class=\"hljs-built_in\">console</span>.log(person1.likeSports) <span class=\"hljs-comment\">// [\"badminton\", \"basketball\", \"swimming\", \"shopping\"]</span><br><span class=\"hljs-built_in\">console</span>.log(person2.likeSports) <span class=\"hljs-comment\">// [\"badminton\", \"basketball\", \"swimming\", \"shopping\"]</span><br></code></pre></td></tr></table></figure>\n<p>你会发现，当我们给 person1 增加一个喜欢的运动时，我们打印出 person2 喜欢的运动，这时候 person2 的喜欢运动中也增加了这个运动。这个属性会被所有的实例共享。</p>\n<h3 id=\"2、构造函数继承\"><a href=\"#2、构造函数继承\" class=\"headerlink\" title=\"2、构造函数继承\"></a>2、构造函数继承</h3><ul>\n<li>原理：子类构造函数内部调用父类构造函数，并传入this<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">Parent</span>(<span class=\"hljs-params\">name</span>)</span>&#123;<br>  <span class=\"hljs-keyword\">this</span>.name = name<br>  <span class=\"hljs-keyword\">this</span>.likeSports = [<span class=\"hljs-string\">'badminton'</span>, <span class=\"hljs-string\">'basketball'</span>, <span class=\"hljs-string\">'swimming'</span>]<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">Child</span>(<span class=\"hljs-params\">name</span>)</span>&#123;<br>  Parent.call(<span class=\"hljs-keyword\">this</span>, name)<br>&#125;<br><br>Parent.prototype.getName = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.name<br>&#125;<br><br><span class=\"hljs-keyword\">let</span> person1 = <span class=\"hljs-keyword\">new</span> Child(<span class=\"hljs-string\">'Lucy'</span>)<br><span class=\"hljs-keyword\">let</span> person2 = <span class=\"hljs-keyword\">new</span> Child(<span class=\"hljs-string\">'LiLy'</span>)<br>person1.likeSports.push(<span class=\"hljs-string\">'shopping'</span>)<br><br><span class=\"hljs-built_in\">console</span>.log(person1.likeSports) <span class=\"hljs-comment\">// [\"badminton\", \"basketball\", \"swimming\", \"shopping\"]</span><br><span class=\"hljs-built_in\">console</span>.log(person2.likeSports) <span class=\"hljs-comment\">// [\"badminton\", \"basketball\", \"swimming\"]</span><br><span class=\"hljs-built_in\">console</span>.log(person1.name) <span class=\"hljs-comment\">// Lucy</span><br><span class=\"hljs-built_in\">console</span>.log(person1.getName()) <span class=\"hljs-comment\">// Uncaught TypeError: person1.getName is not a function</span><br></code></pre></td></tr></table></figure>\n这次，我们通过 call 方法，可以给父类传参啦，并且我们给 person1 增加一项喜欢的运动，person2 不会也被加上啦。<br>但是我们发现，我们创建的实例并不能调用父类的方法了，会报错，这是因为我们现在用的构造函数方式导致父类并不在子类的原型链上，所以子类无法调用父类的方法。</li>\n</ul>\n<h3 id=\"3、组合继承\"><a href=\"#3、组合继承\" class=\"headerlink\" title=\"3、组合继承\"></a>3、组合继承</h3><ul>\n<li>原理：结合了前两个方法的优点</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">Parent</span>(<span class=\"hljs-params\">name</span>)</span>&#123;<br>  <span class=\"hljs-keyword\">this</span>.name = name<br>  <span class=\"hljs-keyword\">this</span>.likeSports = [<span class=\"hljs-string\">'badminton'</span>, <span class=\"hljs-string\">'basketball'</span>, <span class=\"hljs-string\">'swimming'</span>]<br>&#125;<br><br>Parent.prototype.getName = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.name<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">Child</span>(<span class=\"hljs-params\">name, age</span>)</span>&#123;<br>  Parent.call(<span class=\"hljs-keyword\">this</span>, name)<br>  <span class=\"hljs-keyword\">this</span>.age = age<br>&#125;<br><br>Child.prototype = <span class=\"hljs-keyword\">new</span> Parent()<br>Child.prototype.constructor = Child<br>Child.prototype.getAge = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.age<br>&#125;<br><br><span class=\"hljs-keyword\">let</span> person1 = <span class=\"hljs-keyword\">new</span> Child(<span class=\"hljs-string\">'Lucy'</span>, <span class=\"hljs-number\">18</span>)<br><span class=\"hljs-keyword\">let</span> person2 = <span class=\"hljs-keyword\">new</span> Child(<span class=\"hljs-string\">'Lily'</span>, <span class=\"hljs-number\">20</span>)<br>person1.likeSports.push(<span class=\"hljs-string\">'shopping'</span>)<br><br><span class=\"hljs-built_in\">console</span>.log(person1.likeSports) <span class=\"hljs-comment\">// [\"badminton\", \"basketball\", \"swimming\", \"shopping\"]</span><br><span class=\"hljs-built_in\">console</span>.log(person2.likeSports) <span class=\"hljs-comment\">// [\"badminton\", \"basketball\", \"swimming\"]</span><br><span class=\"hljs-built_in\">console</span>.log(person1.name) <span class=\"hljs-comment\">// Lucy</span><br><span class=\"hljs-built_in\">console</span>.log(person1.getAge()) <span class=\"hljs-comment\">// 18</span><br><span class=\"hljs-built_in\">console</span>.log(person1.getName()) <span class=\"hljs-comment\">// Lucy</span><br></code></pre></td></tr></table></figure>\n<p>这样我们解决了传参的问题，引用类型的属性共享的问题，还有调用父类原型上的方法的问题都解决了。<br>但是现在还有一个不足之处，在给 Child 原型赋值的时候都会执行一次父类构造函数，所以无论什么情况下都会调用两次父类构造函数</p>\n<h3 id=\"4、寄生组合继承\"><a href=\"#4、寄生组合继承\" class=\"headerlink\" title=\"4、寄生组合继承\"></a>4、寄生组合继承</h3><ul>\n<li>原理：首先用一个空对象建立和父类的关系，再用这个空对象作为子类的原型对象</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">inheritProtype</span>(<span class=\"hljs-params\">child,parent</span>) </span>&#123;<br>    <span class=\"hljs-keyword\">var</span> prototype = <span class=\"hljs-built_in\">Object</span>.create(parent.prototype);<span class=\"hljs-comment\">// 创建对象</span><br>    prototype.constructor = child;<br>    child.prototype = prototype<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">Parent</span>(<span class=\"hljs-params\">name</span>) </span>&#123;<br>    <span class=\"hljs-keyword\">this</span>.name = name<br>    <span class=\"hljs-keyword\">this</span>.likeSports = [<span class=\"hljs-string\">'badminton'</span>, <span class=\"hljs-string\">'basketball'</span>, <span class=\"hljs-string\">'swimming'</span>]<br>&#125;<br><br>Parent.prototype.getName = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.name<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">Child</span>(<span class=\"hljs-params\">name,age</span>)</span>&#123;<br>    Parent.call(<span class=\"hljs-keyword\">this</span>,name);<br>    <span class=\"hljs-keyword\">this</span>.age = age;<br>&#125;<br>inheritProtype(Child,Parent);<br><br>Child.prototype.getAge = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.age<br>&#125; <br><br><span class=\"hljs-keyword\">let</span> person1 = <span class=\"hljs-keyword\">new</span> Child(<span class=\"hljs-string\">'Keven'</span>,<span class=\"hljs-number\">13</span>);<br><span class=\"hljs-keyword\">let</span> person2 = <span class=\"hljs-keyword\">new</span> Child(<span class=\"hljs-string\">'Lucy'</span>,<span class=\"hljs-number\">15</span>);<br><br>person1.likeSports.push(<span class=\"hljs-string\">'shopping'</span>)<br><br><span class=\"hljs-built_in\">console</span>.log(person1.likeSports) <span class=\"hljs-comment\">// [\"badminton\", \"basketball\", \"swimming\", \"shopping\"]</span><br><span class=\"hljs-built_in\">console</span>.log(person2.likeSports) <span class=\"hljs-comment\">// [\"badminton\", \"basketball\", \"swimming\"]</span><br><span class=\"hljs-built_in\">console</span>.log(person1.name) <span class=\"hljs-comment\">// \"Keven\"</span><br><span class=\"hljs-built_in\">console</span>.log(person1.getName()) <span class=\"hljs-comment\">// Keven</span><br><span class=\"hljs-built_in\">console</span>.log(person1.getAge()) <span class=\"hljs-comment\">// 13</span><br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">Parent</span>(<span class=\"hljs-params\">name</span>)</span>&#123;<br>  <span class=\"hljs-keyword\">this</span>.name = name<br>  <span class=\"hljs-keyword\">this</span>.likeSports = [<span class=\"hljs-string\">'badminton'</span>, <span class=\"hljs-string\">'basketball'</span>, <span class=\"hljs-string\">'swimming'</span>]<br>&#125;<br>Parent.prototype.getName = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.name<br>&#125;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">Child</span>(<span class=\"hljs-params\">name, age</span>)</span>&#123;<br>  Parent.call(<span class=\"hljs-keyword\">this</span>, name)<br>  <span class=\"hljs-keyword\">this</span>.age = age<br>&#125;<br>Child.prototype = <span class=\"hljs-built_in\">Object</span>.create(Parent.prototype, &#123;<br>  <span class=\"hljs-keyword\">constructor</span>: &#123;<br>    value: Child,<br>    enumerable: <span class=\"hljs-literal\">false</span>,<br>    configurable: <span class=\"hljs-literal\">true</span>,<br>    writable: <span class=\"hljs-literal\">true</span><br>  &#125;<br>&#125;)<br>Child.prototype.getAge = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.age<br>&#125;<br><br><span class=\"hljs-keyword\">let</span> person1 = <span class=\"hljs-keyword\">new</span> Child(<span class=\"hljs-string\">'Keven'</span>,<span class=\"hljs-number\">13</span>);<br><span class=\"hljs-keyword\">let</span> person2 = <span class=\"hljs-keyword\">new</span> Child(<span class=\"hljs-string\">'Lucy'</span>,<span class=\"hljs-number\">15</span>);<br><br>person1.likeSports.push(<span class=\"hljs-string\">'shopping'</span>)<br><br><span class=\"hljs-built_in\">console</span>.log(person1.likeSports) <span class=\"hljs-comment\">// [\"badminton\", \"basketball\", \"swimming\", \"shopping\"]</span><br><span class=\"hljs-built_in\">console</span>.log(person2.likeSports) <span class=\"hljs-comment\">// [\"badminton\", \"basketball\", \"swimming\"]</span><br><span class=\"hljs-built_in\">console</span>.log(person1.name)  <span class=\"hljs-comment\">// Keven</span><br><span class=\"hljs-built_in\">console</span>.log(person1.getName()) <span class=\"hljs-comment\">// Keven</span><br><span class=\"hljs-built_in\">console</span>.log(person1.getAge()) <span class=\"hljs-comment\">//13</span><br></code></pre></td></tr></table></figure>\n\n<p>解决父类被调用两次的情况，这是最常用的方式</p>\n<h3 id=\"5、class继承\"><a href=\"#5、class继承\" class=\"headerlink\" title=\"5、class继承\"></a>5、class继承</h3><ul>\n<li>ES6为我们提供了 class、 extends 关键字可以轻松的实现上面那种继承方式<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Parent</span> </span>&#123;<br>  <span class=\"hljs-keyword\">constructor</span>(name, age)&#123;<br>    <span class=\"hljs-keyword\">this</span>.name = name<br>    <span class=\"hljs-keyword\">this</span>.age = age<br>    <span class=\"hljs-keyword\">this</span>.likeSports = [<span class=\"hljs-string\">'badminton'</span>, <span class=\"hljs-string\">'basketball'</span>, <span class=\"hljs-string\">'swimming'</span>]<br>  &#125;<br>  getName()&#123;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.name<br>  &#125;<br>  getAge()&#123;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.age<br>  &#125;<br>&#125;<br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Child</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">Parent</span></span>&#123;<br>  <span class=\"hljs-keyword\">constructor</span>(name, age)&#123;<br>    <span class=\"hljs-keyword\">super</span>(name,age)<br>  &#125;<br>&#125;<br><br><span class=\"hljs-keyword\">let</span> person1 = <span class=\"hljs-keyword\">new</span> Child(<span class=\"hljs-string\">'Lucy'</span>, <span class=\"hljs-number\">28</span>)<br><span class=\"hljs-keyword\">let</span> person2 = <span class=\"hljs-keyword\">new</span> Child(<span class=\"hljs-string\">'Lily'</span>, <span class=\"hljs-number\">30</span>)<br><br>person1.likeSports.push(<span class=\"hljs-string\">'shopping'</span>)<br><br><span class=\"hljs-built_in\">console</span>.log(person1.likeSports) <span class=\"hljs-comment\">// [\"badminton\", \"basketball\", \"swimming\", \"shopping\"]</span><br><span class=\"hljs-built_in\">console</span>.log(person2.likeSports) <span class=\"hljs-comment\">// [\"badminton\", \"basketball\", \"swimming\"]</span><br><span class=\"hljs-built_in\">console</span>.log(person1.name) <span class=\"hljs-comment\">// Lucy</span><br><span class=\"hljs-built_in\">console</span>.log(person1.getName()) <span class=\"hljs-comment\">// Lucy</span><br><span class=\"hljs-built_in\">console</span>.log(person2.getAge()) <span class=\"hljs-comment\">// 30</span><br></code></pre></td></tr></table></figure></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"1、原型链继承\"><a href=\"#1、原型链继承\" class=\"headerlink\" title=\"1、原型链继承\"></a>1、原型链继承</h3><ul>\n<li>原理：原型链对象变成父类的实例，子类就可以调用父类的方法和属性（利用原型让一个引用类型继承另一个引用类型的属性和方法）<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">Parent</span>(<span class=\"hljs-params\"></span>)</span>&#123; &#125;<br><br>Parent.prototype.age = <span class=\"hljs-number\">13</span><br>Parent.prototype.getName = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.name<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">Child</span>(<span class=\"hljs-params\">name</span>)</span>&#123;<br>  <span class=\"hljs-keyword\">this</span>.name = name<br>&#125;<br><br>Child.prototype = <span class=\"hljs-keyword\">new</span> Parent()<br><br><span class=\"hljs-keyword\">let</span> child = <span class=\"hljs-keyword\">new</span> Child(<span class=\"hljs-string\">'AmilyCi'</span>)<br><br><span class=\"hljs-built_in\">console</span>.log(child.age) <span class=\"hljs-comment\">// 13</span><br><span class=\"hljs-built_in\">console</span>.log(child.getName()) <span class=\"hljs-comment\">// 'AmilyCi'</span><br></code></pre></td></tr></table></figure></li>\n<li>优点：实现起来简单</li>\n<li>缺点：不能向父类传递参数，引用类型的属性会被所有实例共享</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">Parent</span>(<span class=\"hljs-params\"></span>)</span>&#123;<br>  <span class=\"hljs-keyword\">this</span>.likeSports = [<span class=\"hljs-string\">'badminton'</span>, <span class=\"hljs-string\">'basketball'</span>, <span class=\"hljs-string\">'swimming'</span>]<br>&#125;<br><br>Parent.prototype.age = <span class=\"hljs-number\">13</span><br>Parent.prototype.getName = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.name<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">Child</span>(<span class=\"hljs-params\">name</span>)</span>&#123;<br>  <span class=\"hljs-keyword\">this</span>.name = name<br>&#125;<br><br>Child.prototype = <span class=\"hljs-keyword\">new</span> Parent()<br><br><span class=\"hljs-keyword\">let</span> person1 = <span class=\"hljs-keyword\">new</span> Child(<span class=\"hljs-string\">'AmilyCx'</span>)<br><span class=\"hljs-keyword\">let</span> person2 = <span class=\"hljs-keyword\">new</span> Child(<span class=\"hljs-string\">'Json'</span>)<br><br>person1.likeSports.push(<span class=\"hljs-string\">'shopping'</span>)<br><span class=\"hljs-built_in\">console</span>.log(person1.likeSports) <span class=\"hljs-comment\">// [\"badminton\", \"basketball\", \"swimming\", \"shopping\"]</span><br><span class=\"hljs-built_in\">console</span>.log(person2.likeSports) <span class=\"hljs-comment\">// [\"badminton\", \"basketball\", \"swimming\", \"shopping\"]</span><br></code></pre></td></tr></table></figure>\n<p>你会发现，当我们给 person1 增加一个喜欢的运动时，我们打印出 person2 喜欢的运动，这时候 person2 的喜欢运动中也增加了这个运动。这个属性会被所有的实例共享。</p>\n<h3 id=\"2、构造函数继承\"><a href=\"#2、构造函数继承\" class=\"headerlink\" title=\"2、构造函数继承\"></a>2、构造函数继承</h3><ul>\n<li>原理：子类构造函数内部调用父类构造函数，并传入this<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">Parent</span>(<span class=\"hljs-params\">name</span>)</span>&#123;<br>  <span class=\"hljs-keyword\">this</span>.name = name<br>  <span class=\"hljs-keyword\">this</span>.likeSports = [<span class=\"hljs-string\">'badminton'</span>, <span class=\"hljs-string\">'basketball'</span>, <span class=\"hljs-string\">'swimming'</span>]<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">Child</span>(<span class=\"hljs-params\">name</span>)</span>&#123;<br>  Parent.call(<span class=\"hljs-keyword\">this</span>, name)<br>&#125;<br><br>Parent.prototype.getName = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.name<br>&#125;<br><br><span class=\"hljs-keyword\">let</span> person1 = <span class=\"hljs-keyword\">new</span> Child(<span class=\"hljs-string\">'Lucy'</span>)<br><span class=\"hljs-keyword\">let</span> person2 = <span class=\"hljs-keyword\">new</span> Child(<span class=\"hljs-string\">'LiLy'</span>)<br>person1.likeSports.push(<span class=\"hljs-string\">'shopping'</span>)<br><br><span class=\"hljs-built_in\">console</span>.log(person1.likeSports) <span class=\"hljs-comment\">// [\"badminton\", \"basketball\", \"swimming\", \"shopping\"]</span><br><span class=\"hljs-built_in\">console</span>.log(person2.likeSports) <span class=\"hljs-comment\">// [\"badminton\", \"basketball\", \"swimming\"]</span><br><span class=\"hljs-built_in\">console</span>.log(person1.name) <span class=\"hljs-comment\">// Lucy</span><br><span class=\"hljs-built_in\">console</span>.log(person1.getName()) <span class=\"hljs-comment\">// Uncaught TypeError: person1.getName is not a function</span><br></code></pre></td></tr></table></figure>\n这次，我们通过 call 方法，可以给父类传参啦，并且我们给 person1 增加一项喜欢的运动，person2 不会也被加上啦。<br>但是我们发现，我们创建的实例并不能调用父类的方法了，会报错，这是因为我们现在用的构造函数方式导致父类并不在子类的原型链上，所以子类无法调用父类的方法。</li>\n</ul>\n<h3 id=\"3、组合继承\"><a href=\"#3、组合继承\" class=\"headerlink\" title=\"3、组合继承\"></a>3、组合继承</h3><ul>\n<li>原理：结合了前两个方法的优点</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">Parent</span>(<span class=\"hljs-params\">name</span>)</span>&#123;<br>  <span class=\"hljs-keyword\">this</span>.name = name<br>  <span class=\"hljs-keyword\">this</span>.likeSports = [<span class=\"hljs-string\">'badminton'</span>, <span class=\"hljs-string\">'basketball'</span>, <span class=\"hljs-string\">'swimming'</span>]<br>&#125;<br><br>Parent.prototype.getName = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.name<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">Child</span>(<span class=\"hljs-params\">name, age</span>)</span>&#123;<br>  Parent.call(<span class=\"hljs-keyword\">this</span>, name)<br>  <span class=\"hljs-keyword\">this</span>.age = age<br>&#125;<br><br>Child.prototype = <span class=\"hljs-keyword\">new</span> Parent()<br>Child.prototype.constructor = Child<br>Child.prototype.getAge = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.age<br>&#125;<br><br><span class=\"hljs-keyword\">let</span> person1 = <span class=\"hljs-keyword\">new</span> Child(<span class=\"hljs-string\">'Lucy'</span>, <span class=\"hljs-number\">18</span>)<br><span class=\"hljs-keyword\">let</span> person2 = <span class=\"hljs-keyword\">new</span> Child(<span class=\"hljs-string\">'Lily'</span>, <span class=\"hljs-number\">20</span>)<br>person1.likeSports.push(<span class=\"hljs-string\">'shopping'</span>)<br><br><span class=\"hljs-built_in\">console</span>.log(person1.likeSports) <span class=\"hljs-comment\">// [\"badminton\", \"basketball\", \"swimming\", \"shopping\"]</span><br><span class=\"hljs-built_in\">console</span>.log(person2.likeSports) <span class=\"hljs-comment\">// [\"badminton\", \"basketball\", \"swimming\"]</span><br><span class=\"hljs-built_in\">console</span>.log(person1.name) <span class=\"hljs-comment\">// Lucy</span><br><span class=\"hljs-built_in\">console</span>.log(person1.getAge()) <span class=\"hljs-comment\">// 18</span><br><span class=\"hljs-built_in\">console</span>.log(person1.getName()) <span class=\"hljs-comment\">// Lucy</span><br></code></pre></td></tr></table></figure>\n<p>这样我们解决了传参的问题，引用类型的属性共享的问题，还有调用父类原型上的方法的问题都解决了。<br>但是现在还有一个不足之处，在给 Child 原型赋值的时候都会执行一次父类构造函数，所以无论什么情况下都会调用两次父类构造函数</p>\n<h3 id=\"4、寄生组合继承\"><a href=\"#4、寄生组合继承\" class=\"headerlink\" title=\"4、寄生组合继承\"></a>4、寄生组合继承</h3><ul>\n<li>原理：首先用一个空对象建立和父类的关系，再用这个空对象作为子类的原型对象</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">inheritProtype</span>(<span class=\"hljs-params\">child,parent</span>) </span>&#123;<br>    <span class=\"hljs-keyword\">var</span> prototype = <span class=\"hljs-built_in\">Object</span>.create(parent.prototype);<span class=\"hljs-comment\">// 创建对象</span><br>    prototype.constructor = child;<br>    child.prototype = prototype<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">Parent</span>(<span class=\"hljs-params\">name</span>) </span>&#123;<br>    <span class=\"hljs-keyword\">this</span>.name = name<br>    <span class=\"hljs-keyword\">this</span>.likeSports = [<span class=\"hljs-string\">'badminton'</span>, <span class=\"hljs-string\">'basketball'</span>, <span class=\"hljs-string\">'swimming'</span>]<br>&#125;<br><br>Parent.prototype.getName = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.name<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">Child</span>(<span class=\"hljs-params\">name,age</span>)</span>&#123;<br>    Parent.call(<span class=\"hljs-keyword\">this</span>,name);<br>    <span class=\"hljs-keyword\">this</span>.age = age;<br>&#125;<br>inheritProtype(Child,Parent);<br><br>Child.prototype.getAge = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.age<br>&#125; <br><br><span class=\"hljs-keyword\">let</span> person1 = <span class=\"hljs-keyword\">new</span> Child(<span class=\"hljs-string\">'Keven'</span>,<span class=\"hljs-number\">13</span>);<br><span class=\"hljs-keyword\">let</span> person2 = <span class=\"hljs-keyword\">new</span> Child(<span class=\"hljs-string\">'Lucy'</span>,<span class=\"hljs-number\">15</span>);<br><br>person1.likeSports.push(<span class=\"hljs-string\">'shopping'</span>)<br><br><span class=\"hljs-built_in\">console</span>.log(person1.likeSports) <span class=\"hljs-comment\">// [\"badminton\", \"basketball\", \"swimming\", \"shopping\"]</span><br><span class=\"hljs-built_in\">console</span>.log(person2.likeSports) <span class=\"hljs-comment\">// [\"badminton\", \"basketball\", \"swimming\"]</span><br><span class=\"hljs-built_in\">console</span>.log(person1.name) <span class=\"hljs-comment\">// \"Keven\"</span><br><span class=\"hljs-built_in\">console</span>.log(person1.getName()) <span class=\"hljs-comment\">// Keven</span><br><span class=\"hljs-built_in\">console</span>.log(person1.getAge()) <span class=\"hljs-comment\">// 13</span><br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">Parent</span>(<span class=\"hljs-params\">name</span>)</span>&#123;<br>  <span class=\"hljs-keyword\">this</span>.name = name<br>  <span class=\"hljs-keyword\">this</span>.likeSports = [<span class=\"hljs-string\">'badminton'</span>, <span class=\"hljs-string\">'basketball'</span>, <span class=\"hljs-string\">'swimming'</span>]<br>&#125;<br>Parent.prototype.getName = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.name<br>&#125;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">Child</span>(<span class=\"hljs-params\">name, age</span>)</span>&#123;<br>  Parent.call(<span class=\"hljs-keyword\">this</span>, name)<br>  <span class=\"hljs-keyword\">this</span>.age = age<br>&#125;<br>Child.prototype = <span class=\"hljs-built_in\">Object</span>.create(Parent.prototype, &#123;<br>  <span class=\"hljs-keyword\">constructor</span>: &#123;<br>    value: Child,<br>    enumerable: <span class=\"hljs-literal\">false</span>,<br>    configurable: <span class=\"hljs-literal\">true</span>,<br>    writable: <span class=\"hljs-literal\">true</span><br>  &#125;<br>&#125;)<br>Child.prototype.getAge = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.age<br>&#125;<br><br><span class=\"hljs-keyword\">let</span> person1 = <span class=\"hljs-keyword\">new</span> Child(<span class=\"hljs-string\">'Keven'</span>,<span class=\"hljs-number\">13</span>);<br><span class=\"hljs-keyword\">let</span> person2 = <span class=\"hljs-keyword\">new</span> Child(<span class=\"hljs-string\">'Lucy'</span>,<span class=\"hljs-number\">15</span>);<br><br>person1.likeSports.push(<span class=\"hljs-string\">'shopping'</span>)<br><br><span class=\"hljs-built_in\">console</span>.log(person1.likeSports) <span class=\"hljs-comment\">// [\"badminton\", \"basketball\", \"swimming\", \"shopping\"]</span><br><span class=\"hljs-built_in\">console</span>.log(person2.likeSports) <span class=\"hljs-comment\">// [\"badminton\", \"basketball\", \"swimming\"]</span><br><span class=\"hljs-built_in\">console</span>.log(person1.name)  <span class=\"hljs-comment\">// Keven</span><br><span class=\"hljs-built_in\">console</span>.log(person1.getName()) <span class=\"hljs-comment\">// Keven</span><br><span class=\"hljs-built_in\">console</span>.log(person1.getAge()) <span class=\"hljs-comment\">//13</span><br></code></pre></td></tr></table></figure>\n\n<p>解决父类被调用两次的情况，这是最常用的方式</p>\n<h3 id=\"5、class继承\"><a href=\"#5、class继承\" class=\"headerlink\" title=\"5、class继承\"></a>5、class继承</h3><ul>\n<li>ES6为我们提供了 class、 extends 关键字可以轻松的实现上面那种继承方式<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Parent</span> </span>&#123;<br>  <span class=\"hljs-keyword\">constructor</span>(name, age)&#123;<br>    <span class=\"hljs-keyword\">this</span>.name = name<br>    <span class=\"hljs-keyword\">this</span>.age = age<br>    <span class=\"hljs-keyword\">this</span>.likeSports = [<span class=\"hljs-string\">'badminton'</span>, <span class=\"hljs-string\">'basketball'</span>, <span class=\"hljs-string\">'swimming'</span>]<br>  &#125;<br>  getName()&#123;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.name<br>  &#125;<br>  getAge()&#123;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.age<br>  &#125;<br>&#125;<br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Child</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">Parent</span></span>&#123;<br>  <span class=\"hljs-keyword\">constructor</span>(name, age)&#123;<br>    <span class=\"hljs-keyword\">super</span>(name,age)<br>  &#125;<br>&#125;<br><br><span class=\"hljs-keyword\">let</span> person1 = <span class=\"hljs-keyword\">new</span> Child(<span class=\"hljs-string\">'Lucy'</span>, <span class=\"hljs-number\">28</span>)<br><span class=\"hljs-keyword\">let</span> person2 = <span class=\"hljs-keyword\">new</span> Child(<span class=\"hljs-string\">'Lily'</span>, <span class=\"hljs-number\">30</span>)<br><br>person1.likeSports.push(<span class=\"hljs-string\">'shopping'</span>)<br><br><span class=\"hljs-built_in\">console</span>.log(person1.likeSports) <span class=\"hljs-comment\">// [\"badminton\", \"basketball\", \"swimming\", \"shopping\"]</span><br><span class=\"hljs-built_in\">console</span>.log(person2.likeSports) <span class=\"hljs-comment\">// [\"badminton\", \"basketball\", \"swimming\"]</span><br><span class=\"hljs-built_in\">console</span>.log(person1.name) <span class=\"hljs-comment\">// Lucy</span><br><span class=\"hljs-built_in\">console</span>.log(person1.getName()) <span class=\"hljs-comment\">// Lucy</span><br><span class=\"hljs-built_in\">console</span>.log(person2.getAge()) <span class=\"hljs-comment\">// 30</span><br></code></pre></td></tr></table></figure></li>\n</ul>\n"},{"title":"原型和原型链","date":"2020-05-23T04:23:45.000Z","_content":"### 原型\n- 每一个函数数据类型（普通函数、类）都有一个天生自带的属性：prototype（原型），并且这个属性是一个对象数据类型的值；并且在 prototype 上浏览器天生给它加了一个属性 constructor（构造函数），属性值是当前函数（类）本身；每一个对象数据类型（普通的对象、实例、prototype...）也天生自带一个属性：```__proto__```,属性值是当前实例所属类的原型（prototype）。\n\n- Object 是 JS 中所有对象数据类型的基类（最顶层的类），在 Object.prototype 上```__proto__```这个属性为空，会返回 null。\n\n### 原型链\n- 通过 对象名.属性名 的方式获取属性值的时候，首先在对象的私有属性上进行查找，如果私有中存在这个属性，则获取的是私有的属性值；如果私有的没有，则通过```__proto__```找到所属类的原型（类的原型上定义的属性和方法都是当前实例公有的属性和方法），原型上存在的话，获取的是公有属性值；如果原型上也没有，则继续通过原型上的```__proto__```继续向上查找，一直找到 Object.prototype 为止...，这种查找机制就是我们的“原型链模式”。\n\n- 在IE浏览器中，我们的原型模式也是同样的原理，但是IE浏览器怕你通过```__proto__```把公有的修改，禁止我们使用```__proto__```。","source":"_posts/prototype.md","raw":"---\ntitle: 原型和原型链\ndate: 2020-05-23 12:23:45\ntags: JS\ncategories:\n- JS基础\n---\n### 原型\n- 每一个函数数据类型（普通函数、类）都有一个天生自带的属性：prototype（原型），并且这个属性是一个对象数据类型的值；并且在 prototype 上浏览器天生给它加了一个属性 constructor（构造函数），属性值是当前函数（类）本身；每一个对象数据类型（普通的对象、实例、prototype...）也天生自带一个属性：```__proto__```,属性值是当前实例所属类的原型（prototype）。\n\n- Object 是 JS 中所有对象数据类型的基类（最顶层的类），在 Object.prototype 上```__proto__```这个属性为空，会返回 null。\n\n### 原型链\n- 通过 对象名.属性名 的方式获取属性值的时候，首先在对象的私有属性上进行查找，如果私有中存在这个属性，则获取的是私有的属性值；如果私有的没有，则通过```__proto__```找到所属类的原型（类的原型上定义的属性和方法都是当前实例公有的属性和方法），原型上存在的话，获取的是公有属性值；如果原型上也没有，则继续通过原型上的```__proto__```继续向上查找，一直找到 Object.prototype 为止...，这种查找机制就是我们的“原型链模式”。\n\n- 在IE浏览器中，我们的原型模式也是同样的原理，但是IE浏览器怕你通过```__proto__```把公有的修改，禁止我们使用```__proto__```。","slug":"prototype","published":1,"updated":"2020-05-23T05:00:46.922Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckfl1j01w000am4ol500whkdv","content":"<h3 id=\"原型\"><a href=\"#原型\" class=\"headerlink\" title=\"原型\"></a>原型</h3><ul>\n<li><p>每一个函数数据类型（普通函数、类）都有一个天生自带的属性：prototype（原型），并且这个属性是一个对象数据类型的值；并且在 prototype 上浏览器天生给它加了一个属性 constructor（构造函数），属性值是当前函数（类）本身；每一个对象数据类型（普通的对象、实例、prototype…）也天生自带一个属性：<code>__proto__</code>,属性值是当前实例所属类的原型（prototype）。</p>\n</li>\n<li><p>Object 是 JS 中所有对象数据类型的基类（最顶层的类），在 Object.prototype 上<code>__proto__</code>这个属性为空，会返回 null。</p>\n</li>\n</ul>\n<h3 id=\"原型链\"><a href=\"#原型链\" class=\"headerlink\" title=\"原型链\"></a>原型链</h3><ul>\n<li><p>通过 对象名.属性名 的方式获取属性值的时候，首先在对象的私有属性上进行查找，如果私有中存在这个属性，则获取的是私有的属性值；如果私有的没有，则通过<code>__proto__</code>找到所属类的原型（类的原型上定义的属性和方法都是当前实例公有的属性和方法），原型上存在的话，获取的是公有属性值；如果原型上也没有，则继续通过原型上的<code>__proto__</code>继续向上查找，一直找到 Object.prototype 为止…，这种查找机制就是我们的“原型链模式”。</p>\n</li>\n<li><p>在IE浏览器中，我们的原型模式也是同样的原理，但是IE浏览器怕你通过<code>__proto__</code>把公有的修改，禁止我们使用<code>__proto__</code>。</p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"原型\"><a href=\"#原型\" class=\"headerlink\" title=\"原型\"></a>原型</h3><ul>\n<li><p>每一个函数数据类型（普通函数、类）都有一个天生自带的属性：prototype（原型），并且这个属性是一个对象数据类型的值；并且在 prototype 上浏览器天生给它加了一个属性 constructor（构造函数），属性值是当前函数（类）本身；每一个对象数据类型（普通的对象、实例、prototype…）也天生自带一个属性：<code>__proto__</code>,属性值是当前实例所属类的原型（prototype）。</p>\n</li>\n<li><p>Object 是 JS 中所有对象数据类型的基类（最顶层的类），在 Object.prototype 上<code>__proto__</code>这个属性为空，会返回 null。</p>\n</li>\n</ul>\n<h3 id=\"原型链\"><a href=\"#原型链\" class=\"headerlink\" title=\"原型链\"></a>原型链</h3><ul>\n<li><p>通过 对象名.属性名 的方式获取属性值的时候，首先在对象的私有属性上进行查找，如果私有中存在这个属性，则获取的是私有的属性值；如果私有的没有，则通过<code>__proto__</code>找到所属类的原型（类的原型上定义的属性和方法都是当前实例公有的属性和方法），原型上存在的话，获取的是公有属性值；如果原型上也没有，则继续通过原型上的<code>__proto__</code>继续向上查找，一直找到 Object.prototype 为止…，这种查找机制就是我们的“原型链模式”。</p>\n</li>\n<li><p>在IE浏览器中，我们的原型模式也是同样的原理，但是IE浏览器怕你通过<code>__proto__</code>把公有的修改，禁止我们使用<code>__proto__</code>。</p>\n</li>\n</ul>\n"},{"title":"浏览器渲染整个页面的过程","date":"2020-05-23T06:46:39.000Z","_content":"&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;首先在地址栏中输入 url 地址，浏览器先查找自己本地的 DNS 记录找到对应的 IP 地址，如果本地没有找到就去 DNS服务器上查找，获取 IP 地址后开始建立 TCP 连接遵循三次握手就可以获取数据，浏览器开始解析 Html 构建 DOM 树，并行请求 css/image/js，CSS 文件下载完成，开始构建 CSS 树，CSS 树构建完成后和 DOM 树一起生成渲染树，计算出每个节点在屏幕中的位置，通过显卡把页面画到屏幕上。","source":"_posts/render.md","raw":"---\ntitle: 浏览器渲染整个页面的过程\ndate: 2020-05-23 14:46:39\ntags: JS\ncategories:\n- JS基础\n---\n&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;首先在地址栏中输入 url 地址，浏览器先查找自己本地的 DNS 记录找到对应的 IP 地址，如果本地没有找到就去 DNS服务器上查找，获取 IP 地址后开始建立 TCP 连接遵循三次握手就可以获取数据，浏览器开始解析 Html 构建 DOM 树，并行请求 css/image/js，CSS 文件下载完成，开始构建 CSS 树，CSS 树构建完成后和 DOM 树一起生成渲染树，计算出每个节点在屏幕中的位置，通过显卡把页面画到屏幕上。","slug":"render","published":1,"updated":"2020-05-23T07:01:11.264Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckfl1j01x000bm4ol9c5demco","content":"<p>&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;首先在地址栏中输入 url 地址，浏览器先查找自己本地的 DNS 记录找到对应的 IP 地址，如果本地没有找到就去 DNS服务器上查找，获取 IP 地址后开始建立 TCP 连接遵循三次握手就可以获取数据，浏览器开始解析 Html 构建 DOM 树，并行请求 css/image/js，CSS 文件下载完成，开始构建 CSS 树，CSS 树构建完成后和 DOM 树一起生成渲染树，计算出每个节点在屏幕中的位置，通过显卡把页面画到屏幕上。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;首先在地址栏中输入 url 地址，浏览器先查找自己本地的 DNS 记录找到对应的 IP 地址，如果本地没有找到就去 DNS服务器上查找，获取 IP 地址后开始建立 TCP 连接遵循三次握手就可以获取数据，浏览器开始解析 Html 构建 DOM 树，并行请求 css/image/js，CSS 文件下载完成，开始构建 CSS 树，CSS 树构建完成后和 DOM 树一起生成渲染树，计算出每个节点在屏幕中的位置，通过显卡把页面画到屏幕上。</p>\n"},{"title":"HTTP状态码","date":"2020-05-20T14:23:32.000Z","_content":"&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;状态码的职责是当客户端向服务器端发送请求时，描述返回的请求结果。\n- 2XX 成功\n  - 200 OK：表示从客户端发来的请求在服务器端被正常处理了。\n  - 204 No Content：表示服务器接收的请求已成功处理，但在返回的响应报文中 不含实体的主体部分。另外，也不允许返回任何实体的主体。\n  - 206 Partial Content：表示客户端进行了范围请求，而服务器成功执行了这部分的 GET 请求。\n- 3XX 重定向\n  - 301 Moved Permanently：永久性重定向。表示请求的资源已被分配了新的 URI，以后 应使用资源现在所指的 URI。\n  - 302 Found：临时性重定向。表示请求的资源已被分配了新的 URI，希望 用户(本次)能使用新的 URI 访问。\n  - 303 See Other：表示由于请求对应的资源存在着另一个 URI，应使用 GET 方法定向获取请求的资源。\n  - 304 Not Modified：表示客户端发送附带条件的请求时，服务器端允许请求访 问资源，但未满足条件的情况。\n  - 307 Temporary Redirect：临时重定向。该状态码与 302 Found 有着相同的含义。\n- 4XX 客户端错误\n  - 400 Bad Request：表示请求报文中存在语法错误。\n  - 401 Unauthorized：表示发送的请求需要有通过 HTTP 认证(BASIC 认证、 DIGEST 认证)的认证信息。另外若之前已进行过 1 次请求，则表示 用 户认证失败。\n  - 403 Forbidden：表示对请求资源的访问被服务器拒绝了。\n  - 404 Not Found：表示服务器上无法找到请求的资源。\n- 5XX 服务器错误\n  - 500 Internal Server Error：表示服务器端在执行请求时发生了错误。\n  - 503 Service Unavailable：表示服务器暂时处于超负载或正在进行停机维护，现在无法 处理请求。","source":"_posts/statusCode.md","raw":"---\ntitle: HTTP状态码\ndate: 2020-05-20 22:23:32\ntags: http\ncategories:\n- 网络基础\n---\n&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;状态码的职责是当客户端向服务器端发送请求时，描述返回的请求结果。\n- 2XX 成功\n  - 200 OK：表示从客户端发来的请求在服务器端被正常处理了。\n  - 204 No Content：表示服务器接收的请求已成功处理，但在返回的响应报文中 不含实体的主体部分。另外，也不允许返回任何实体的主体。\n  - 206 Partial Content：表示客户端进行了范围请求，而服务器成功执行了这部分的 GET 请求。\n- 3XX 重定向\n  - 301 Moved Permanently：永久性重定向。表示请求的资源已被分配了新的 URI，以后 应使用资源现在所指的 URI。\n  - 302 Found：临时性重定向。表示请求的资源已被分配了新的 URI，希望 用户(本次)能使用新的 URI 访问。\n  - 303 See Other：表示由于请求对应的资源存在着另一个 URI，应使用 GET 方法定向获取请求的资源。\n  - 304 Not Modified：表示客户端发送附带条件的请求时，服务器端允许请求访 问资源，但未满足条件的情况。\n  - 307 Temporary Redirect：临时重定向。该状态码与 302 Found 有着相同的含义。\n- 4XX 客户端错误\n  - 400 Bad Request：表示请求报文中存在语法错误。\n  - 401 Unauthorized：表示发送的请求需要有通过 HTTP 认证(BASIC 认证、 DIGEST 认证)的认证信息。另外若之前已进行过 1 次请求，则表示 用 户认证失败。\n  - 403 Forbidden：表示对请求资源的访问被服务器拒绝了。\n  - 404 Not Found：表示服务器上无法找到请求的资源。\n- 5XX 服务器错误\n  - 500 Internal Server Error：表示服务器端在执行请求时发生了错误。\n  - 503 Service Unavailable：表示服务器暂时处于超负载或正在进行停机维护，现在无法 处理请求。","slug":"statusCode","published":1,"updated":"2020-05-20T15:47:29.425Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckfl1j02o000sm4olhdyqad3t","content":"<p>&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;状态码的职责是当客户端向服务器端发送请求时，描述返回的请求结果。</p>\n<ul>\n<li>2XX 成功<ul>\n<li>200 OK：表示从客户端发来的请求在服务器端被正常处理了。</li>\n<li>204 No Content：表示服务器接收的请求已成功处理，但在返回的响应报文中 不含实体的主体部分。另外，也不允许返回任何实体的主体。</li>\n<li>206 Partial Content：表示客户端进行了范围请求，而服务器成功执行了这部分的 GET 请求。</li>\n</ul>\n</li>\n<li>3XX 重定向<ul>\n<li>301 Moved Permanently：永久性重定向。表示请求的资源已被分配了新的 URI，以后 应使用资源现在所指的 URI。</li>\n<li>302 Found：临时性重定向。表示请求的资源已被分配了新的 URI，希望 用户(本次)能使用新的 URI 访问。</li>\n<li>303 See Other：表示由于请求对应的资源存在着另一个 URI，应使用 GET 方法定向获取请求的资源。</li>\n<li>304 Not Modified：表示客户端发送附带条件的请求时，服务器端允许请求访 问资源，但未满足条件的情况。</li>\n<li>307 Temporary Redirect：临时重定向。该状态码与 302 Found 有着相同的含义。</li>\n</ul>\n</li>\n<li>4XX 客户端错误<ul>\n<li>400 Bad Request：表示请求报文中存在语法错误。</li>\n<li>401 Unauthorized：表示发送的请求需要有通过 HTTP 认证(BASIC 认证、 DIGEST 认证)的认证信息。另外若之前已进行过 1 次请求，则表示 用 户认证失败。</li>\n<li>403 Forbidden：表示对请求资源的访问被服务器拒绝了。</li>\n<li>404 Not Found：表示服务器上无法找到请求的资源。</li>\n</ul>\n</li>\n<li>5XX 服务器错误<ul>\n<li>500 Internal Server Error：表示服务器端在执行请求时发生了错误。</li>\n<li>503 Service Unavailable：表示服务器暂时处于超负载或正在进行停机维护，现在无法 处理请求。</li>\n</ul>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;状态码的职责是当客户端向服务器端发送请求时，描述返回的请求结果。</p>\n<ul>\n<li>2XX 成功<ul>\n<li>200 OK：表示从客户端发来的请求在服务器端被正常处理了。</li>\n<li>204 No Content：表示服务器接收的请求已成功处理，但在返回的响应报文中 不含实体的主体部分。另外，也不允许返回任何实体的主体。</li>\n<li>206 Partial Content：表示客户端进行了范围请求，而服务器成功执行了这部分的 GET 请求。</li>\n</ul>\n</li>\n<li>3XX 重定向<ul>\n<li>301 Moved Permanently：永久性重定向。表示请求的资源已被分配了新的 URI，以后 应使用资源现在所指的 URI。</li>\n<li>302 Found：临时性重定向。表示请求的资源已被分配了新的 URI，希望 用户(本次)能使用新的 URI 访问。</li>\n<li>303 See Other：表示由于请求对应的资源存在着另一个 URI，应使用 GET 方法定向获取请求的资源。</li>\n<li>304 Not Modified：表示客户端发送附带条件的请求时，服务器端允许请求访 问资源，但未满足条件的情况。</li>\n<li>307 Temporary Redirect：临时重定向。该状态码与 302 Found 有着相同的含义。</li>\n</ul>\n</li>\n<li>4XX 客户端错误<ul>\n<li>400 Bad Request：表示请求报文中存在语法错误。</li>\n<li>401 Unauthorized：表示发送的请求需要有通过 HTTP 认证(BASIC 认证、 DIGEST 认证)的认证信息。另外若之前已进行过 1 次请求，则表示 用 户认证失败。</li>\n<li>403 Forbidden：表示对请求资源的访问被服务器拒绝了。</li>\n<li>404 Not Found：表示服务器上无法找到请求的资源。</li>\n</ul>\n</li>\n<li>5XX 服务器错误<ul>\n<li>500 Internal Server Error：表示服务器端在执行请求时发生了错误。</li>\n<li>503 Service Unavailable：表示服务器暂时处于超负载或正在进行停机维护，现在无法 处理请求。</li>\n</ul>\n</li>\n</ul>\n"},{"title":"this","date":"2020-05-23T07:10:53.000Z","_content":"- 在构造函数中，this 指向 new 出来的实例本身。\n\n```js\nfunction Person(name, age){\n  this.name = name\n  this.age = age\n  console.log('this:', this)\n}\nconst person = new Person('Lucy', 18) \n// this: Person {name: \"Lucy\", age: 18}\n```\n\n- 在事件中，this 指向触发这个事件的对象。\n\n```html\n<button id=\"btn\">按钮</button>\n```\n```js\nlet oBtn = document.getElementById('btn')\noBtn.onclick = function(){\n  console.log(this)  // btn\n}\n```\n\n- this 指向函数的直接调用者。\n\n```js\nfunction getName(name){\n  this.name = name\n  return function(){\n    return this.name\n  }\n}\n\ngetName('AmilyCi')() // \"AmilyCi\"\n```\n \n- 自执行函数中的 this 永远都是 window。\n\n```js\n(function(){\n  console.log(this)\n})()   // window\n```\n- 函数执行，首先看函数前面是否有\".\"，有的话，\".\"前面是谁 this 就是谁，没有的话，this 就是 window。\n\n```js\nlet user = {\n  firstName: 'John',\n  lastName: 'Dave',\n  getFullName(){\n    return this.firstName + ' ' + this.lastName\n  }\n}\nuser.getFullName() // \"John Dave\"\n```\n\n- 箭头函数中的 this 取决于包裹箭头函数的第一个普通函数 this。\n\n```js\nfunction getName(name){\n  this.name = name\n  return () => {\n    return () => {\n      console.log(this.name)\n    }\n  }\n}\ngetName('AmilyCi')()() // AmilyCi\n```\n\n- 对于像 call,apply,bind 这种可以改变 this 指向的函数，this 取决于第一个参数，第一个参数为空的话，那么 this 就是 window。\n\n```js\nlet user = {\n  firstName: 'John',\n  lastName: 'Smith'\n}\nfunction getFullName(){\n  return this.firstName + ' ' + this.lastName\n}\ngetFullName.call(user) // \"John Smith\"\n```","source":"_posts/this.md","raw":"---\ntitle: this\ndate: 2020-05-23 15:10:53\ntags: JS\ncategories:\n- JS基础\n---\n- 在构造函数中，this 指向 new 出来的实例本身。\n\n```js\nfunction Person(name, age){\n  this.name = name\n  this.age = age\n  console.log('this:', this)\n}\nconst person = new Person('Lucy', 18) \n// this: Person {name: \"Lucy\", age: 18}\n```\n\n- 在事件中，this 指向触发这个事件的对象。\n\n```html\n<button id=\"btn\">按钮</button>\n```\n```js\nlet oBtn = document.getElementById('btn')\noBtn.onclick = function(){\n  console.log(this)  // btn\n}\n```\n\n- this 指向函数的直接调用者。\n\n```js\nfunction getName(name){\n  this.name = name\n  return function(){\n    return this.name\n  }\n}\n\ngetName('AmilyCi')() // \"AmilyCi\"\n```\n \n- 自执行函数中的 this 永远都是 window。\n\n```js\n(function(){\n  console.log(this)\n})()   // window\n```\n- 函数执行，首先看函数前面是否有\".\"，有的话，\".\"前面是谁 this 就是谁，没有的话，this 就是 window。\n\n```js\nlet user = {\n  firstName: 'John',\n  lastName: 'Dave',\n  getFullName(){\n    return this.firstName + ' ' + this.lastName\n  }\n}\nuser.getFullName() // \"John Dave\"\n```\n\n- 箭头函数中的 this 取决于包裹箭头函数的第一个普通函数 this。\n\n```js\nfunction getName(name){\n  this.name = name\n  return () => {\n    return () => {\n      console.log(this.name)\n    }\n  }\n}\ngetName('AmilyCi')()() // AmilyCi\n```\n\n- 对于像 call,apply,bind 这种可以改变 this 指向的函数，this 取决于第一个参数，第一个参数为空的话，那么 this 就是 window。\n\n```js\nlet user = {\n  firstName: 'John',\n  lastName: 'Smith'\n}\nfunction getFullName(){\n  return this.firstName + ' ' + this.lastName\n}\ngetFullName.call(user) // \"John Smith\"\n```","slug":"this","published":1,"updated":"2020-09-29T07:25:02.054Z","_id":"ckfl1j02s000um4ol1xs8d033","comments":1,"layout":"post","photos":[],"link":"","content":"<ul>\n<li>在构造函数中，this 指向 new 出来的实例本身。</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">Person</span>(<span class=\"hljs-params\">name, age</span>)</span>&#123;<br>  <span class=\"hljs-keyword\">this</span>.name = name<br>  <span class=\"hljs-keyword\">this</span>.age = age<br>  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'this:'</span>, <span class=\"hljs-keyword\">this</span>)<br>&#125;<br><span class=\"hljs-keyword\">const</span> person = <span class=\"hljs-keyword\">new</span> Person(<span class=\"hljs-string\">'Lucy'</span>, <span class=\"hljs-number\">18</span>) <br><span class=\"hljs-comment\">// this: Person &#123;name: \"Lucy\", age: 18&#125;</span><br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>在事件中，this 指向触发这个事件的对象。</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"btn\"</span>&gt;</span>按钮<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">let</span> oBtn = <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">'btn'</span>)<br>oBtn.onclick = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;<br>  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-keyword\">this</span>)  <span class=\"hljs-comment\">// btn</span><br>&#125;<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>this 指向函数的直接调用者。</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">getName</span>(<span class=\"hljs-params\">name</span>)</span>&#123;<br>  <span class=\"hljs-keyword\">this</span>.name = name<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.name<br>  &#125;<br>&#125;<br><br>getName(<span class=\"hljs-string\">'AmilyCi'</span>)() <span class=\"hljs-comment\">// \"AmilyCi\"</span><br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>自执行函数中的 this 永远都是 window。</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;<br>  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-keyword\">this</span>)<br>&#125;)()   <span class=\"hljs-comment\">// window</span><br></code></pre></td></tr></table></figure>\n<ul>\n<li>函数执行，首先看函数前面是否有”.”，有的话，”.”前面是谁 this 就是谁，没有的话，this 就是 window。</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">let</span> user = &#123;<br>  firstName: <span class=\"hljs-string\">'John'</span>,<br>  lastName: <span class=\"hljs-string\">'Dave'</span>,<br>  getFullName()&#123;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.firstName + <span class=\"hljs-string\">' '</span> + <span class=\"hljs-keyword\">this</span>.lastName<br>  &#125;<br>&#125;<br>user.getFullName() <span class=\"hljs-comment\">// \"John Dave\"</span><br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>箭头函数中的 this 取决于包裹箭头函数的第一个普通函数 this。</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">getName</span>(<span class=\"hljs-params\">name</span>)</span>&#123;<br>  <span class=\"hljs-keyword\">this</span>.name = name<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> &#123;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> &#123;<br>      <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-keyword\">this</span>.name)<br>    &#125;<br>  &#125;<br>&#125;<br>getName(<span class=\"hljs-string\">'AmilyCi'</span>)()() <span class=\"hljs-comment\">// AmilyCi</span><br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>对于像 call,apply,bind 这种可以改变 this 指向的函数，this 取决于第一个参数，第一个参数为空的话，那么 this 就是 window。</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">let</span> user = &#123;<br>  firstName: <span class=\"hljs-string\">'John'</span>,<br>  lastName: <span class=\"hljs-string\">'Smith'</span><br>&#125;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">getFullName</span>(<span class=\"hljs-params\"></span>)</span>&#123;<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.firstName + <span class=\"hljs-string\">' '</span> + <span class=\"hljs-keyword\">this</span>.lastName<br>&#125;<br>getFullName.call(user) <span class=\"hljs-comment\">// \"John Smith\"</span><br></code></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<ul>\n<li>在构造函数中，this 指向 new 出来的实例本身。</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">Person</span>(<span class=\"hljs-params\">name, age</span>)</span>&#123;<br>  <span class=\"hljs-keyword\">this</span>.name = name<br>  <span class=\"hljs-keyword\">this</span>.age = age<br>  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'this:'</span>, <span class=\"hljs-keyword\">this</span>)<br>&#125;<br><span class=\"hljs-keyword\">const</span> person = <span class=\"hljs-keyword\">new</span> Person(<span class=\"hljs-string\">'Lucy'</span>, <span class=\"hljs-number\">18</span>) <br><span class=\"hljs-comment\">// this: Person &#123;name: \"Lucy\", age: 18&#125;</span><br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>在事件中，this 指向触发这个事件的对象。</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"btn\"</span>&gt;</span>按钮<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">let</span> oBtn = <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">'btn'</span>)<br>oBtn.onclick = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;<br>  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-keyword\">this</span>)  <span class=\"hljs-comment\">// btn</span><br>&#125;<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>this 指向函数的直接调用者。</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">getName</span>(<span class=\"hljs-params\">name</span>)</span>&#123;<br>  <span class=\"hljs-keyword\">this</span>.name = name<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.name<br>  &#125;<br>&#125;<br><br>getName(<span class=\"hljs-string\">'AmilyCi'</span>)() <span class=\"hljs-comment\">// \"AmilyCi\"</span><br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>自执行函数中的 this 永远都是 window。</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;<br>  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-keyword\">this</span>)<br>&#125;)()   <span class=\"hljs-comment\">// window</span><br></code></pre></td></tr></table></figure>\n<ul>\n<li>函数执行，首先看函数前面是否有”.”，有的话，”.”前面是谁 this 就是谁，没有的话，this 就是 window。</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">let</span> user = &#123;<br>  firstName: <span class=\"hljs-string\">'John'</span>,<br>  lastName: <span class=\"hljs-string\">'Dave'</span>,<br>  getFullName()&#123;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.firstName + <span class=\"hljs-string\">' '</span> + <span class=\"hljs-keyword\">this</span>.lastName<br>  &#125;<br>&#125;<br>user.getFullName() <span class=\"hljs-comment\">// \"John Dave\"</span><br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>箭头函数中的 this 取决于包裹箭头函数的第一个普通函数 this。</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">getName</span>(<span class=\"hljs-params\">name</span>)</span>&#123;<br>  <span class=\"hljs-keyword\">this</span>.name = name<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> &#123;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> &#123;<br>      <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-keyword\">this</span>.name)<br>    &#125;<br>  &#125;<br>&#125;<br>getName(<span class=\"hljs-string\">'AmilyCi'</span>)()() <span class=\"hljs-comment\">// AmilyCi</span><br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>对于像 call,apply,bind 这种可以改变 this 指向的函数，this 取决于第一个参数，第一个参数为空的话，那么 this 就是 window。</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">let</span> user = &#123;<br>  firstName: <span class=\"hljs-string\">'John'</span>,<br>  lastName: <span class=\"hljs-string\">'Smith'</span><br>&#125;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">getFullName</span>(<span class=\"hljs-params\"></span>)</span>&#123;<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.firstName + <span class=\"hljs-string\">' '</span> + <span class=\"hljs-keyword\">this</span>.lastName<br>&#125;<br>getFullName.call(user) <span class=\"hljs-comment\">// \"John Smith\"</span><br></code></pre></td></tr></table></figure>"},{"title":"节流与防抖","date":"2020-08-17T12:20:30.000Z","_content":"&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;节流和防抖是我们平常开发经常会用到的性能优化之一，它们都是用来限制函数的执行频率，用来优化函数触发频率过高导致的响应速度跟不上，延迟假死或卡顿的现象，下面就让我们来详细的分析一下怎样来做节流与防抖。\n### 防抖\n&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;函数的防抖就是在一定时间内如果某个事件被高频的触发,那么我们就延时让他执行，比如，我们可以设置一个定时器，时间为3s，当我们第一次触发行为时，计时器开始计时，如果在倒计时时间内没有再次触发行为，那么计时结束后会执行函数，但是在计时时间内如果又触发了该行为，则计时器开始重新计时，以此类推，其实防抖就是在触发高频率的行为时只执行一次函数，这样通过控制次数来提高性能。\n\n> 简述：事件触发n秒后被执行回调，如果n秒内再次触发，则重新计时\n\n假如我们有一个滚动事件，我们想监听滚动行为来执行函数，用防抖可以这样来做\n\n- 简易版\n\n```js\n  function debounce(fn, wait) {\n    let timeout\n    return function () {\n      let context = this\n      let arg = arguments\n      if(timeout) clearTimeout(timeout)\n      timeout = setTimeout(() => {\n        fn.apply(context, arg)\n      },wait)\n    }\n  }\n  function print(){\n    console.log('我是防抖')\n  }\n  window.addEventListener('scroll', debounce(print, 1000))\n```\n\n- 立即执行版\n\n如果希望触发之后立即执行函数，然后等待n秒后才可以重新触发执行，并且在n秒内再次触发会重新计时n秒\n\n```js\nfunction debounce(fn, wait, immediate){\n  let timer\n  return function(){\n    const context = this\n    const arg = arguments\n    if(timer) clearTimeout(timer)\n    if(immediate){\n      const callNow = !timer\n      timer = setTimeout(function(){\n        timer = null\n      }, wait)\n      if(callNow) fn.apply(context, arg)\n    }else {\n      timer = setTimeout(function(){\n        fn.apply(context, arg)\n      }, wait)\n    }\n  }\n}\n```\n\n&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;这样如果在1s内我们多次触发这个行为，那么计时器会不停的重新计算，直到在1s内我们没有再次触发该行为，就会执行这个 print 事件\n\n- 应用场景：\n  - 按钮提交：防止多次提交，只执行最后一次得提交\n  - 搜索框联想：防止联想发送请求，只发送最后一次\n\n### 节流\n&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;函数的节流就是在高频的触发某个行为时，我们设置一个规定的时间，在该时间内只会执行一次，节流会稀释函数执行的频率。\n\n> 简述：单位时间内多次触发只会执行一次\n\n我们还是用上述的滚动事件来举例，代码如下\n\n- 方案一\n\n```js\nfunction throttle(fn, wait) {\n  let time = 0, timer = null\n  return function () {\n    let now = Date.now()\n    let arg = arguments\n    let context = this\n    if (now - time > wait) {\n      fn.apply(context, arg)\n      time = now\n    } else (\n      timer && clearTimeout(timer)\n      timer = setTimeout( () => {\n        time = now\n        fn.apply(context, arg)\n      }, wait)\n    )\n  }\n}\nfunction print(){\n  console.log('我是节流')\n}\nwindow.addEventListener('scroll', throttle(print, 1000))\n```\n- 方案二\n\n```js\nfunction throttle(fn, wait){\n  let previous = 0\n  return function(){\n    let now  = +new Date()\n    let context = this\n    let arg = arguments\n    if(now - previous > wait){\n      fn.apply(context, arg)\n      previous = now\n    }\n  }\n}\n```\n- 方案三\n\n```js\nfunction throttle(fn, wait){\n  let timer\n  return function(){\n    let context = this\n    let arg = arguments\n    if(!timer){\n      timer = setTimeout(function(){\n        timer = null\n        fn.apply(context, arg)\n      }, wait)\n    }\n  }\n}\n```\n\n- 应用场景：\n  - 拖拽：固定时间内只执行一次，防止超高频次触发位置变动\n  - 缩放：监控浏览器resize\n\n### 节流和防抖之间的区别\n\n- 节流是不管触发事件多频繁，都会在一定的时间内执行一次，而防抖会在频繁触发的最后一次才执行\n\n","source":"_posts/throttle.md","raw":"---\ntitle: 节流与防抖\ndate: 2020-08-17 20:20:30\ntags: JS\ncategories:\n- 性能优化\n---\n&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;节流和防抖是我们平常开发经常会用到的性能优化之一，它们都是用来限制函数的执行频率，用来优化函数触发频率过高导致的响应速度跟不上，延迟假死或卡顿的现象，下面就让我们来详细的分析一下怎样来做节流与防抖。\n### 防抖\n&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;函数的防抖就是在一定时间内如果某个事件被高频的触发,那么我们就延时让他执行，比如，我们可以设置一个定时器，时间为3s，当我们第一次触发行为时，计时器开始计时，如果在倒计时时间内没有再次触发行为，那么计时结束后会执行函数，但是在计时时间内如果又触发了该行为，则计时器开始重新计时，以此类推，其实防抖就是在触发高频率的行为时只执行一次函数，这样通过控制次数来提高性能。\n\n> 简述：事件触发n秒后被执行回调，如果n秒内再次触发，则重新计时\n\n假如我们有一个滚动事件，我们想监听滚动行为来执行函数，用防抖可以这样来做\n\n- 简易版\n\n```js\n  function debounce(fn, wait) {\n    let timeout\n    return function () {\n      let context = this\n      let arg = arguments\n      if(timeout) clearTimeout(timeout)\n      timeout = setTimeout(() => {\n        fn.apply(context, arg)\n      },wait)\n    }\n  }\n  function print(){\n    console.log('我是防抖')\n  }\n  window.addEventListener('scroll', debounce(print, 1000))\n```\n\n- 立即执行版\n\n如果希望触发之后立即执行函数，然后等待n秒后才可以重新触发执行，并且在n秒内再次触发会重新计时n秒\n\n```js\nfunction debounce(fn, wait, immediate){\n  let timer\n  return function(){\n    const context = this\n    const arg = arguments\n    if(timer) clearTimeout(timer)\n    if(immediate){\n      const callNow = !timer\n      timer = setTimeout(function(){\n        timer = null\n      }, wait)\n      if(callNow) fn.apply(context, arg)\n    }else {\n      timer = setTimeout(function(){\n        fn.apply(context, arg)\n      }, wait)\n    }\n  }\n}\n```\n\n&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;这样如果在1s内我们多次触发这个行为，那么计时器会不停的重新计算，直到在1s内我们没有再次触发该行为，就会执行这个 print 事件\n\n- 应用场景：\n  - 按钮提交：防止多次提交，只执行最后一次得提交\n  - 搜索框联想：防止联想发送请求，只发送最后一次\n\n### 节流\n&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;函数的节流就是在高频的触发某个行为时，我们设置一个规定的时间，在该时间内只会执行一次，节流会稀释函数执行的频率。\n\n> 简述：单位时间内多次触发只会执行一次\n\n我们还是用上述的滚动事件来举例，代码如下\n\n- 方案一\n\n```js\nfunction throttle(fn, wait) {\n  let time = 0, timer = null\n  return function () {\n    let now = Date.now()\n    let arg = arguments\n    let context = this\n    if (now - time > wait) {\n      fn.apply(context, arg)\n      time = now\n    } else (\n      timer && clearTimeout(timer)\n      timer = setTimeout( () => {\n        time = now\n        fn.apply(context, arg)\n      }, wait)\n    )\n  }\n}\nfunction print(){\n  console.log('我是节流')\n}\nwindow.addEventListener('scroll', throttle(print, 1000))\n```\n- 方案二\n\n```js\nfunction throttle(fn, wait){\n  let previous = 0\n  return function(){\n    let now  = +new Date()\n    let context = this\n    let arg = arguments\n    if(now - previous > wait){\n      fn.apply(context, arg)\n      previous = now\n    }\n  }\n}\n```\n- 方案三\n\n```js\nfunction throttle(fn, wait){\n  let timer\n  return function(){\n    let context = this\n    let arg = arguments\n    if(!timer){\n      timer = setTimeout(function(){\n        timer = null\n        fn.apply(context, arg)\n      }, wait)\n    }\n  }\n}\n```\n\n- 应用场景：\n  - 拖拽：固定时间内只执行一次，防止超高频次触发位置变动\n  - 缩放：监控浏览器resize\n\n### 节流和防抖之间的区别\n\n- 节流是不管触发事件多频繁，都会在一定的时间内执行一次，而防抖会在频繁触发的最后一次才执行\n\n","slug":"throttle","published":1,"updated":"2020-10-18T11:24:21.745Z","_id":"ckfl1j02u000xm4ol91q40kn3","comments":1,"layout":"post","photos":[],"link":"","content":"<p>&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;节流和防抖是我们平常开发经常会用到的性能优化之一，它们都是用来限制函数的执行频率，用来优化函数触发频率过高导致的响应速度跟不上，延迟假死或卡顿的现象，下面就让我们来详细的分析一下怎样来做节流与防抖。</p>\n<h3 id=\"防抖\"><a href=\"#防抖\" class=\"headerlink\" title=\"防抖\"></a>防抖</h3><p>&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;函数的防抖就是在一定时间内如果某个事件被高频的触发,那么我们就延时让他执行，比如，我们可以设置一个定时器，时间为3s，当我们第一次触发行为时，计时器开始计时，如果在倒计时时间内没有再次触发行为，那么计时结束后会执行函数，但是在计时时间内如果又触发了该行为，则计时器开始重新计时，以此类推，其实防抖就是在触发高频率的行为时只执行一次函数，这样通过控制次数来提高性能。</p>\n<blockquote>\n<p>简述：事件触发n秒后被执行回调，如果n秒内再次触发，则重新计时</p>\n</blockquote>\n<p>假如我们有一个滚动事件，我们想监听滚动行为来执行函数，用防抖可以这样来做</p>\n<ul>\n<li>简易版</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">debounce</span>(<span class=\"hljs-params\">fn, wait</span>) </span>&#123;<br>  <span class=\"hljs-keyword\">let</span> timeout<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>&#123;<br>    <span class=\"hljs-keyword\">let</span> context = <span class=\"hljs-keyword\">this</span><br>    <span class=\"hljs-keyword\">let</span> arg = <span class=\"hljs-built_in\">arguments</span><br>    <span class=\"hljs-keyword\">if</span>(timeout) clearTimeout(timeout)<br>    timeout = setTimeout(<span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> &#123;<br>      fn.apply(context, arg)<br>    &#125;,wait)<br>  &#125;<br>&#125;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">print</span>(<span class=\"hljs-params\"></span>)</span>&#123;<br>  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'我是防抖'</span>)<br>&#125;<br><span class=\"hljs-built_in\">window</span>.addEventListener(<span class=\"hljs-string\">'scroll'</span>, debounce(print, <span class=\"hljs-number\">1000</span>))<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>立即执行版</li>\n</ul>\n<p>如果希望触发之后立即执行函数，然后等待n秒后才可以重新触发执行，并且在n秒内再次触发会重新计时n秒</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">debounce</span>(<span class=\"hljs-params\">fn, wait, immediate</span>)</span>&#123;<br>  <span class=\"hljs-keyword\">let</span> timer<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;<br>    <span class=\"hljs-keyword\">const</span> context = <span class=\"hljs-keyword\">this</span><br>    <span class=\"hljs-keyword\">const</span> arg = <span class=\"hljs-built_in\">arguments</span><br>    <span class=\"hljs-keyword\">if</span>(timer) clearTimeout(timer)<br>    <span class=\"hljs-keyword\">if</span>(immediate)&#123;<br>      <span class=\"hljs-keyword\">const</span> callNow = !timer<br>      timer = setTimeout(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;<br>        timer = <span class=\"hljs-literal\">null</span><br>      &#125;, wait)<br>      <span class=\"hljs-keyword\">if</span>(callNow) fn.apply(context, arg)<br>    &#125;<span class=\"hljs-keyword\">else</span> &#123;<br>      timer = setTimeout(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;<br>        fn.apply(context, arg)<br>      &#125;, wait)<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;这样如果在1s内我们多次触发这个行为，那么计时器会不停的重新计算，直到在1s内我们没有再次触发该行为，就会执行这个 print 事件</p>\n<ul>\n<li>应用场景：<ul>\n<li>按钮提交：防止多次提交，只执行最后一次得提交</li>\n<li>搜索框联想：防止联想发送请求，只发送最后一次</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"节流\"><a href=\"#节流\" class=\"headerlink\" title=\"节流\"></a>节流</h3><p>&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;函数的节流就是在高频的触发某个行为时，我们设置一个规定的时间，在该时间内只会执行一次，节流会稀释函数执行的频率。</p>\n<blockquote>\n<p>简述：单位时间内多次触发只会执行一次</p>\n</blockquote>\n<p>我们还是用上述的滚动事件来举例，代码如下</p>\n<ul>\n<li>方案一</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">throttle</span>(<span class=\"hljs-params\">fn, wait</span>) </span>&#123;<br>  <span class=\"hljs-keyword\">let</span> time = <span class=\"hljs-number\">0</span>, timer = <span class=\"hljs-literal\">null</span><br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>&#123;<br>    <span class=\"hljs-keyword\">let</span> now = <span class=\"hljs-built_in\">Date</span>.now()<br>    <span class=\"hljs-keyword\">let</span> arg = <span class=\"hljs-built_in\">arguments</span><br>    <span class=\"hljs-keyword\">let</span> context = <span class=\"hljs-keyword\">this</span><br>    <span class=\"hljs-keyword\">if</span> (now - time &gt; wait) &#123;<br>      fn.apply(context, arg)<br>      time = now<br>    &#125; <span class=\"hljs-keyword\">else</span> (<br>      timer &amp;&amp; clearTimeout(timer)<br>      timer = setTimeout( <span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> &#123;<br>        time = now<br>        fn.apply(context, arg)<br>      &#125;, wait)<br>    )<br>  &#125;<br>&#125;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">print</span>(<span class=\"hljs-params\"></span>)</span>&#123;<br>  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'我是节流'</span>)<br>&#125;<br><span class=\"hljs-built_in\">window</span>.addEventListener(<span class=\"hljs-string\">'scroll'</span>, throttle(print, <span class=\"hljs-number\">1000</span>))<br></code></pre></td></tr></table></figure>\n<ul>\n<li>方案二</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">throttle</span>(<span class=\"hljs-params\">fn, wait</span>)</span>&#123;<br>  <span class=\"hljs-keyword\">let</span> previous = <span class=\"hljs-number\">0</span><br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;<br>    <span class=\"hljs-keyword\">let</span> now  = +<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>()<br>    <span class=\"hljs-keyword\">let</span> context = <span class=\"hljs-keyword\">this</span><br>    <span class=\"hljs-keyword\">let</span> arg = <span class=\"hljs-built_in\">arguments</span><br>    <span class=\"hljs-keyword\">if</span>(now - previous &gt; wait)&#123;<br>      fn.apply(context, arg)<br>      previous = now<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<ul>\n<li>方案三</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">throttle</span>(<span class=\"hljs-params\">fn, wait</span>)</span>&#123;<br>  <span class=\"hljs-keyword\">let</span> timer<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;<br>    <span class=\"hljs-keyword\">let</span> context = <span class=\"hljs-keyword\">this</span><br>    <span class=\"hljs-keyword\">let</span> arg = <span class=\"hljs-built_in\">arguments</span><br>    <span class=\"hljs-keyword\">if</span>(!timer)&#123;<br>      timer = setTimeout(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;<br>        timer = <span class=\"hljs-literal\">null</span><br>        fn.apply(context, arg)<br>      &#125;, wait)<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>应用场景：<ul>\n<li>拖拽：固定时间内只执行一次，防止超高频次触发位置变动</li>\n<li>缩放：监控浏览器resize</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"节流和防抖之间的区别\"><a href=\"#节流和防抖之间的区别\" class=\"headerlink\" title=\"节流和防抖之间的区别\"></a>节流和防抖之间的区别</h3><ul>\n<li>节流是不管触发事件多频繁，都会在一定的时间内执行一次，而防抖会在频繁触发的最后一次才执行</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;节流和防抖是我们平常开发经常会用到的性能优化之一，它们都是用来限制函数的执行频率，用来优化函数触发频率过高导致的响应速度跟不上，延迟假死或卡顿的现象，下面就让我们来详细的分析一下怎样来做节流与防抖。</p>\n<h3 id=\"防抖\"><a href=\"#防抖\" class=\"headerlink\" title=\"防抖\"></a>防抖</h3><p>&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;函数的防抖就是在一定时间内如果某个事件被高频的触发,那么我们就延时让他执行，比如，我们可以设置一个定时器，时间为3s，当我们第一次触发行为时，计时器开始计时，如果在倒计时时间内没有再次触发行为，那么计时结束后会执行函数，但是在计时时间内如果又触发了该行为，则计时器开始重新计时，以此类推，其实防抖就是在触发高频率的行为时只执行一次函数，这样通过控制次数来提高性能。</p>\n<blockquote>\n<p>简述：事件触发n秒后被执行回调，如果n秒内再次触发，则重新计时</p>\n</blockquote>\n<p>假如我们有一个滚动事件，我们想监听滚动行为来执行函数，用防抖可以这样来做</p>\n<ul>\n<li>简易版</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">debounce</span>(<span class=\"hljs-params\">fn, wait</span>) </span>&#123;<br>  <span class=\"hljs-keyword\">let</span> timeout<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>&#123;<br>    <span class=\"hljs-keyword\">let</span> context = <span class=\"hljs-keyword\">this</span><br>    <span class=\"hljs-keyword\">let</span> arg = <span class=\"hljs-built_in\">arguments</span><br>    <span class=\"hljs-keyword\">if</span>(timeout) clearTimeout(timeout)<br>    timeout = setTimeout(<span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> &#123;<br>      fn.apply(context, arg)<br>    &#125;,wait)<br>  &#125;<br>&#125;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">print</span>(<span class=\"hljs-params\"></span>)</span>&#123;<br>  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'我是防抖'</span>)<br>&#125;<br><span class=\"hljs-built_in\">window</span>.addEventListener(<span class=\"hljs-string\">'scroll'</span>, debounce(print, <span class=\"hljs-number\">1000</span>))<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>立即执行版</li>\n</ul>\n<p>如果希望触发之后立即执行函数，然后等待n秒后才可以重新触发执行，并且在n秒内再次触发会重新计时n秒</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">debounce</span>(<span class=\"hljs-params\">fn, wait, immediate</span>)</span>&#123;<br>  <span class=\"hljs-keyword\">let</span> timer<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;<br>    <span class=\"hljs-keyword\">const</span> context = <span class=\"hljs-keyword\">this</span><br>    <span class=\"hljs-keyword\">const</span> arg = <span class=\"hljs-built_in\">arguments</span><br>    <span class=\"hljs-keyword\">if</span>(timer) clearTimeout(timer)<br>    <span class=\"hljs-keyword\">if</span>(immediate)&#123;<br>      <span class=\"hljs-keyword\">const</span> callNow = !timer<br>      timer = setTimeout(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;<br>        timer = <span class=\"hljs-literal\">null</span><br>      &#125;, wait)<br>      <span class=\"hljs-keyword\">if</span>(callNow) fn.apply(context, arg)<br>    &#125;<span class=\"hljs-keyword\">else</span> &#123;<br>      timer = setTimeout(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;<br>        fn.apply(context, arg)<br>      &#125;, wait)<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;这样如果在1s内我们多次触发这个行为，那么计时器会不停的重新计算，直到在1s内我们没有再次触发该行为，就会执行这个 print 事件</p>\n<ul>\n<li>应用场景：<ul>\n<li>按钮提交：防止多次提交，只执行最后一次得提交</li>\n<li>搜索框联想：防止联想发送请求，只发送最后一次</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"节流\"><a href=\"#节流\" class=\"headerlink\" title=\"节流\"></a>节流</h3><p>&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;函数的节流就是在高频的触发某个行为时，我们设置一个规定的时间，在该时间内只会执行一次，节流会稀释函数执行的频率。</p>\n<blockquote>\n<p>简述：单位时间内多次触发只会执行一次</p>\n</blockquote>\n<p>我们还是用上述的滚动事件来举例，代码如下</p>\n<ul>\n<li>方案一</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">throttle</span>(<span class=\"hljs-params\">fn, wait</span>) </span>&#123;<br>  <span class=\"hljs-keyword\">let</span> time = <span class=\"hljs-number\">0</span>, timer = <span class=\"hljs-literal\">null</span><br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>&#123;<br>    <span class=\"hljs-keyword\">let</span> now = <span class=\"hljs-built_in\">Date</span>.now()<br>    <span class=\"hljs-keyword\">let</span> arg = <span class=\"hljs-built_in\">arguments</span><br>    <span class=\"hljs-keyword\">let</span> context = <span class=\"hljs-keyword\">this</span><br>    <span class=\"hljs-keyword\">if</span> (now - time &gt; wait) &#123;<br>      fn.apply(context, arg)<br>      time = now<br>    &#125; <span class=\"hljs-keyword\">else</span> (<br>      timer &amp;&amp; clearTimeout(timer)<br>      timer = setTimeout( <span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> &#123;<br>        time = now<br>        fn.apply(context, arg)<br>      &#125;, wait)<br>    )<br>  &#125;<br>&#125;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">print</span>(<span class=\"hljs-params\"></span>)</span>&#123;<br>  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'我是节流'</span>)<br>&#125;<br><span class=\"hljs-built_in\">window</span>.addEventListener(<span class=\"hljs-string\">'scroll'</span>, throttle(print, <span class=\"hljs-number\">1000</span>))<br></code></pre></td></tr></table></figure>\n<ul>\n<li>方案二</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">throttle</span>(<span class=\"hljs-params\">fn, wait</span>)</span>&#123;<br>  <span class=\"hljs-keyword\">let</span> previous = <span class=\"hljs-number\">0</span><br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;<br>    <span class=\"hljs-keyword\">let</span> now  = +<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>()<br>    <span class=\"hljs-keyword\">let</span> context = <span class=\"hljs-keyword\">this</span><br>    <span class=\"hljs-keyword\">let</span> arg = <span class=\"hljs-built_in\">arguments</span><br>    <span class=\"hljs-keyword\">if</span>(now - previous &gt; wait)&#123;<br>      fn.apply(context, arg)<br>      previous = now<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<ul>\n<li>方案三</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">throttle</span>(<span class=\"hljs-params\">fn, wait</span>)</span>&#123;<br>  <span class=\"hljs-keyword\">let</span> timer<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;<br>    <span class=\"hljs-keyword\">let</span> context = <span class=\"hljs-keyword\">this</span><br>    <span class=\"hljs-keyword\">let</span> arg = <span class=\"hljs-built_in\">arguments</span><br>    <span class=\"hljs-keyword\">if</span>(!timer)&#123;<br>      timer = setTimeout(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;<br>        timer = <span class=\"hljs-literal\">null</span><br>        fn.apply(context, arg)<br>      &#125;, wait)<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>应用场景：<ul>\n<li>拖拽：固定时间内只执行一次，防止超高频次触发位置变动</li>\n<li>缩放：监控浏览器resize</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"节流和防抖之间的区别\"><a href=\"#节流和防抖之间的区别\" class=\"headerlink\" title=\"节流和防抖之间的区别\"></a>节流和防抖之间的区别</h3><ul>\n<li>节流是不管触发事件多频繁，都会在一定的时间内执行一次，而防抖会在频繁触发的最后一次才执行</li>\n</ul>\n"},{"title":"检测数据类型的几种方式","date":"2020-05-23T05:13:40.000Z","_content":"### typeof\n- typeof 检测基本数据类型，除了 null 以外其它的都可以检测出来，typeof(null) 返回的结果是 \"object\"。\n\n- typeof 检测引用数据类型，除了函数以外其它返回的结果都是 \"object\"。\n\n- 使用 typeof 检测数据类型，返回的结果是字符串包含着对应的数据类型。\n\n```js\ntypeof(null); // \"object\"\n\ntypeof(\"2\"); // \"string\"\n```\n\n### instanceof\n- instanceof 检测某一个实例是否属于某个类。\n\n- 不能用来检测和处理字面量方式创建出来的基本数据类型值。\n\n- instanceof 的特性：只要在当前实例的原型链上，我们用其检测出来的结果都是true。\n\n```js\nconst obj = new Object()\n\nobj instanceof Object // true\n```\n\n### constructor\n- 作用和 instanceof 非常的相似。\n\n- constructor 可以处理基本数据类型的检测。\n\n```js\nconst a = 111;\nconst b = {};\na.constructor === Number; // true\nb.constructor === Object; // true\n```\n\n### Object.prototype.toString.call()\n\n- 最准确常用的方式。\n\n- 第一个object代表当前实例是对象数据类型的（这个是固定死的）第二个Object，代表的是obj所属的类是Object。\n\n```js\nObject.prototype.toString.call('111'); // \"[object String]\"\n\nObject.prototype.toString.call([]); // \"[object Array]\"\n\nObject.prototype.toString.call(()=>{}); // \"[object Function]\"\n\nObject.prototype.toString.call(111); // \"[object Number]\"\n\nObject.prototype.toString.call(null); //\"[object Null]\"\n```\n\n","source":"_posts/typeof.md","raw":"---\ntitle: 检测数据类型的几种方式\ndate: 2020-05-23 13:13:40\ntags: JS\ncategories:\n- JS基础\n---\n### typeof\n- typeof 检测基本数据类型，除了 null 以外其它的都可以检测出来，typeof(null) 返回的结果是 \"object\"。\n\n- typeof 检测引用数据类型，除了函数以外其它返回的结果都是 \"object\"。\n\n- 使用 typeof 检测数据类型，返回的结果是字符串包含着对应的数据类型。\n\n```js\ntypeof(null); // \"object\"\n\ntypeof(\"2\"); // \"string\"\n```\n\n### instanceof\n- instanceof 检测某一个实例是否属于某个类。\n\n- 不能用来检测和处理字面量方式创建出来的基本数据类型值。\n\n- instanceof 的特性：只要在当前实例的原型链上，我们用其检测出来的结果都是true。\n\n```js\nconst obj = new Object()\n\nobj instanceof Object // true\n```\n\n### constructor\n- 作用和 instanceof 非常的相似。\n\n- constructor 可以处理基本数据类型的检测。\n\n```js\nconst a = 111;\nconst b = {};\na.constructor === Number; // true\nb.constructor === Object; // true\n```\n\n### Object.prototype.toString.call()\n\n- 最准确常用的方式。\n\n- 第一个object代表当前实例是对象数据类型的（这个是固定死的）第二个Object，代表的是obj所属的类是Object。\n\n```js\nObject.prototype.toString.call('111'); // \"[object String]\"\n\nObject.prototype.toString.call([]); // \"[object Array]\"\n\nObject.prototype.toString.call(()=>{}); // \"[object Function]\"\n\nObject.prototype.toString.call(111); // \"[object Number]\"\n\nObject.prototype.toString.call(null); //\"[object Null]\"\n```\n\n","slug":"typeof","published":1,"updated":"2020-05-23T06:27:24.396Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckfl1j02w0010m4ol7legg9f4","content":"<h3 id=\"typeof\"><a href=\"#typeof\" class=\"headerlink\" title=\"typeof\"></a>typeof</h3><ul>\n<li><p>typeof 检测基本数据类型，除了 null 以外其它的都可以检测出来，typeof(null) 返回的结果是 “object”。</p>\n</li>\n<li><p>typeof 检测引用数据类型，除了函数以外其它返回的结果都是 “object”。</p>\n</li>\n<li><p>使用 typeof 检测数据类型，返回的结果是字符串包含着对应的数据类型。</p>\n</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">typeof</span>(<span class=\"hljs-literal\">null</span>); <span class=\"hljs-comment\">// \"object\"</span><br><br><span class=\"hljs-keyword\">typeof</span>(<span class=\"hljs-string\">\"2\"</span>); <span class=\"hljs-comment\">// \"string\"</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"instanceof\"><a href=\"#instanceof\" class=\"headerlink\" title=\"instanceof\"></a>instanceof</h3><ul>\n<li><p>instanceof 检测某一个实例是否属于某个类。</p>\n</li>\n<li><p>不能用来检测和处理字面量方式创建出来的基本数据类型值。</p>\n</li>\n<li><p>instanceof 的特性：只要在当前实例的原型链上，我们用其检测出来的结果都是true。</p>\n</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> obj = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Object</span>()<br><br>obj <span class=\"hljs-keyword\">instanceof</span> <span class=\"hljs-built_in\">Object</span> <span class=\"hljs-comment\">// true</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"constructor-NaN\"><a href=\"#constructor-NaN\" class=\"headerlink\" title=\"constructor\"></a>constructor</h3><ul>\n<li><p>作用和 instanceof 非常的相似。</p>\n</li>\n<li><p>constructor 可以处理基本数据类型的检测。</p>\n</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> a = <span class=\"hljs-number\">111</span>;<br><span class=\"hljs-keyword\">const</span> b = &#123;&#125;;<br>a.constructor === <span class=\"hljs-built_in\">Number</span>; <span class=\"hljs-comment\">// true</span><br>b.constructor === <span class=\"hljs-built_in\">Object</span>; <span class=\"hljs-comment\">// true</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"Object-prototype-toString-call\"><a href=\"#Object-prototype-toString-call\" class=\"headerlink\" title=\"Object.prototype.toString.call()\"></a>Object.prototype.toString.call()</h3><ul>\n<li><p>最准确常用的方式。</p>\n</li>\n<li><p>第一个object代表当前实例是对象数据类型的（这个是固定死的）第二个Object，代表的是obj所属的类是Object。</p>\n</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-built_in\">Object</span>.prototype.toString.call(<span class=\"hljs-string\">'111'</span>); <span class=\"hljs-comment\">// \"[object String]\"</span><br><br><span class=\"hljs-built_in\">Object</span>.prototype.toString.call([]); <span class=\"hljs-comment\">// \"[object Array]\"</span><br><br><span class=\"hljs-built_in\">Object</span>.prototype.toString.call(<span class=\"hljs-function\"><span class=\"hljs-params\">()</span>=&gt;</span>&#123;&#125;); <span class=\"hljs-comment\">// \"[object Function]\"</span><br><br><span class=\"hljs-built_in\">Object</span>.prototype.toString.call(<span class=\"hljs-number\">111</span>); <span class=\"hljs-comment\">// \"[object Number]\"</span><br><br><span class=\"hljs-built_in\">Object</span>.prototype.toString.call(<span class=\"hljs-literal\">null</span>); <span class=\"hljs-comment\">//\"[object Null]\"</span><br></code></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"typeof\"><a href=\"#typeof\" class=\"headerlink\" title=\"typeof\"></a>typeof</h3><ul>\n<li><p>typeof 检测基本数据类型，除了 null 以外其它的都可以检测出来，typeof(null) 返回的结果是 “object”。</p>\n</li>\n<li><p>typeof 检测引用数据类型，除了函数以外其它返回的结果都是 “object”。</p>\n</li>\n<li><p>使用 typeof 检测数据类型，返回的结果是字符串包含着对应的数据类型。</p>\n</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">typeof</span>(<span class=\"hljs-literal\">null</span>); <span class=\"hljs-comment\">// \"object\"</span><br><br><span class=\"hljs-keyword\">typeof</span>(<span class=\"hljs-string\">\"2\"</span>); <span class=\"hljs-comment\">// \"string\"</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"instanceof\"><a href=\"#instanceof\" class=\"headerlink\" title=\"instanceof\"></a>instanceof</h3><ul>\n<li><p>instanceof 检测某一个实例是否属于某个类。</p>\n</li>\n<li><p>不能用来检测和处理字面量方式创建出来的基本数据类型值。</p>\n</li>\n<li><p>instanceof 的特性：只要在当前实例的原型链上，我们用其检测出来的结果都是true。</p>\n</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> obj = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Object</span>()<br><br>obj <span class=\"hljs-keyword\">instanceof</span> <span class=\"hljs-built_in\">Object</span> <span class=\"hljs-comment\">// true</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"constructor-NaN\"><a href=\"#constructor-NaN\" class=\"headerlink\" title=\"constructor\"></a>constructor</h3><ul>\n<li><p>作用和 instanceof 非常的相似。</p>\n</li>\n<li><p>constructor 可以处理基本数据类型的检测。</p>\n</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> a = <span class=\"hljs-number\">111</span>;<br><span class=\"hljs-keyword\">const</span> b = &#123;&#125;;<br>a.constructor === <span class=\"hljs-built_in\">Number</span>; <span class=\"hljs-comment\">// true</span><br>b.constructor === <span class=\"hljs-built_in\">Object</span>; <span class=\"hljs-comment\">// true</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"Object-prototype-toString-call\"><a href=\"#Object-prototype-toString-call\" class=\"headerlink\" title=\"Object.prototype.toString.call()\"></a>Object.prototype.toString.call()</h3><ul>\n<li><p>最准确常用的方式。</p>\n</li>\n<li><p>第一个object代表当前实例是对象数据类型的（这个是固定死的）第二个Object，代表的是obj所属的类是Object。</p>\n</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-built_in\">Object</span>.prototype.toString.call(<span class=\"hljs-string\">'111'</span>); <span class=\"hljs-comment\">// \"[object String]\"</span><br><br><span class=\"hljs-built_in\">Object</span>.prototype.toString.call([]); <span class=\"hljs-comment\">// \"[object Array]\"</span><br><br><span class=\"hljs-built_in\">Object</span>.prototype.toString.call(<span class=\"hljs-function\"><span class=\"hljs-params\">()</span>=&gt;</span>&#123;&#125;); <span class=\"hljs-comment\">// \"[object Function]\"</span><br><br><span class=\"hljs-built_in\">Object</span>.prototype.toString.call(<span class=\"hljs-number\">111</span>); <span class=\"hljs-comment\">// \"[object Number]\"</span><br><br><span class=\"hljs-built_in\">Object</span>.prototype.toString.call(<span class=\"hljs-literal\">null</span>); <span class=\"hljs-comment\">//\"[object Null]\"</span><br></code></pre></td></tr></table></figure>\n\n"},{"title":"闭包","date":"2020-09-01T09:12:13.000Z","_content":"### 什么是闭包\n&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;一个函数A中包含另一个函数B，函数B可以获取函数A中的变量，函数B就是闭包。通常情况下我们在子作用域中可以获取父作用域中的变量，但是我们想要从父作用域中获取子作用域中的变量该怎么办呢，这时候我们可以通过闭包，返回子作用域中的变量，这样我们就可以获取了。\n\n> 简述：闭包就是能够读取其他函数内部变量的函数。\n\n```js\nlet a = 3;\nfunction father(x){\n  let b = 1 + x;\n  return (function(){\n    console.log('b', b) // b 6\n  })()\n}\nconsole.log('a', a) // a 3\nfather(5)\n```\n这段代码中，我们就可以在全局作用域中获取函数作用域中的变量b了。\n\n### 闭包实例\n```js\nfor(var i = 0; i < 5; i++){\n  setTimeout(function(){\n    console.log(new Date, i)\n  }, 1000)\n}\nconsole.log(new Date, i)\n```\n这是一道经典的面试题，控制台依次会输出什么，正确答案为：5，5，5，5，5，5假如用'->'表示为隔一秒钟，用','表示不间隔，那么怎么形容控制台的输出呢？答案为：5->5,5,5,5,5，是的，控制台会先输出一个5，之后过了一秒钟会连续输出五个5。\n那么，让我们来分析一下，为什么并不是我们想要的输出：5，0，1，2，3，4呢？\n在循环执行的过程中，几乎同时设置了5个定时器，这些定时器会在一秒之后触发，而循环之后的输出是立即执行的。\n如果我们想让输出变为5->0,1,2,3,4，那应该怎么改写代码呢？\n```js\nfor(var i = 0; i < 5; i++){\n  (function(j){\n    setTimeout(function(){\n      console.log(new Date, j)\n    }, 1000)\n  })(i)\n}\nconsole.log(new Date, i)\n```\n或者可以用另一个办法\n```js\nfor(var i = 0; i < 5; i++){\n  setTimeout(function(j){\n    console.log(new Date, j)\n  }, 1000, i)\n}\nconsole.log(new Date, i)\n```\n还有一个最简单得办法\n```js\nfor(let i = 0; i < 5; i++){\n  setTimeout(function(){\n    console.log(new Date, i)\n  }, 1000)\n}\nconsole.log(new Date, i)\n```\n以上的几个方法都可以达到我们想要得结果\n\n现在如果我们想要输出得结果为：0->1->2->3->4->5,那么我们应该怎么改写呢\n```js\nfor(var i = 0; i < 5; i++){\n  (function(j){\n    setTimeout(function(){\n      console.log(new Date, j)\n    }, 1000 * j)\n  })(i)\n}\nsetTimeout(function(){\n  console.log(new Date, i)\n}, 1000 * i)\n```\n这是最简单直接得方法，我们还可以使用异步得Promise来完成\n\n```js\nconst tasks = []\nfor (var i = 0; i < 5; i++){\n  ((j) => {\n    tasks.push(new Promise((resolve) => {\n      setTimeout(() => {\n        console.log(new Date, j)\n        resolve()\n      }, 1000 * j)\n    }))\n  })(i)\n}\nPromise.all(tasks).then(() => {\n  setTimeout(() => {\n    console.log(new Date, i)\n  }, 1000)\n})\n```\n\n以上的代码可以简写为下面这种方式\n\n```js\nconst tasks = []\nconst output = (i) => new Promise((resolve) => {\n  setTimeout(() => {\n    console.log(new Date, i)\n    resolve()\n  }, 1000 * i)\n })\n\nfor(var i = 0; i < 5; i++){\n  tasks.push(output(i))\n}\nPromise.all(tasks).then(() => {\n  setTimeout(() => {\n    console.log(new Date, i)\n  }, 1000)\n})\n```\n还可以使用async/await来实现\n```js\nconst sleep = (time) => new Promise((resolve) => {\n  setTimeout(resolve,time)\n})\n(async () => {\n  for(var i = 0; i < 5; i++){\n    if(i > 0){\n      await sleep(1000)\n    }\n    console.log(new Date, i)\n  }\n  await sleep(1000)\n  console.log(new Date, i)\n})()\n```\n### 使用闭包应该注意的点\n\n- 由于闭包会使得函数中的变量都被保存在内存中，内存消耗很大，所以不能滥用闭包，否则会造成网页的性能问题，在IE中可能导致内存泄露。解决方法是，在退出函数之前，将不使用的局部变量全部删除。\n\n- 闭包会在父函数外部，改变父函数内部变量的值。所以，如果你把父函数当作对象（object）使用，把闭包当作它的公用方法（Public Method），把内部变量当作它的私有属性（private value），这时一定要小心，不要随便改变父函数内部变量的值\n\n### 闭包相关的文章\n\n- 司徒正美：https://www.cnblogs.com/rubylouvre/p/3345294.html\n- 阮一峰：http://www.ruanyifeng.com/blog/2009/08/learning_javascript_closures.html\n","source":"_posts/closure.md","raw":"---\ntitle: 闭包\ndate: 2020-09-01 17:12:13\ntags: JS\ncategories:\n- JS基础\n---\n### 什么是闭包\n&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;一个函数A中包含另一个函数B，函数B可以获取函数A中的变量，函数B就是闭包。通常情况下我们在子作用域中可以获取父作用域中的变量，但是我们想要从父作用域中获取子作用域中的变量该怎么办呢，这时候我们可以通过闭包，返回子作用域中的变量，这样我们就可以获取了。\n\n> 简述：闭包就是能够读取其他函数内部变量的函数。\n\n```js\nlet a = 3;\nfunction father(x){\n  let b = 1 + x;\n  return (function(){\n    console.log('b', b) // b 6\n  })()\n}\nconsole.log('a', a) // a 3\nfather(5)\n```\n这段代码中，我们就可以在全局作用域中获取函数作用域中的变量b了。\n\n### 闭包实例\n```js\nfor(var i = 0; i < 5; i++){\n  setTimeout(function(){\n    console.log(new Date, i)\n  }, 1000)\n}\nconsole.log(new Date, i)\n```\n这是一道经典的面试题，控制台依次会输出什么，正确答案为：5，5，5，5，5，5假如用'->'表示为隔一秒钟，用','表示不间隔，那么怎么形容控制台的输出呢？答案为：5->5,5,5,5,5，是的，控制台会先输出一个5，之后过了一秒钟会连续输出五个5。\n那么，让我们来分析一下，为什么并不是我们想要的输出：5，0，1，2，3，4呢？\n在循环执行的过程中，几乎同时设置了5个定时器，这些定时器会在一秒之后触发，而循环之后的输出是立即执行的。\n如果我们想让输出变为5->0,1,2,3,4，那应该怎么改写代码呢？\n```js\nfor(var i = 0; i < 5; i++){\n  (function(j){\n    setTimeout(function(){\n      console.log(new Date, j)\n    }, 1000)\n  })(i)\n}\nconsole.log(new Date, i)\n```\n或者可以用另一个办法\n```js\nfor(var i = 0; i < 5; i++){\n  setTimeout(function(j){\n    console.log(new Date, j)\n  }, 1000, i)\n}\nconsole.log(new Date, i)\n```\n还有一个最简单得办法\n```js\nfor(let i = 0; i < 5; i++){\n  setTimeout(function(){\n    console.log(new Date, i)\n  }, 1000)\n}\nconsole.log(new Date, i)\n```\n以上的几个方法都可以达到我们想要得结果\n\n现在如果我们想要输出得结果为：0->1->2->3->4->5,那么我们应该怎么改写呢\n```js\nfor(var i = 0; i < 5; i++){\n  (function(j){\n    setTimeout(function(){\n      console.log(new Date, j)\n    }, 1000 * j)\n  })(i)\n}\nsetTimeout(function(){\n  console.log(new Date, i)\n}, 1000 * i)\n```\n这是最简单直接得方法，我们还可以使用异步得Promise来完成\n\n```js\nconst tasks = []\nfor (var i = 0; i < 5; i++){\n  ((j) => {\n    tasks.push(new Promise((resolve) => {\n      setTimeout(() => {\n        console.log(new Date, j)\n        resolve()\n      }, 1000 * j)\n    }))\n  })(i)\n}\nPromise.all(tasks).then(() => {\n  setTimeout(() => {\n    console.log(new Date, i)\n  }, 1000)\n})\n```\n\n以上的代码可以简写为下面这种方式\n\n```js\nconst tasks = []\nconst output = (i) => new Promise((resolve) => {\n  setTimeout(() => {\n    console.log(new Date, i)\n    resolve()\n  }, 1000 * i)\n })\n\nfor(var i = 0; i < 5; i++){\n  tasks.push(output(i))\n}\nPromise.all(tasks).then(() => {\n  setTimeout(() => {\n    console.log(new Date, i)\n  }, 1000)\n})\n```\n还可以使用async/await来实现\n```js\nconst sleep = (time) => new Promise((resolve) => {\n  setTimeout(resolve,time)\n})\n(async () => {\n  for(var i = 0; i < 5; i++){\n    if(i > 0){\n      await sleep(1000)\n    }\n    console.log(new Date, i)\n  }\n  await sleep(1000)\n  console.log(new Date, i)\n})()\n```\n### 使用闭包应该注意的点\n\n- 由于闭包会使得函数中的变量都被保存在内存中，内存消耗很大，所以不能滥用闭包，否则会造成网页的性能问题，在IE中可能导致内存泄露。解决方法是，在退出函数之前，将不使用的局部变量全部删除。\n\n- 闭包会在父函数外部，改变父函数内部变量的值。所以，如果你把父函数当作对象（object）使用，把闭包当作它的公用方法（Public Method），把内部变量当作它的私有属性（private value），这时一定要小心，不要随便改变父函数内部变量的值\n\n### 闭包相关的文章\n\n- 司徒正美：https://www.cnblogs.com/rubylouvre/p/3345294.html\n- 阮一峰：http://www.ruanyifeng.com/blog/2009/08/learning_javascript_closures.html\n","slug":"closure","published":1,"updated":"2020-10-13T07:38:01.966Z","_id":"ckfl1j02z0014m4olea422n6n","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"什么是闭包\"><a href=\"#什么是闭包\" class=\"headerlink\" title=\"什么是闭包\"></a>什么是闭包</h3><p>&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;一个函数A中包含另一个函数B，函数B可以获取函数A中的变量，函数B就是闭包。通常情况下我们在子作用域中可以获取父作用域中的变量，但是我们想要从父作用域中获取子作用域中的变量该怎么办呢，这时候我们可以通过闭包，返回子作用域中的变量，这样我们就可以获取了。</p>\n<blockquote>\n<p>简述：闭包就是能够读取其他函数内部变量的函数。</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">let</span> a = <span class=\"hljs-number\">3</span>;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">father</span>(<span class=\"hljs-params\">x</span>)</span>&#123;<br>  <span class=\"hljs-keyword\">let</span> b = <span class=\"hljs-number\">1</span> + x;<br>  <span class=\"hljs-keyword\">return</span> (<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;<br>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'b'</span>, b) <span class=\"hljs-comment\">// b 6</span><br>  &#125;)()<br>&#125;<br><span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'a'</span>, a) <span class=\"hljs-comment\">// a 3</span><br>father(<span class=\"hljs-number\">5</span>)<br></code></pre></td></tr></table></figure>\n<p>这段代码中，我们就可以在全局作用域中获取函数作用域中的变量b了。</p>\n<h3 id=\"闭包实例\"><a href=\"#闭包实例\" class=\"headerlink\" title=\"闭包实例\"></a>闭包实例</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">5</span>; i++)&#123;<br>  setTimeout(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;<br>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>, i)<br>  &#125;, <span class=\"hljs-number\">1000</span>)<br>&#125;<br><span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>, i)<br></code></pre></td></tr></table></figure>\n<p>这是一道经典的面试题，控制台依次会输出什么，正确答案为：5，5，5，5，5，5假如用’-&gt;’表示为隔一秒钟，用’,’表示不间隔，那么怎么形容控制台的输出呢？答案为：5-&gt;5,5,5,5,5，是的，控制台会先输出一个5，之后过了一秒钟会连续输出五个5。<br>那么，让我们来分析一下，为什么并不是我们想要的输出：5，0，1，2，3，4呢？<br>在循环执行的过程中，几乎同时设置了5个定时器，这些定时器会在一秒之后触发，而循环之后的输出是立即执行的。<br>如果我们想让输出变为5-&gt;0,1,2,3,4，那应该怎么改写代码呢？</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">5</span>; i++)&#123;<br>  (<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">j</span>)</span>&#123;<br>    setTimeout(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;<br>      <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>, j)<br>    &#125;, <span class=\"hljs-number\">1000</span>)<br>  &#125;)(i)<br>&#125;<br><span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>, i)<br></code></pre></td></tr></table></figure>\n<p>或者可以用另一个办法</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">5</span>; i++)&#123;<br>  setTimeout(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">j</span>)</span>&#123;<br>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>, j)<br>  &#125;, <span class=\"hljs-number\">1000</span>, i)<br>&#125;<br><span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>, i)<br></code></pre></td></tr></table></figure>\n<p>还有一个最简单得办法</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">5</span>; i++)&#123;<br>  setTimeout(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;<br>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>, i)<br>  &#125;, <span class=\"hljs-number\">1000</span>)<br>&#125;<br><span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>, i)<br></code></pre></td></tr></table></figure>\n<p>以上的几个方法都可以达到我们想要得结果</p>\n<p>现在如果我们想要输出得结果为：0-&gt;1-&gt;2-&gt;3-&gt;4-&gt;5,那么我们应该怎么改写呢</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">5</span>; i++)&#123;<br>  (<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">j</span>)</span>&#123;<br>    setTimeout(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;<br>      <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>, j)<br>    &#125;, <span class=\"hljs-number\">1000</span> * j)<br>  &#125;)(i)<br>&#125;<br>setTimeout(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;<br>  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>, i)<br>&#125;, <span class=\"hljs-number\">1000</span> * i)<br></code></pre></td></tr></table></figure>\n<p>这是最简单直接得方法，我们还可以使用异步得Promise来完成</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> tasks = []<br><span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">5</span>; i++)&#123;<br>  (<span class=\"hljs-function\">(<span class=\"hljs-params\">j</span>) =&gt;</span> &#123;<br>    tasks.push(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve</span>) =&gt;</span> &#123;<br>      setTimeout(<span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> &#123;<br>        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>, j)<br>        resolve()<br>      &#125;, <span class=\"hljs-number\">1000</span> * j)<br>    &#125;))<br>  &#125;)(i)<br>&#125;<br><span class=\"hljs-built_in\">Promise</span>.all(tasks).then(<span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> &#123;<br>  setTimeout(<span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> &#123;<br>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>, i)<br>  &#125;, <span class=\"hljs-number\">1000</span>)<br>&#125;)<br></code></pre></td></tr></table></figure>\n\n<p>以上的代码可以简写为下面这种方式</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> tasks = []<br><span class=\"hljs-keyword\">const</span> output = <span class=\"hljs-function\">(<span class=\"hljs-params\">i</span>) =&gt;</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve</span>) =&gt;</span> &#123;<br>  setTimeout(<span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> &#123;<br>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>, i)<br>    resolve()<br>  &#125;, <span class=\"hljs-number\">1000</span> * i)<br> &#125;)<br><br><span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">5</span>; i++)&#123;<br>  tasks.push(output(i))<br>&#125;<br><span class=\"hljs-built_in\">Promise</span>.all(tasks).then(<span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> &#123;<br>  setTimeout(<span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> &#123;<br>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>, i)<br>  &#125;, <span class=\"hljs-number\">1000</span>)<br>&#125;)<br></code></pre></td></tr></table></figure>\n<p>还可以使用async/await来实现</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> sleep = <span class=\"hljs-function\">(<span class=\"hljs-params\">time</span>) =&gt;</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve</span>) =&gt;</span> &#123;<br>  setTimeout(resolve,time)<br>&#125;)<br>(<span class=\"hljs-keyword\">async</span> () =&gt; &#123;<br>  <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">5</span>; i++)&#123;<br>    <span class=\"hljs-keyword\">if</span>(i &gt; <span class=\"hljs-number\">0</span>)&#123;<br>      <span class=\"hljs-keyword\">await</span> sleep(<span class=\"hljs-number\">1000</span>)<br>    &#125;<br>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>, i)<br>  &#125;<br>  <span class=\"hljs-keyword\">await</span> sleep(<span class=\"hljs-number\">1000</span>)<br>  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>, i)<br>&#125;)()<br></code></pre></td></tr></table></figure>\n<h3 id=\"使用闭包应该注意的点\"><a href=\"#使用闭包应该注意的点\" class=\"headerlink\" title=\"使用闭包应该注意的点\"></a>使用闭包应该注意的点</h3><ul>\n<li><p>由于闭包会使得函数中的变量都被保存在内存中，内存消耗很大，所以不能滥用闭包，否则会造成网页的性能问题，在IE中可能导致内存泄露。解决方法是，在退出函数之前，将不使用的局部变量全部删除。</p>\n</li>\n<li><p>闭包会在父函数外部，改变父函数内部变量的值。所以，如果你把父函数当作对象（object）使用，把闭包当作它的公用方法（Public Method），把内部变量当作它的私有属性（private value），这时一定要小心，不要随便改变父函数内部变量的值</p>\n</li>\n</ul>\n<h3 id=\"闭包相关的文章\"><a href=\"#闭包相关的文章\" class=\"headerlink\" title=\"闭包相关的文章\"></a>闭包相关的文章</h3><ul>\n<li>司徒正美：<a href=\"https://www.cnblogs.com/rubylouvre/p/3345294.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/rubylouvre/p/3345294.html</a></li>\n<li>阮一峰：<a href=\"http://www.ruanyifeng.com/blog/2009/08/learning_javascript_closures.html\" target=\"_blank\" rel=\"noopener\">http://www.ruanyifeng.com/blog/2009/08/learning_javascript_closures.html</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"什么是闭包\"><a href=\"#什么是闭包\" class=\"headerlink\" title=\"什么是闭包\"></a>什么是闭包</h3><p>&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;一个函数A中包含另一个函数B，函数B可以获取函数A中的变量，函数B就是闭包。通常情况下我们在子作用域中可以获取父作用域中的变量，但是我们想要从父作用域中获取子作用域中的变量该怎么办呢，这时候我们可以通过闭包，返回子作用域中的变量，这样我们就可以获取了。</p>\n<blockquote>\n<p>简述：闭包就是能够读取其他函数内部变量的函数。</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">let</span> a = <span class=\"hljs-number\">3</span>;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">father</span>(<span class=\"hljs-params\">x</span>)</span>&#123;<br>  <span class=\"hljs-keyword\">let</span> b = <span class=\"hljs-number\">1</span> + x;<br>  <span class=\"hljs-keyword\">return</span> (<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;<br>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'b'</span>, b) <span class=\"hljs-comment\">// b 6</span><br>  &#125;)()<br>&#125;<br><span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'a'</span>, a) <span class=\"hljs-comment\">// a 3</span><br>father(<span class=\"hljs-number\">5</span>)<br></code></pre></td></tr></table></figure>\n<p>这段代码中，我们就可以在全局作用域中获取函数作用域中的变量b了。</p>\n<h3 id=\"闭包实例\"><a href=\"#闭包实例\" class=\"headerlink\" title=\"闭包实例\"></a>闭包实例</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">5</span>; i++)&#123;<br>  setTimeout(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;<br>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>, i)<br>  &#125;, <span class=\"hljs-number\">1000</span>)<br>&#125;<br><span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>, i)<br></code></pre></td></tr></table></figure>\n<p>这是一道经典的面试题，控制台依次会输出什么，正确答案为：5，5，5，5，5，5假如用’-&gt;’表示为隔一秒钟，用’,’表示不间隔，那么怎么形容控制台的输出呢？答案为：5-&gt;5,5,5,5,5，是的，控制台会先输出一个5，之后过了一秒钟会连续输出五个5。<br>那么，让我们来分析一下，为什么并不是我们想要的输出：5，0，1，2，3，4呢？<br>在循环执行的过程中，几乎同时设置了5个定时器，这些定时器会在一秒之后触发，而循环之后的输出是立即执行的。<br>如果我们想让输出变为5-&gt;0,1,2,3,4，那应该怎么改写代码呢？</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">5</span>; i++)&#123;<br>  (<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">j</span>)</span>&#123;<br>    setTimeout(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;<br>      <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>, j)<br>    &#125;, <span class=\"hljs-number\">1000</span>)<br>  &#125;)(i)<br>&#125;<br><span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>, i)<br></code></pre></td></tr></table></figure>\n<p>或者可以用另一个办法</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">5</span>; i++)&#123;<br>  setTimeout(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">j</span>)</span>&#123;<br>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>, j)<br>  &#125;, <span class=\"hljs-number\">1000</span>, i)<br>&#125;<br><span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>, i)<br></code></pre></td></tr></table></figure>\n<p>还有一个最简单得办法</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">5</span>; i++)&#123;<br>  setTimeout(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;<br>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>, i)<br>  &#125;, <span class=\"hljs-number\">1000</span>)<br>&#125;<br><span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>, i)<br></code></pre></td></tr></table></figure>\n<p>以上的几个方法都可以达到我们想要得结果</p>\n<p>现在如果我们想要输出得结果为：0-&gt;1-&gt;2-&gt;3-&gt;4-&gt;5,那么我们应该怎么改写呢</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">5</span>; i++)&#123;<br>  (<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">j</span>)</span>&#123;<br>    setTimeout(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;<br>      <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>, j)<br>    &#125;, <span class=\"hljs-number\">1000</span> * j)<br>  &#125;)(i)<br>&#125;<br>setTimeout(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;<br>  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>, i)<br>&#125;, <span class=\"hljs-number\">1000</span> * i)<br></code></pre></td></tr></table></figure>\n<p>这是最简单直接得方法，我们还可以使用异步得Promise来完成</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> tasks = []<br><span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">5</span>; i++)&#123;<br>  (<span class=\"hljs-function\">(<span class=\"hljs-params\">j</span>) =&gt;</span> &#123;<br>    tasks.push(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve</span>) =&gt;</span> &#123;<br>      setTimeout(<span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> &#123;<br>        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>, j)<br>        resolve()<br>      &#125;, <span class=\"hljs-number\">1000</span> * j)<br>    &#125;))<br>  &#125;)(i)<br>&#125;<br><span class=\"hljs-built_in\">Promise</span>.all(tasks).then(<span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> &#123;<br>  setTimeout(<span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> &#123;<br>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>, i)<br>  &#125;, <span class=\"hljs-number\">1000</span>)<br>&#125;)<br></code></pre></td></tr></table></figure>\n\n<p>以上的代码可以简写为下面这种方式</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> tasks = []<br><span class=\"hljs-keyword\">const</span> output = <span class=\"hljs-function\">(<span class=\"hljs-params\">i</span>) =&gt;</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve</span>) =&gt;</span> &#123;<br>  setTimeout(<span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> &#123;<br>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>, i)<br>    resolve()<br>  &#125;, <span class=\"hljs-number\">1000</span> * i)<br> &#125;)<br><br><span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">5</span>; i++)&#123;<br>  tasks.push(output(i))<br>&#125;<br><span class=\"hljs-built_in\">Promise</span>.all(tasks).then(<span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> &#123;<br>  setTimeout(<span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> &#123;<br>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>, i)<br>  &#125;, <span class=\"hljs-number\">1000</span>)<br>&#125;)<br></code></pre></td></tr></table></figure>\n<p>还可以使用async/await来实现</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> sleep = <span class=\"hljs-function\">(<span class=\"hljs-params\">time</span>) =&gt;</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve</span>) =&gt;</span> &#123;<br>  setTimeout(resolve,time)<br>&#125;)<br>(<span class=\"hljs-keyword\">async</span> () =&gt; &#123;<br>  <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">5</span>; i++)&#123;<br>    <span class=\"hljs-keyword\">if</span>(i &gt; <span class=\"hljs-number\">0</span>)&#123;<br>      <span class=\"hljs-keyword\">await</span> sleep(<span class=\"hljs-number\">1000</span>)<br>    &#125;<br>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>, i)<br>  &#125;<br>  <span class=\"hljs-keyword\">await</span> sleep(<span class=\"hljs-number\">1000</span>)<br>  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>, i)<br>&#125;)()<br></code></pre></td></tr></table></figure>\n<h3 id=\"使用闭包应该注意的点\"><a href=\"#使用闭包应该注意的点\" class=\"headerlink\" title=\"使用闭包应该注意的点\"></a>使用闭包应该注意的点</h3><ul>\n<li><p>由于闭包会使得函数中的变量都被保存在内存中，内存消耗很大，所以不能滥用闭包，否则会造成网页的性能问题，在IE中可能导致内存泄露。解决方法是，在退出函数之前，将不使用的局部变量全部删除。</p>\n</li>\n<li><p>闭包会在父函数外部，改变父函数内部变量的值。所以，如果你把父函数当作对象（object）使用，把闭包当作它的公用方法（Public Method），把内部变量当作它的私有属性（private value），这时一定要小心，不要随便改变父函数内部变量的值</p>\n</li>\n</ul>\n<h3 id=\"闭包相关的文章\"><a href=\"#闭包相关的文章\" class=\"headerlink\" title=\"闭包相关的文章\"></a>闭包相关的文章</h3><ul>\n<li>司徒正美：<a href=\"https://www.cnblogs.com/rubylouvre/p/3345294.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/rubylouvre/p/3345294.html</a></li>\n<li>阮一峰：<a href=\"http://www.ruanyifeng.com/blog/2009/08/learning_javascript_closures.html\" target=\"_blank\" rel=\"noopener\">http://www.ruanyifeng.com/blog/2009/08/learning_javascript_closures.html</a></li>\n</ul>\n"},{"title":"常见的算法题","date":"2020-05-09T07:35:28.000Z","_content":"### 1、输入是以数字组成的数组，例如 arr = [1, -2, 3, 4, -9, 6]。</br>任务是：找出所有项的和最大的 arr 数组的连续子数组。</br>写出函数 getMaxSubSum(arr)，用其找出并返回最大和。</br>例如：\n```js\ngetMaxSubSum([-1, 2, 3, -9]) == 5\ngetMaxSubSum([2, -1, 2, 3, -9]) == 6\ngetMaxSubSum([-1, 2, 3, -9, 11]) == 11\ngetMaxSubSum([-2, -1, 1, 2]) == 3\ngetMaxSubSum([100, -9, 2, -3, 5]) == 100\ngetMaxSubSum([1, 2, 3]) == 6\n```\n- 方案一：需要循环两次\n```js\nfunction getMaxSubSum(arr) {\n  let maxSum = 0;\n  for (let i = 0; i < arr.length; i++ ){\n    let partSum = 0;\n    for (let j = i; j < arr.length; j++){\n      partSum += arr[j]\n      maxSum = Math.max(maxSum, partSum)\n    }\n  }\n  return maxSum\n}\n```\n- 方案二：只需要循环一次，最优解\n```js\nfunction getMaxSubSum(arr) {\n  let maxSum = 0;\n  let partSum = 0;\n  for (let item of arr){\n    partSum += item\n    maxSum = Math.max(maxSum, partSum)\n    if (partSum < 0) partSum = 0\n  }\n  return maxSum\n}\n```\n\n### 2、数组去重\n```js\nlet arr = [\"Hare\", \"Krishna\", \"Hare\", \"Krishna\",\"Krishna\", \"Krishna\", \"Hare\", \"Hare\", \":-O\", 3, 11, 20, 11, 0, 3]\nunique(arr) // [\"Hare\", \"Krishna\", \":-O\", 3, 11, 20, 0]\n```\n- 方案一：(因为for循环对数组的每一项都进行了校验，所以仅适用于小型数组)\n```js\nfunction unique(arr) {\n  let result = []\n  for (let item of arr) {\n    if(!result.includes(item)){\n      result.push(item)\n    }\n  }\n  return result\n}\n```\n- 方案二：\n```js\nfunction unique(arr) {\n  return Array.form(new Set(arr))\n}\n```\n\n### 3、实现一个函数,可以计算出x的n次方\n- 方案一：\n```js\nfunction pow(x, n) {\n  let result = 1\n  for (let i = 0; i < n; i++){\n    result *= x\n  }\n  return result\n}\npow(2, 3) //8\n```\n- 方案二：\n```js\nfunction pow(x, n) {\n  if(n == 1){\n    return x\n  }else{\n    return x * pow(x, n - 1)\n  }\n}\npow(2, 3) //8\n```\n\n### 4、写一个mySetInterval(fn, a, b)，每次间隔 a, a + b, a + 2b, ... , a + nb 的时间, 然后写一个myClear，停止上面的 mySetInterval。\n\n```js\nfunction mySetInterval(fn, a, b){\n  this.a = a\n  this.b = b\n  this.fn = fn\n  this.time = 0\n  this.timer = -1\n  this.start = () => {\n    this.timer = setInterval(function(){\n      fn()\n      this.time ++\n      this.start()\n      console.log(this.a + this.time * this.b)\n    }, this.a + this.time * this.b)\n  }\n  this.stop = () => {\n    clearInterval(this.timer)\n  }\n}\nfunction print(){\n  console.log('123')\n}\nconst my = new mySetInterval(print, 1000, 2000)\nmy.start()\nmy.stop()\n```\n\n### 5、计算任意位数的两个正整数字符串之和\n\n- 方法一：\n\n```js\nfunction add(a, b){\n  let number1, number2, MAX_LENGTH, result = []\n  if(a.length > b.length){\n    number1 = a.split('').reverse()\n    number2 = b.split('').reverse()\n    MAX_LENGTH = a.length\n  }else {\n    number1 = b.split('').reverse()\n    number2 = a.split('').reverse()\n    MAX_LENGTH = b.length\n  }\n  for (let i = 0;i < MAX_LENGTH; i++){\n    let sum \n    if(number2[i]){\n      sum = (+number1[i]) + (+number2[i])\n    }else {\n      sum = (+number1[i])\n    }\n    if(result[i]){\n      sum += 1\n    }\n    result[i] = String(sum % 10)\n    if(sum >= 10){\n      result[i+1] = '1'\n    }\n  }\n  return result.reverse().join('')\n}\n```\n\n- 方法二：\n\n```js\nfunction add(a, b){\n  let result = '', c = 0\n  a = a.split('')\n  b = b.split('')\n  while(a.length || b.length || c){\n    c += ~~a.pop() + ~~b.pop()\n    result = c % 10 + result\n    c = c > 9\n  }\n  return result\n}\n```\n\n### 6、给定一个对象，存储了世界富豪的名字(key)和资产(value)，求排行榜（按资产从大到小的富豪名字数组）。譬如输入{bill: 500, sam: 480, roark: 501}，返回['roark', 'bill', 'sam']\n\n```js\nfunction richRank(obj){\n  let valueSort = Object.values(obj).sort((a,b) => b - a)\n  let richName = []\n  for(let i = 0; i < valueSort.length; i++){\n    Object.keys(obj).map(item => {\n      if(valueSort[i] == obj[item]){\n        richName.push(item)\n      }\n    })\n  }\n  return [...new Set(richName)]\n}\n\nlet obj ={bill: 500, sam: 480, roark: 501, dave: 501}\nconsole.log(richRank(obj))\n```\n\n### 7、实现一个函数，判断输入的是否为回文字符串\n\n- 方法一：\n```js\nfunction plalindrome(str){\n  if (typeof str !== 'string') return false\n  return str.split('').reverse().join('') === str\n}\n```\n\n- 方法二：\n```js\nfunction plalindrome(str){\n  if(typeof str !== 'string') return false\n  let i = 0, j = str.length - 1\n  while(i < j){\n    if(str.charAt(i) !== str.charAt(j)) return false\n    i++\n    j--\n  }\n  return true\n}\n```\n\n### 8、请写一个抽奖程序，已有参与抽奖的员工工号组成的数组staffIds。（规则：同一员工不可重复中奖，每轮执行抽奖程序，入参是本轮要抽取的中奖人数n，将中奖人工号打印出来）\n\n```js\nfunction shuffle(arr, n){\n  for (let i = arr.length; i > 0; i--){\n    const {index} = randomItem(arr, 0, i);\n    [arr[index], arr[i-1]] = [arr[i-1], arr[index]]\n  }\n  return  arr.slice(0, n)\n}\nfunction randomItem(arr, from = 0, to = arr.length){\n  const index = random(from, to)\n  return {\n    index,\n    value: arr[index]\n  }\n}\nfunction random(m, n){\n  return m + Math.floor(Math.random() * n)\n}\n```\n### 9、给出一个32位有符号的整数，你需要将这个整数中每位上的数字进行反转。如：123，输出321；-130，输出：-31；数值范围为[−2 31,  2 31 − 1]\n\n```js\nfunction reverse(x){\n  let str = x + ''\n  let result = ''\n  if(x > 0){\n    for(let i = str.length - 1; i >= 0; i--){\n      result += str[i]\n    }\n  }else{\n    for(let i = str.length -1; i > 0; i--){\n      result += str[i]\n    }\n    result = -result\n  }\n  if(result < Math.pow(-2, 31) || result > Math.pow(2, 31) - 1){\n    return 0\n  }\n  return result\n}\n```\n### 10、冒泡排序\n\n```js\nfunction bubbleSort(arr){\n  let length = arr.length\n  for(let i = 0; i < length -1; i++){\n    for (let j = 0; j < length-1-i; j++){\n      if(arr[j] > arr[j+1]){\n        let temp = arr[j+1]\n        arr[j+1] = arr[j]\n        arr[j] = temp\n      }\n    }\n  }\n  return arr\n}\n```\n### 11、快速排序\n\n```js\nfunction quickSort(arr){\n  if(arr.length <= 1) return arr\n  let pivotIndex = Math.floor(arr.length/2)\n  let pivot = arr.splice(pivotIndex, 1)[0]\n  let left = []\n  let right = []\n  for(let i = 0; i < arr.length; i++){\n    if(arr[i] < pivot){\n      left.push(arr[i])\n    }else{\n      right.push(arr[i])\n    }\n  }\n  return quickSort(left).concat([pivot], quickSort(right))\n}\n```\n\n### 12、找出数组中两项之和为 target 的下标\n\n```js\nfunction twoSum(nums, target){\n  const comp = {}\n  for(let i = 0; i < nums.length; i++){\n    if(comp[target - nums[i]] >= 0){\n      return [comp[target - nums[i]], i]\n    }\n    comp[nums[i]] = i\n  }\n}\n```\n\n### 13、实现(5).add(3).minus(2)功能\n\n```js\nNumber.prototype.add = function(n){\n  return this.valueOf() + n\n}\nNumber.prototype.minus = function(n){\n  return this.valueOf() - n\n}\n```","source":"_posts/arithmetic1.md","raw":"---\ntitle: 常见的算法题\ndate: 2020-05-09 15:35:28\ncategories:\n- 前端技术\ntags:\n- 算法\n---\n### 1、输入是以数字组成的数组，例如 arr = [1, -2, 3, 4, -9, 6]。</br>任务是：找出所有项的和最大的 arr 数组的连续子数组。</br>写出函数 getMaxSubSum(arr)，用其找出并返回最大和。</br>例如：\n```js\ngetMaxSubSum([-1, 2, 3, -9]) == 5\ngetMaxSubSum([2, -1, 2, 3, -9]) == 6\ngetMaxSubSum([-1, 2, 3, -9, 11]) == 11\ngetMaxSubSum([-2, -1, 1, 2]) == 3\ngetMaxSubSum([100, -9, 2, -3, 5]) == 100\ngetMaxSubSum([1, 2, 3]) == 6\n```\n- 方案一：需要循环两次\n```js\nfunction getMaxSubSum(arr) {\n  let maxSum = 0;\n  for (let i = 0; i < arr.length; i++ ){\n    let partSum = 0;\n    for (let j = i; j < arr.length; j++){\n      partSum += arr[j]\n      maxSum = Math.max(maxSum, partSum)\n    }\n  }\n  return maxSum\n}\n```\n- 方案二：只需要循环一次，最优解\n```js\nfunction getMaxSubSum(arr) {\n  let maxSum = 0;\n  let partSum = 0;\n  for (let item of arr){\n    partSum += item\n    maxSum = Math.max(maxSum, partSum)\n    if (partSum < 0) partSum = 0\n  }\n  return maxSum\n}\n```\n\n### 2、数组去重\n```js\nlet arr = [\"Hare\", \"Krishna\", \"Hare\", \"Krishna\",\"Krishna\", \"Krishna\", \"Hare\", \"Hare\", \":-O\", 3, 11, 20, 11, 0, 3]\nunique(arr) // [\"Hare\", \"Krishna\", \":-O\", 3, 11, 20, 0]\n```\n- 方案一：(因为for循环对数组的每一项都进行了校验，所以仅适用于小型数组)\n```js\nfunction unique(arr) {\n  let result = []\n  for (let item of arr) {\n    if(!result.includes(item)){\n      result.push(item)\n    }\n  }\n  return result\n}\n```\n- 方案二：\n```js\nfunction unique(arr) {\n  return Array.form(new Set(arr))\n}\n```\n\n### 3、实现一个函数,可以计算出x的n次方\n- 方案一：\n```js\nfunction pow(x, n) {\n  let result = 1\n  for (let i = 0; i < n; i++){\n    result *= x\n  }\n  return result\n}\npow(2, 3) //8\n```\n- 方案二：\n```js\nfunction pow(x, n) {\n  if(n == 1){\n    return x\n  }else{\n    return x * pow(x, n - 1)\n  }\n}\npow(2, 3) //8\n```\n\n### 4、写一个mySetInterval(fn, a, b)，每次间隔 a, a + b, a + 2b, ... , a + nb 的时间, 然后写一个myClear，停止上面的 mySetInterval。\n\n```js\nfunction mySetInterval(fn, a, b){\n  this.a = a\n  this.b = b\n  this.fn = fn\n  this.time = 0\n  this.timer = -1\n  this.start = () => {\n    this.timer = setInterval(function(){\n      fn()\n      this.time ++\n      this.start()\n      console.log(this.a + this.time * this.b)\n    }, this.a + this.time * this.b)\n  }\n  this.stop = () => {\n    clearInterval(this.timer)\n  }\n}\nfunction print(){\n  console.log('123')\n}\nconst my = new mySetInterval(print, 1000, 2000)\nmy.start()\nmy.stop()\n```\n\n### 5、计算任意位数的两个正整数字符串之和\n\n- 方法一：\n\n```js\nfunction add(a, b){\n  let number1, number2, MAX_LENGTH, result = []\n  if(a.length > b.length){\n    number1 = a.split('').reverse()\n    number2 = b.split('').reverse()\n    MAX_LENGTH = a.length\n  }else {\n    number1 = b.split('').reverse()\n    number2 = a.split('').reverse()\n    MAX_LENGTH = b.length\n  }\n  for (let i = 0;i < MAX_LENGTH; i++){\n    let sum \n    if(number2[i]){\n      sum = (+number1[i]) + (+number2[i])\n    }else {\n      sum = (+number1[i])\n    }\n    if(result[i]){\n      sum += 1\n    }\n    result[i] = String(sum % 10)\n    if(sum >= 10){\n      result[i+1] = '1'\n    }\n  }\n  return result.reverse().join('')\n}\n```\n\n- 方法二：\n\n```js\nfunction add(a, b){\n  let result = '', c = 0\n  a = a.split('')\n  b = b.split('')\n  while(a.length || b.length || c){\n    c += ~~a.pop() + ~~b.pop()\n    result = c % 10 + result\n    c = c > 9\n  }\n  return result\n}\n```\n\n### 6、给定一个对象，存储了世界富豪的名字(key)和资产(value)，求排行榜（按资产从大到小的富豪名字数组）。譬如输入{bill: 500, sam: 480, roark: 501}，返回['roark', 'bill', 'sam']\n\n```js\nfunction richRank(obj){\n  let valueSort = Object.values(obj).sort((a,b) => b - a)\n  let richName = []\n  for(let i = 0; i < valueSort.length; i++){\n    Object.keys(obj).map(item => {\n      if(valueSort[i] == obj[item]){\n        richName.push(item)\n      }\n    })\n  }\n  return [...new Set(richName)]\n}\n\nlet obj ={bill: 500, sam: 480, roark: 501, dave: 501}\nconsole.log(richRank(obj))\n```\n\n### 7、实现一个函数，判断输入的是否为回文字符串\n\n- 方法一：\n```js\nfunction plalindrome(str){\n  if (typeof str !== 'string') return false\n  return str.split('').reverse().join('') === str\n}\n```\n\n- 方法二：\n```js\nfunction plalindrome(str){\n  if(typeof str !== 'string') return false\n  let i = 0, j = str.length - 1\n  while(i < j){\n    if(str.charAt(i) !== str.charAt(j)) return false\n    i++\n    j--\n  }\n  return true\n}\n```\n\n### 8、请写一个抽奖程序，已有参与抽奖的员工工号组成的数组staffIds。（规则：同一员工不可重复中奖，每轮执行抽奖程序，入参是本轮要抽取的中奖人数n，将中奖人工号打印出来）\n\n```js\nfunction shuffle(arr, n){\n  for (let i = arr.length; i > 0; i--){\n    const {index} = randomItem(arr, 0, i);\n    [arr[index], arr[i-1]] = [arr[i-1], arr[index]]\n  }\n  return  arr.slice(0, n)\n}\nfunction randomItem(arr, from = 0, to = arr.length){\n  const index = random(from, to)\n  return {\n    index,\n    value: arr[index]\n  }\n}\nfunction random(m, n){\n  return m + Math.floor(Math.random() * n)\n}\n```\n### 9、给出一个32位有符号的整数，你需要将这个整数中每位上的数字进行反转。如：123，输出321；-130，输出：-31；数值范围为[−2 31,  2 31 − 1]\n\n```js\nfunction reverse(x){\n  let str = x + ''\n  let result = ''\n  if(x > 0){\n    for(let i = str.length - 1; i >= 0; i--){\n      result += str[i]\n    }\n  }else{\n    for(let i = str.length -1; i > 0; i--){\n      result += str[i]\n    }\n    result = -result\n  }\n  if(result < Math.pow(-2, 31) || result > Math.pow(2, 31) - 1){\n    return 0\n  }\n  return result\n}\n```\n### 10、冒泡排序\n\n```js\nfunction bubbleSort(arr){\n  let length = arr.length\n  for(let i = 0; i < length -1; i++){\n    for (let j = 0; j < length-1-i; j++){\n      if(arr[j] > arr[j+1]){\n        let temp = arr[j+1]\n        arr[j+1] = arr[j]\n        arr[j] = temp\n      }\n    }\n  }\n  return arr\n}\n```\n### 11、快速排序\n\n```js\nfunction quickSort(arr){\n  if(arr.length <= 1) return arr\n  let pivotIndex = Math.floor(arr.length/2)\n  let pivot = arr.splice(pivotIndex, 1)[0]\n  let left = []\n  let right = []\n  for(let i = 0; i < arr.length; i++){\n    if(arr[i] < pivot){\n      left.push(arr[i])\n    }else{\n      right.push(arr[i])\n    }\n  }\n  return quickSort(left).concat([pivot], quickSort(right))\n}\n```\n\n### 12、找出数组中两项之和为 target 的下标\n\n```js\nfunction twoSum(nums, target){\n  const comp = {}\n  for(let i = 0; i < nums.length; i++){\n    if(comp[target - nums[i]] >= 0){\n      return [comp[target - nums[i]], i]\n    }\n    comp[nums[i]] = i\n  }\n}\n```\n\n### 13、实现(5).add(3).minus(2)功能\n\n```js\nNumber.prototype.add = function(n){\n  return this.valueOf() + n\n}\nNumber.prototype.minus = function(n){\n  return this.valueOf() - n\n}\n```","slug":"arithmetic1","published":1,"updated":"2022-05-14T12:01:31.751Z","_id":"ckfl1j02z0017m4olhp3t6bvd","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"1、输入是以数字组成的数组，例如-arr-1-2-3-4-9-6-。任务是：找出所有项的和最大的-arr-数组的连续子数组。写出函数-getMaxSubSum-arr-，用其找出并返回最大和。例如：\"><a href=\"#1、输入是以数字组成的数组，例如-arr-1-2-3-4-9-6-。任务是：找出所有项的和最大的-arr-数组的连续子数组。写出函数-getMaxSubSum-arr-，用其找出并返回最大和。例如：\" class=\"headerlink\" title=\"1、输入是以数字组成的数组，例如 arr = [1, -2, 3, 4, -9, 6]。任务是：找出所有项的和最大的 arr 数组的连续子数组。写出函数 getMaxSubSum(arr)，用其找出并返回最大和。例如：\"></a>1、输入是以数字组成的数组，例如 arr = [1, -2, 3, 4, -9, 6]。</br>任务是：找出所有项的和最大的 arr 数组的连续子数组。</br>写出函数 getMaxSubSum(arr)，用其找出并返回最大和。</br>例如：</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">getMaxSubSum([<span class=\"hljs-number\">-1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">-9</span>]) == <span class=\"hljs-number\">5</span><br>getMaxSubSum([<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">-1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">-9</span>]) == <span class=\"hljs-number\">6</span><br>getMaxSubSum([<span class=\"hljs-number\">-1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">-9</span>, <span class=\"hljs-number\">11</span>]) == <span class=\"hljs-number\">11</span><br>getMaxSubSum([<span class=\"hljs-number\">-2</span>, <span class=\"hljs-number\">-1</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>]) == <span class=\"hljs-number\">3</span><br>getMaxSubSum([<span class=\"hljs-number\">100</span>, <span class=\"hljs-number\">-9</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">-3</span>, <span class=\"hljs-number\">5</span>]) == <span class=\"hljs-number\">100</span><br>getMaxSubSum([<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>]) == <span class=\"hljs-number\">6</span><br></code></pre></td></tr></table></figure>\n<ul>\n<li>方案一：需要循环两次<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">getMaxSubSum</span>(<span class=\"hljs-params\">arr</span>) </span>&#123;<br>  <span class=\"hljs-keyword\">let</span> maxSum = <span class=\"hljs-number\">0</span>;<br>  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; arr.length; i++ )&#123;<br>    <span class=\"hljs-keyword\">let</span> partSum = <span class=\"hljs-number\">0</span>;<br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> j = i; j &lt; arr.length; j++)&#123;<br>      partSum += arr[j]<br>      maxSum = <span class=\"hljs-built_in\">Math</span>.max(maxSum, partSum)<br>    &#125;<br>  &#125;<br>  <span class=\"hljs-keyword\">return</span> maxSum<br>&#125;<br></code></pre></td></tr></table></figure></li>\n<li>方案二：只需要循环一次，最优解<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">getMaxSubSum</span>(<span class=\"hljs-params\">arr</span>) </span>&#123;<br>  <span class=\"hljs-keyword\">let</span> maxSum = <span class=\"hljs-number\">0</span>;<br>  <span class=\"hljs-keyword\">let</span> partSum = <span class=\"hljs-number\">0</span>;<br>  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> item <span class=\"hljs-keyword\">of</span> arr)&#123;<br>    partSum += item<br>    maxSum = <span class=\"hljs-built_in\">Math</span>.max(maxSum, partSum)<br>    <span class=\"hljs-keyword\">if</span> (partSum &lt; <span class=\"hljs-number\">0</span>) partSum = <span class=\"hljs-number\">0</span><br>  &#125;<br>  <span class=\"hljs-keyword\">return</span> maxSum<br>&#125;<br></code></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h3 id=\"2、数组去重\"><a href=\"#2、数组去重\" class=\"headerlink\" title=\"2、数组去重\"></a>2、数组去重</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">let</span> arr = [<span class=\"hljs-string\">\"Hare\"</span>, <span class=\"hljs-string\">\"Krishna\"</span>, <span class=\"hljs-string\">\"Hare\"</span>, <span class=\"hljs-string\">\"Krishna\"</span>,<span class=\"hljs-string\">\"Krishna\"</span>, <span class=\"hljs-string\">\"Krishna\"</span>, <span class=\"hljs-string\">\"Hare\"</span>, <span class=\"hljs-string\">\"Hare\"</span>, <span class=\"hljs-string\">\":-O\"</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">11</span>, <span class=\"hljs-number\">20</span>, <span class=\"hljs-number\">11</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">3</span>]<br>unique(arr) <span class=\"hljs-comment\">// [\"Hare\", \"Krishna\", \":-O\", 3, 11, 20, 0]</span><br></code></pre></td></tr></table></figure>\n<ul>\n<li>方案一：(因为for循环对数组的每一项都进行了校验，所以仅适用于小型数组)<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">unique</span>(<span class=\"hljs-params\">arr</span>) </span>&#123;<br>  <span class=\"hljs-keyword\">let</span> result = []<br>  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> item <span class=\"hljs-keyword\">of</span> arr) &#123;<br>    <span class=\"hljs-keyword\">if</span>(!result.includes(item))&#123;<br>      result.push(item)<br>    &#125;<br>  &#125;<br>  <span class=\"hljs-keyword\">return</span> result<br>&#125;<br></code></pre></td></tr></table></figure></li>\n<li>方案二：<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">unique</span>(<span class=\"hljs-params\">arr</span>) </span>&#123;<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">Array</span>.form(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Set</span>(arr))<br>&#125;<br></code></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h3 id=\"3、实现一个函数-可以计算出x的n次方\"><a href=\"#3、实现一个函数-可以计算出x的n次方\" class=\"headerlink\" title=\"3、实现一个函数,可以计算出x的n次方\"></a>3、实现一个函数,可以计算出x的n次方</h3><ul>\n<li>方案一：<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">pow</span>(<span class=\"hljs-params\">x, n</span>) </span>&#123;<br>  <span class=\"hljs-keyword\">let</span> result = <span class=\"hljs-number\">1</span><br>  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; n; i++)&#123;<br>    result *= x<br>  &#125;<br>  <span class=\"hljs-keyword\">return</span> result<br>&#125;<br>pow(<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>) <span class=\"hljs-comment\">//8</span><br></code></pre></td></tr></table></figure></li>\n<li>方案二：<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">pow</span>(<span class=\"hljs-params\">x, n</span>) </span>&#123;<br>  <span class=\"hljs-keyword\">if</span>(n == <span class=\"hljs-number\">1</span>)&#123;<br>    <span class=\"hljs-keyword\">return</span> x<br>  &#125;<span class=\"hljs-keyword\">else</span>&#123;<br>    <span class=\"hljs-keyword\">return</span> x * pow(x, n - <span class=\"hljs-number\">1</span>)<br>  &#125;<br>&#125;<br>pow(<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>) <span class=\"hljs-comment\">//8</span><br></code></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h3 id=\"4、写一个mySetInterval-fn-a-b-，每次间隔-a-a-b-a-2b-…-a-nb-的时间-然后写一个myClear，停止上面的-mySetInterval。\"><a href=\"#4、写一个mySetInterval-fn-a-b-，每次间隔-a-a-b-a-2b-…-a-nb-的时间-然后写一个myClear，停止上面的-mySetInterval。\" class=\"headerlink\" title=\"4、写一个mySetInterval(fn, a, b)，每次间隔 a, a + b, a + 2b, … , a + nb 的时间, 然后写一个myClear，停止上面的 mySetInterval。\"></a>4、写一个mySetInterval(fn, a, b)，每次间隔 a, a + b, a + 2b, … , a + nb 的时间, 然后写一个myClear，停止上面的 mySetInterval。</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">mySetInterval</span>(<span class=\"hljs-params\">fn, a, b</span>)</span>&#123;<br>  <span class=\"hljs-keyword\">this</span>.a = a<br>  <span class=\"hljs-keyword\">this</span>.b = b<br>  <span class=\"hljs-keyword\">this</span>.fn = fn<br>  <span class=\"hljs-keyword\">this</span>.time = <span class=\"hljs-number\">0</span><br>  <span class=\"hljs-keyword\">this</span>.timer = <span class=\"hljs-number\">-1</span><br>  <span class=\"hljs-keyword\">this</span>.start = <span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> &#123;<br>    <span class=\"hljs-keyword\">this</span>.timer = setInterval(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;<br>      fn()<br>      <span class=\"hljs-keyword\">this</span>.time ++<br>      <span class=\"hljs-keyword\">this</span>.start()<br>      <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-keyword\">this</span>.a + <span class=\"hljs-keyword\">this</span>.time * <span class=\"hljs-keyword\">this</span>.b)<br>    &#125;, <span class=\"hljs-keyword\">this</span>.a + <span class=\"hljs-keyword\">this</span>.time * <span class=\"hljs-keyword\">this</span>.b)<br>  &#125;<br>  <span class=\"hljs-keyword\">this</span>.stop = <span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> &#123;<br>    clearInterval(<span class=\"hljs-keyword\">this</span>.timer)<br>  &#125;<br>&#125;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">print</span>(<span class=\"hljs-params\"></span>)</span>&#123;<br>  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'123'</span>)<br>&#125;<br><span class=\"hljs-keyword\">const</span> my = <span class=\"hljs-keyword\">new</span> mySetInterval(print, <span class=\"hljs-number\">1000</span>, <span class=\"hljs-number\">2000</span>)<br>my.start()<br>my.stop()<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"5、计算任意位数的两个正整数字符串之和\"><a href=\"#5、计算任意位数的两个正整数字符串之和\" class=\"headerlink\" title=\"5、计算任意位数的两个正整数字符串之和\"></a>5、计算任意位数的两个正整数字符串之和</h3><ul>\n<li>方法一：</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">add</span>(<span class=\"hljs-params\">a, b</span>)</span>&#123;<br>  <span class=\"hljs-keyword\">let</span> number1, number2, MAX_LENGTH, result = []<br>  <span class=\"hljs-keyword\">if</span>(a.length &gt; b.length)&#123;<br>    number1 = a.split(<span class=\"hljs-string\">''</span>).reverse()<br>    number2 = b.split(<span class=\"hljs-string\">''</span>).reverse()<br>    MAX_LENGTH = a.length<br>  &#125;<span class=\"hljs-keyword\">else</span> &#123;<br>    number1 = b.split(<span class=\"hljs-string\">''</span>).reverse()<br>    number2 = a.split(<span class=\"hljs-string\">''</span>).reverse()<br>    MAX_LENGTH = b.length<br>  &#125;<br>  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>;i &lt; MAX_LENGTH; i++)&#123;<br>    <span class=\"hljs-keyword\">let</span> sum <br>    <span class=\"hljs-keyword\">if</span>(number2[i])&#123;<br>      sum = (+number1[i]) + (+number2[i])<br>    &#125;<span class=\"hljs-keyword\">else</span> &#123;<br>      sum = (+number1[i])<br>    &#125;<br>    <span class=\"hljs-keyword\">if</span>(result[i])&#123;<br>      sum += <span class=\"hljs-number\">1</span><br>    &#125;<br>    result[i] = <span class=\"hljs-built_in\">String</span>(sum % <span class=\"hljs-number\">10</span>)<br>    <span class=\"hljs-keyword\">if</span>(sum &gt;= <span class=\"hljs-number\">10</span>)&#123;<br>      result[i+<span class=\"hljs-number\">1</span>] = <span class=\"hljs-string\">'1'</span><br>    &#125;<br>  &#125;<br>  <span class=\"hljs-keyword\">return</span> result.reverse().join(<span class=\"hljs-string\">''</span>)<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>方法二：</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">add</span>(<span class=\"hljs-params\">a, b</span>)</span>&#123;<br>  <span class=\"hljs-keyword\">let</span> result = <span class=\"hljs-string\">''</span>, c = <span class=\"hljs-number\">0</span><br>  a = a.split(<span class=\"hljs-string\">''</span>)<br>  b = b.split(<span class=\"hljs-string\">''</span>)<br>  <span class=\"hljs-keyword\">while</span>(a.length || b.length || c)&#123;<br>    c += ~~a.pop() + ~~b.pop()<br>    result = c % <span class=\"hljs-number\">10</span> + result<br>    c = c &gt; <span class=\"hljs-number\">9</span><br>  &#125;<br>  <span class=\"hljs-keyword\">return</span> result<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"6、给定一个对象，存储了世界富豪的名字-key-和资产-value-，求排行榜（按资产从大到小的富豪名字数组）。譬如输入-bill-500-sam-480-roark-501-，返回-‘roark’-‘bill’-‘sam’\"><a href=\"#6、给定一个对象，存储了世界富豪的名字-key-和资产-value-，求排行榜（按资产从大到小的富豪名字数组）。譬如输入-bill-500-sam-480-roark-501-，返回-‘roark’-‘bill’-‘sam’\" class=\"headerlink\" title=\"6、给定一个对象，存储了世界富豪的名字(key)和资产(value)，求排行榜（按资产从大到小的富豪名字数组）。譬如输入{bill: 500, sam: 480, roark: 501}，返回[‘roark’, ‘bill’, ‘sam’]\"></a>6、给定一个对象，存储了世界富豪的名字(key)和资产(value)，求排行榜（按资产从大到小的富豪名字数组）。譬如输入{bill: 500, sam: 480, roark: 501}，返回[‘roark’, ‘bill’, ‘sam’]</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">richRank</span>(<span class=\"hljs-params\">obj</span>)</span>&#123;<br>  <span class=\"hljs-keyword\">let</span> valueSort = <span class=\"hljs-built_in\">Object</span>.values(obj).sort(<span class=\"hljs-function\">(<span class=\"hljs-params\">a,b</span>) =&gt;</span> b - a)<br>  <span class=\"hljs-keyword\">let</span> richName = []<br>  <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; valueSort.length; i++)&#123;<br>    <span class=\"hljs-built_in\">Object</span>.keys(obj).map(<span class=\"hljs-function\"><span class=\"hljs-params\">item</span> =&gt;</span> &#123;<br>      <span class=\"hljs-keyword\">if</span>(valueSort[i] == obj[item])&#123;<br>        richName.push(item)<br>      &#125;<br>    &#125;)<br>  &#125;<br>  <span class=\"hljs-keyword\">return</span> [...new <span class=\"hljs-built_in\">Set</span>(richName)]<br>&#125;<br><br><span class=\"hljs-keyword\">let</span> obj =&#123;<span class=\"hljs-attr\">bill</span>: <span class=\"hljs-number\">500</span>, <span class=\"hljs-attr\">sam</span>: <span class=\"hljs-number\">480</span>, <span class=\"hljs-attr\">roark</span>: <span class=\"hljs-number\">501</span>, <span class=\"hljs-attr\">dave</span>: <span class=\"hljs-number\">501</span>&#125;<br><span class=\"hljs-built_in\">console</span>.log(richRank(obj))<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"7、实现一个函数，判断输入的是否为回文字符串\"><a href=\"#7、实现一个函数，判断输入的是否为回文字符串\" class=\"headerlink\" title=\"7、实现一个函数，判断输入的是否为回文字符串\"></a>7、实现一个函数，判断输入的是否为回文字符串</h3><ul>\n<li><p>方法一：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">plalindrome</span>(<span class=\"hljs-params\">str</span>)</span>&#123;<br>  <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">typeof</span> str !== <span class=\"hljs-string\">'string'</span>) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span><br>  <span class=\"hljs-keyword\">return</span> str.split(<span class=\"hljs-string\">''</span>).reverse().join(<span class=\"hljs-string\">''</span>) === str<br>&#125;<br></code></pre></td></tr></table></figure>\n</li>\n<li><p>方法二：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">plalindrome</span>(<span class=\"hljs-params\">str</span>)</span>&#123;<br>  <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-keyword\">typeof</span> str !== <span class=\"hljs-string\">'string'</span>) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span><br>  <span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>, j = str.length - <span class=\"hljs-number\">1</span><br>  <span class=\"hljs-keyword\">while</span>(i &lt; j)&#123;<br>    <span class=\"hljs-keyword\">if</span>(str.charAt(i) !== str.charAt(j)) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span><br>    i++<br>    j--<br>  &#125;<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span><br>&#125;<br></code></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h3 id=\"8、请写一个抽奖程序，已有参与抽奖的员工工号组成的数组staffIds。（规则：同一员工不可重复中奖，每轮执行抽奖程序，入参是本轮要抽取的中奖人数n，将中奖人工号打印出来）\"><a href=\"#8、请写一个抽奖程序，已有参与抽奖的员工工号组成的数组staffIds。（规则：同一员工不可重复中奖，每轮执行抽奖程序，入参是本轮要抽取的中奖人数n，将中奖人工号打印出来）\" class=\"headerlink\" title=\"8、请写一个抽奖程序，已有参与抽奖的员工工号组成的数组staffIds。（规则：同一员工不可重复中奖，每轮执行抽奖程序，入参是本轮要抽取的中奖人数n，将中奖人工号打印出来）\"></a>8、请写一个抽奖程序，已有参与抽奖的员工工号组成的数组staffIds。（规则：同一员工不可重复中奖，每轮执行抽奖程序，入参是本轮要抽取的中奖人数n，将中奖人工号打印出来）</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">shuffle</span>(<span class=\"hljs-params\">arr, n</span>)</span>&#123;<br>  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = arr.length; i &gt; <span class=\"hljs-number\">0</span>; i--)&#123;<br>    <span class=\"hljs-keyword\">const</span> &#123;index&#125; = randomItem(arr, <span class=\"hljs-number\">0</span>, i);<br>    [arr[index], arr[i<span class=\"hljs-number\">-1</span>]] = [arr[i<span class=\"hljs-number\">-1</span>], arr[index]]<br>  &#125;<br>  <span class=\"hljs-keyword\">return</span>  arr.slice(<span class=\"hljs-number\">0</span>, n)<br>&#125;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">randomItem</span>(<span class=\"hljs-params\">arr, from = <span class=\"hljs-number\">0</span>, to = arr.length</span>)</span>&#123;<br>  <span class=\"hljs-keyword\">const</span> index = random(<span class=\"hljs-keyword\">from</span>, to)<br>  <span class=\"hljs-keyword\">return</span> &#123;<br>    index,<br>    value: arr[index]<br>  &#125;<br>&#125;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">random</span>(<span class=\"hljs-params\">m, n</span>)</span>&#123;<br>  <span class=\"hljs-keyword\">return</span> m + <span class=\"hljs-built_in\">Math</span>.floor(<span class=\"hljs-built_in\">Math</span>.random() * n)<br>&#125;<br></code></pre></td></tr></table></figure>\n<h3 id=\"9、给出一个32位有符号的整数，你需要将这个整数中每位上的数字进行反转。如：123，输出321；-130，输出：-31；数值范围为-−2-31-2-31-−-1\"><a href=\"#9、给出一个32位有符号的整数，你需要将这个整数中每位上的数字进行反转。如：123，输出321；-130，输出：-31；数值范围为-−2-31-2-31-−-1\" class=\"headerlink\" title=\"9、给出一个32位有符号的整数，你需要将这个整数中每位上的数字进行反转。如：123，输出321；-130，输出：-31；数值范围为[−2 31,  2 31 − 1]\"></a>9、给出一个32位有符号的整数，你需要将这个整数中每位上的数字进行反转。如：123，输出321；-130，输出：-31；数值范围为[−2 31,  2 31 − 1]</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">reverse</span>(<span class=\"hljs-params\">x</span>)</span>&#123;<br>  <span class=\"hljs-keyword\">let</span> str = x + <span class=\"hljs-string\">''</span><br>  <span class=\"hljs-keyword\">let</span> result = <span class=\"hljs-string\">''</span><br>  <span class=\"hljs-keyword\">if</span>(x &gt; <span class=\"hljs-number\">0</span>)&#123;<br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i = str.length - <span class=\"hljs-number\">1</span>; i &gt;= <span class=\"hljs-number\">0</span>; i--)&#123;<br>      result += str[i]<br>    &#125;<br>  &#125;<span class=\"hljs-keyword\">else</span>&#123;<br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i = str.length <span class=\"hljs-number\">-1</span>; i &gt; <span class=\"hljs-number\">0</span>; i--)&#123;<br>      result += str[i]<br>    &#125;<br>    result = -result<br>  &#125;<br>  <span class=\"hljs-keyword\">if</span>(result &lt; <span class=\"hljs-built_in\">Math</span>.pow(<span class=\"hljs-number\">-2</span>, <span class=\"hljs-number\">31</span>) || result &gt; <span class=\"hljs-built_in\">Math</span>.pow(<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">31</span>) - <span class=\"hljs-number\">1</span>)&#123;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span><br>  &#125;<br>  <span class=\"hljs-keyword\">return</span> result<br>&#125;<br></code></pre></td></tr></table></figure>\n<h3 id=\"10、冒泡排序\"><a href=\"#10、冒泡排序\" class=\"headerlink\" title=\"10、冒泡排序\"></a>10、冒泡排序</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">bubbleSort</span>(<span class=\"hljs-params\">arr</span>)</span>&#123;<br>  <span class=\"hljs-keyword\">let</span> length = arr.length<br>  <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; length <span class=\"hljs-number\">-1</span>; i++)&#123;<br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> j = <span class=\"hljs-number\">0</span>; j &lt; length<span class=\"hljs-number\">-1</span>-i; j++)&#123;<br>      <span class=\"hljs-keyword\">if</span>(arr[j] &gt; arr[j+<span class=\"hljs-number\">1</span>])&#123;<br>        <span class=\"hljs-keyword\">let</span> temp = arr[j+<span class=\"hljs-number\">1</span>]<br>        arr[j+<span class=\"hljs-number\">1</span>] = arr[j]<br>        arr[j] = temp<br>      &#125;<br>    &#125;<br>  &#125;<br>  <span class=\"hljs-keyword\">return</span> arr<br>&#125;<br></code></pre></td></tr></table></figure>\n<h3 id=\"11、快速排序\"><a href=\"#11、快速排序\" class=\"headerlink\" title=\"11、快速排序\"></a>11、快速排序</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">quickSort</span>(<span class=\"hljs-params\">arr</span>)</span>&#123;<br>  <span class=\"hljs-keyword\">if</span>(arr.length &lt;= <span class=\"hljs-number\">1</span>) <span class=\"hljs-keyword\">return</span> arr<br>  <span class=\"hljs-keyword\">let</span> pivotIndex = <span class=\"hljs-built_in\">Math</span>.floor(arr.length/<span class=\"hljs-number\">2</span>)<br>  <span class=\"hljs-keyword\">let</span> pivot = arr.splice(pivotIndex, <span class=\"hljs-number\">1</span>)[<span class=\"hljs-number\">0</span>]<br>  <span class=\"hljs-keyword\">let</span> left = []<br>  <span class=\"hljs-keyword\">let</span> right = []<br>  <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; arr.length; i++)&#123;<br>    <span class=\"hljs-keyword\">if</span>(arr[i] &lt; pivot)&#123;<br>      left.push(arr[i])<br>    &#125;<span class=\"hljs-keyword\">else</span>&#123;<br>      right.push(arr[i])<br>    &#125;<br>  &#125;<br>  <span class=\"hljs-keyword\">return</span> quickSort(left).concat([pivot], quickSort(right))<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"12、找出数组中两项之和为-target-的下标\"><a href=\"#12、找出数组中两项之和为-target-的下标\" class=\"headerlink\" title=\"12、找出数组中两项之和为 target 的下标\"></a>12、找出数组中两项之和为 target 的下标</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">twoSum</span>(<span class=\"hljs-params\">nums, target</span>)</span>&#123;<br>  <span class=\"hljs-keyword\">const</span> comp = &#123;&#125;<br>  <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; nums.length; i++)&#123;<br>    <span class=\"hljs-keyword\">if</span>(comp[target - nums[i]] &gt;= <span class=\"hljs-number\">0</span>)&#123;<br>      <span class=\"hljs-keyword\">return</span> [comp[target - nums[i]], i]<br>    &#125;<br>    comp[nums[i]] = i<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"13、实现-5-add-3-minus-2-功能\"><a href=\"#13、实现-5-add-3-minus-2-功能\" class=\"headerlink\" title=\"13、实现(5).add(3).minus(2)功能\"></a>13、实现(5).add(3).minus(2)功能</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-built_in\">Number</span>.prototype.add = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">n</span>)</span>&#123;<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.valueOf() + n<br>&#125;<br><span class=\"hljs-built_in\">Number</span>.prototype.minus = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">n</span>)</span>&#123;<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.valueOf() - n<br>&#125;<br></code></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"1、输入是以数字组成的数组，例如-arr-1-2-3-4-9-6-。任务是：找出所有项的和最大的-arr-数组的连续子数组。写出函数-getMaxSubSum-arr-，用其找出并返回最大和。例如：\"><a href=\"#1、输入是以数字组成的数组，例如-arr-1-2-3-4-9-6-。任务是：找出所有项的和最大的-arr-数组的连续子数组。写出函数-getMaxSubSum-arr-，用其找出并返回最大和。例如：\" class=\"headerlink\" title=\"1、输入是以数字组成的数组，例如 arr = [1, -2, 3, 4, -9, 6]。任务是：找出所有项的和最大的 arr 数组的连续子数组。写出函数 getMaxSubSum(arr)，用其找出并返回最大和。例如：\"></a>1、输入是以数字组成的数组，例如 arr = [1, -2, 3, 4, -9, 6]。</br>任务是：找出所有项的和最大的 arr 数组的连续子数组。</br>写出函数 getMaxSubSum(arr)，用其找出并返回最大和。</br>例如：</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">getMaxSubSum([<span class=\"hljs-number\">-1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">-9</span>]) == <span class=\"hljs-number\">5</span><br>getMaxSubSum([<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">-1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">-9</span>]) == <span class=\"hljs-number\">6</span><br>getMaxSubSum([<span class=\"hljs-number\">-1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">-9</span>, <span class=\"hljs-number\">11</span>]) == <span class=\"hljs-number\">11</span><br>getMaxSubSum([<span class=\"hljs-number\">-2</span>, <span class=\"hljs-number\">-1</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>]) == <span class=\"hljs-number\">3</span><br>getMaxSubSum([<span class=\"hljs-number\">100</span>, <span class=\"hljs-number\">-9</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">-3</span>, <span class=\"hljs-number\">5</span>]) == <span class=\"hljs-number\">100</span><br>getMaxSubSum([<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>]) == <span class=\"hljs-number\">6</span><br></code></pre></td></tr></table></figure>\n<ul>\n<li>方案一：需要循环两次<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">getMaxSubSum</span>(<span class=\"hljs-params\">arr</span>) </span>&#123;<br>  <span class=\"hljs-keyword\">let</span> maxSum = <span class=\"hljs-number\">0</span>;<br>  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; arr.length; i++ )&#123;<br>    <span class=\"hljs-keyword\">let</span> partSum = <span class=\"hljs-number\">0</span>;<br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> j = i; j &lt; arr.length; j++)&#123;<br>      partSum += arr[j]<br>      maxSum = <span class=\"hljs-built_in\">Math</span>.max(maxSum, partSum)<br>    &#125;<br>  &#125;<br>  <span class=\"hljs-keyword\">return</span> maxSum<br>&#125;<br></code></pre></td></tr></table></figure></li>\n<li>方案二：只需要循环一次，最优解<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">getMaxSubSum</span>(<span class=\"hljs-params\">arr</span>) </span>&#123;<br>  <span class=\"hljs-keyword\">let</span> maxSum = <span class=\"hljs-number\">0</span>;<br>  <span class=\"hljs-keyword\">let</span> partSum = <span class=\"hljs-number\">0</span>;<br>  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> item <span class=\"hljs-keyword\">of</span> arr)&#123;<br>    partSum += item<br>    maxSum = <span class=\"hljs-built_in\">Math</span>.max(maxSum, partSum)<br>    <span class=\"hljs-keyword\">if</span> (partSum &lt; <span class=\"hljs-number\">0</span>) partSum = <span class=\"hljs-number\">0</span><br>  &#125;<br>  <span class=\"hljs-keyword\">return</span> maxSum<br>&#125;<br></code></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h3 id=\"2、数组去重\"><a href=\"#2、数组去重\" class=\"headerlink\" title=\"2、数组去重\"></a>2、数组去重</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">let</span> arr = [<span class=\"hljs-string\">\"Hare\"</span>, <span class=\"hljs-string\">\"Krishna\"</span>, <span class=\"hljs-string\">\"Hare\"</span>, <span class=\"hljs-string\">\"Krishna\"</span>,<span class=\"hljs-string\">\"Krishna\"</span>, <span class=\"hljs-string\">\"Krishna\"</span>, <span class=\"hljs-string\">\"Hare\"</span>, <span class=\"hljs-string\">\"Hare\"</span>, <span class=\"hljs-string\">\":-O\"</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">11</span>, <span class=\"hljs-number\">20</span>, <span class=\"hljs-number\">11</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">3</span>]<br>unique(arr) <span class=\"hljs-comment\">// [\"Hare\", \"Krishna\", \":-O\", 3, 11, 20, 0]</span><br></code></pre></td></tr></table></figure>\n<ul>\n<li>方案一：(因为for循环对数组的每一项都进行了校验，所以仅适用于小型数组)<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">unique</span>(<span class=\"hljs-params\">arr</span>) </span>&#123;<br>  <span class=\"hljs-keyword\">let</span> result = []<br>  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> item <span class=\"hljs-keyword\">of</span> arr) &#123;<br>    <span class=\"hljs-keyword\">if</span>(!result.includes(item))&#123;<br>      result.push(item)<br>    &#125;<br>  &#125;<br>  <span class=\"hljs-keyword\">return</span> result<br>&#125;<br></code></pre></td></tr></table></figure></li>\n<li>方案二：<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">unique</span>(<span class=\"hljs-params\">arr</span>) </span>&#123;<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">Array</span>.form(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Set</span>(arr))<br>&#125;<br></code></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h3 id=\"3、实现一个函数-可以计算出x的n次方\"><a href=\"#3、实现一个函数-可以计算出x的n次方\" class=\"headerlink\" title=\"3、实现一个函数,可以计算出x的n次方\"></a>3、实现一个函数,可以计算出x的n次方</h3><ul>\n<li>方案一：<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">pow</span>(<span class=\"hljs-params\">x, n</span>) </span>&#123;<br>  <span class=\"hljs-keyword\">let</span> result = <span class=\"hljs-number\">1</span><br>  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; n; i++)&#123;<br>    result *= x<br>  &#125;<br>  <span class=\"hljs-keyword\">return</span> result<br>&#125;<br>pow(<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>) <span class=\"hljs-comment\">//8</span><br></code></pre></td></tr></table></figure></li>\n<li>方案二：<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">pow</span>(<span class=\"hljs-params\">x, n</span>) </span>&#123;<br>  <span class=\"hljs-keyword\">if</span>(n == <span class=\"hljs-number\">1</span>)&#123;<br>    <span class=\"hljs-keyword\">return</span> x<br>  &#125;<span class=\"hljs-keyword\">else</span>&#123;<br>    <span class=\"hljs-keyword\">return</span> x * pow(x, n - <span class=\"hljs-number\">1</span>)<br>  &#125;<br>&#125;<br>pow(<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>) <span class=\"hljs-comment\">//8</span><br></code></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h3 id=\"4、写一个mySetInterval-fn-a-b-，每次间隔-a-a-b-a-2b-…-a-nb-的时间-然后写一个myClear，停止上面的-mySetInterval。\"><a href=\"#4、写一个mySetInterval-fn-a-b-，每次间隔-a-a-b-a-2b-…-a-nb-的时间-然后写一个myClear，停止上面的-mySetInterval。\" class=\"headerlink\" title=\"4、写一个mySetInterval(fn, a, b)，每次间隔 a, a + b, a + 2b, … , a + nb 的时间, 然后写一个myClear，停止上面的 mySetInterval。\"></a>4、写一个mySetInterval(fn, a, b)，每次间隔 a, a + b, a + 2b, … , a + nb 的时间, 然后写一个myClear，停止上面的 mySetInterval。</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">mySetInterval</span>(<span class=\"hljs-params\">fn, a, b</span>)</span>&#123;<br>  <span class=\"hljs-keyword\">this</span>.a = a<br>  <span class=\"hljs-keyword\">this</span>.b = b<br>  <span class=\"hljs-keyword\">this</span>.fn = fn<br>  <span class=\"hljs-keyword\">this</span>.time = <span class=\"hljs-number\">0</span><br>  <span class=\"hljs-keyword\">this</span>.timer = <span class=\"hljs-number\">-1</span><br>  <span class=\"hljs-keyword\">this</span>.start = <span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> &#123;<br>    <span class=\"hljs-keyword\">this</span>.timer = setInterval(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;<br>      fn()<br>      <span class=\"hljs-keyword\">this</span>.time ++<br>      <span class=\"hljs-keyword\">this</span>.start()<br>      <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-keyword\">this</span>.a + <span class=\"hljs-keyword\">this</span>.time * <span class=\"hljs-keyword\">this</span>.b)<br>    &#125;, <span class=\"hljs-keyword\">this</span>.a + <span class=\"hljs-keyword\">this</span>.time * <span class=\"hljs-keyword\">this</span>.b)<br>  &#125;<br>  <span class=\"hljs-keyword\">this</span>.stop = <span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> &#123;<br>    clearInterval(<span class=\"hljs-keyword\">this</span>.timer)<br>  &#125;<br>&#125;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">print</span>(<span class=\"hljs-params\"></span>)</span>&#123;<br>  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'123'</span>)<br>&#125;<br><span class=\"hljs-keyword\">const</span> my = <span class=\"hljs-keyword\">new</span> mySetInterval(print, <span class=\"hljs-number\">1000</span>, <span class=\"hljs-number\">2000</span>)<br>my.start()<br>my.stop()<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"5、计算任意位数的两个正整数字符串之和\"><a href=\"#5、计算任意位数的两个正整数字符串之和\" class=\"headerlink\" title=\"5、计算任意位数的两个正整数字符串之和\"></a>5、计算任意位数的两个正整数字符串之和</h3><ul>\n<li>方法一：</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">add</span>(<span class=\"hljs-params\">a, b</span>)</span>&#123;<br>  <span class=\"hljs-keyword\">let</span> number1, number2, MAX_LENGTH, result = []<br>  <span class=\"hljs-keyword\">if</span>(a.length &gt; b.length)&#123;<br>    number1 = a.split(<span class=\"hljs-string\">''</span>).reverse()<br>    number2 = b.split(<span class=\"hljs-string\">''</span>).reverse()<br>    MAX_LENGTH = a.length<br>  &#125;<span class=\"hljs-keyword\">else</span> &#123;<br>    number1 = b.split(<span class=\"hljs-string\">''</span>).reverse()<br>    number2 = a.split(<span class=\"hljs-string\">''</span>).reverse()<br>    MAX_LENGTH = b.length<br>  &#125;<br>  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>;i &lt; MAX_LENGTH; i++)&#123;<br>    <span class=\"hljs-keyword\">let</span> sum <br>    <span class=\"hljs-keyword\">if</span>(number2[i])&#123;<br>      sum = (+number1[i]) + (+number2[i])<br>    &#125;<span class=\"hljs-keyword\">else</span> &#123;<br>      sum = (+number1[i])<br>    &#125;<br>    <span class=\"hljs-keyword\">if</span>(result[i])&#123;<br>      sum += <span class=\"hljs-number\">1</span><br>    &#125;<br>    result[i] = <span class=\"hljs-built_in\">String</span>(sum % <span class=\"hljs-number\">10</span>)<br>    <span class=\"hljs-keyword\">if</span>(sum &gt;= <span class=\"hljs-number\">10</span>)&#123;<br>      result[i+<span class=\"hljs-number\">1</span>] = <span class=\"hljs-string\">'1'</span><br>    &#125;<br>  &#125;<br>  <span class=\"hljs-keyword\">return</span> result.reverse().join(<span class=\"hljs-string\">''</span>)<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>方法二：</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">add</span>(<span class=\"hljs-params\">a, b</span>)</span>&#123;<br>  <span class=\"hljs-keyword\">let</span> result = <span class=\"hljs-string\">''</span>, c = <span class=\"hljs-number\">0</span><br>  a = a.split(<span class=\"hljs-string\">''</span>)<br>  b = b.split(<span class=\"hljs-string\">''</span>)<br>  <span class=\"hljs-keyword\">while</span>(a.length || b.length || c)&#123;<br>    c += ~~a.pop() + ~~b.pop()<br>    result = c % <span class=\"hljs-number\">10</span> + result<br>    c = c &gt; <span class=\"hljs-number\">9</span><br>  &#125;<br>  <span class=\"hljs-keyword\">return</span> result<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"6、给定一个对象，存储了世界富豪的名字-key-和资产-value-，求排行榜（按资产从大到小的富豪名字数组）。譬如输入-bill-500-sam-480-roark-501-，返回-‘roark’-‘bill’-‘sam’\"><a href=\"#6、给定一个对象，存储了世界富豪的名字-key-和资产-value-，求排行榜（按资产从大到小的富豪名字数组）。譬如输入-bill-500-sam-480-roark-501-，返回-‘roark’-‘bill’-‘sam’\" class=\"headerlink\" title=\"6、给定一个对象，存储了世界富豪的名字(key)和资产(value)，求排行榜（按资产从大到小的富豪名字数组）。譬如输入{bill: 500, sam: 480, roark: 501}，返回[‘roark’, ‘bill’, ‘sam’]\"></a>6、给定一个对象，存储了世界富豪的名字(key)和资产(value)，求排行榜（按资产从大到小的富豪名字数组）。譬如输入{bill: 500, sam: 480, roark: 501}，返回[‘roark’, ‘bill’, ‘sam’]</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">richRank</span>(<span class=\"hljs-params\">obj</span>)</span>&#123;<br>  <span class=\"hljs-keyword\">let</span> valueSort = <span class=\"hljs-built_in\">Object</span>.values(obj).sort(<span class=\"hljs-function\">(<span class=\"hljs-params\">a,b</span>) =&gt;</span> b - a)<br>  <span class=\"hljs-keyword\">let</span> richName = []<br>  <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; valueSort.length; i++)&#123;<br>    <span class=\"hljs-built_in\">Object</span>.keys(obj).map(<span class=\"hljs-function\"><span class=\"hljs-params\">item</span> =&gt;</span> &#123;<br>      <span class=\"hljs-keyword\">if</span>(valueSort[i] == obj[item])&#123;<br>        richName.push(item)<br>      &#125;<br>    &#125;)<br>  &#125;<br>  <span class=\"hljs-keyword\">return</span> [...new <span class=\"hljs-built_in\">Set</span>(richName)]<br>&#125;<br><br><span class=\"hljs-keyword\">let</span> obj =&#123;<span class=\"hljs-attr\">bill</span>: <span class=\"hljs-number\">500</span>, <span class=\"hljs-attr\">sam</span>: <span class=\"hljs-number\">480</span>, <span class=\"hljs-attr\">roark</span>: <span class=\"hljs-number\">501</span>, <span class=\"hljs-attr\">dave</span>: <span class=\"hljs-number\">501</span>&#125;<br><span class=\"hljs-built_in\">console</span>.log(richRank(obj))<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"7、实现一个函数，判断输入的是否为回文字符串\"><a href=\"#7、实现一个函数，判断输入的是否为回文字符串\" class=\"headerlink\" title=\"7、实现一个函数，判断输入的是否为回文字符串\"></a>7、实现一个函数，判断输入的是否为回文字符串</h3><ul>\n<li><p>方法一：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">plalindrome</span>(<span class=\"hljs-params\">str</span>)</span>&#123;<br>  <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">typeof</span> str !== <span class=\"hljs-string\">'string'</span>) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span><br>  <span class=\"hljs-keyword\">return</span> str.split(<span class=\"hljs-string\">''</span>).reverse().join(<span class=\"hljs-string\">''</span>) === str<br>&#125;<br></code></pre></td></tr></table></figure>\n</li>\n<li><p>方法二：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">plalindrome</span>(<span class=\"hljs-params\">str</span>)</span>&#123;<br>  <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-keyword\">typeof</span> str !== <span class=\"hljs-string\">'string'</span>) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span><br>  <span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>, j = str.length - <span class=\"hljs-number\">1</span><br>  <span class=\"hljs-keyword\">while</span>(i &lt; j)&#123;<br>    <span class=\"hljs-keyword\">if</span>(str.charAt(i) !== str.charAt(j)) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span><br>    i++<br>    j--<br>  &#125;<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span><br>&#125;<br></code></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h3 id=\"8、请写一个抽奖程序，已有参与抽奖的员工工号组成的数组staffIds。（规则：同一员工不可重复中奖，每轮执行抽奖程序，入参是本轮要抽取的中奖人数n，将中奖人工号打印出来）\"><a href=\"#8、请写一个抽奖程序，已有参与抽奖的员工工号组成的数组staffIds。（规则：同一员工不可重复中奖，每轮执行抽奖程序，入参是本轮要抽取的中奖人数n，将中奖人工号打印出来）\" class=\"headerlink\" title=\"8、请写一个抽奖程序，已有参与抽奖的员工工号组成的数组staffIds。（规则：同一员工不可重复中奖，每轮执行抽奖程序，入参是本轮要抽取的中奖人数n，将中奖人工号打印出来）\"></a>8、请写一个抽奖程序，已有参与抽奖的员工工号组成的数组staffIds。（规则：同一员工不可重复中奖，每轮执行抽奖程序，入参是本轮要抽取的中奖人数n，将中奖人工号打印出来）</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">shuffle</span>(<span class=\"hljs-params\">arr, n</span>)</span>&#123;<br>  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = arr.length; i &gt; <span class=\"hljs-number\">0</span>; i--)&#123;<br>    <span class=\"hljs-keyword\">const</span> &#123;index&#125; = randomItem(arr, <span class=\"hljs-number\">0</span>, i);<br>    [arr[index], arr[i<span class=\"hljs-number\">-1</span>]] = [arr[i<span class=\"hljs-number\">-1</span>], arr[index]]<br>  &#125;<br>  <span class=\"hljs-keyword\">return</span>  arr.slice(<span class=\"hljs-number\">0</span>, n)<br>&#125;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">randomItem</span>(<span class=\"hljs-params\">arr, from = <span class=\"hljs-number\">0</span>, to = arr.length</span>)</span>&#123;<br>  <span class=\"hljs-keyword\">const</span> index = random(<span class=\"hljs-keyword\">from</span>, to)<br>  <span class=\"hljs-keyword\">return</span> &#123;<br>    index,<br>    value: arr[index]<br>  &#125;<br>&#125;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">random</span>(<span class=\"hljs-params\">m, n</span>)</span>&#123;<br>  <span class=\"hljs-keyword\">return</span> m + <span class=\"hljs-built_in\">Math</span>.floor(<span class=\"hljs-built_in\">Math</span>.random() * n)<br>&#125;<br></code></pre></td></tr></table></figure>\n<h3 id=\"9、给出一个32位有符号的整数，你需要将这个整数中每位上的数字进行反转。如：123，输出321；-130，输出：-31；数值范围为-−2-31-2-31-−-1\"><a href=\"#9、给出一个32位有符号的整数，你需要将这个整数中每位上的数字进行反转。如：123，输出321；-130，输出：-31；数值范围为-−2-31-2-31-−-1\" class=\"headerlink\" title=\"9、给出一个32位有符号的整数，你需要将这个整数中每位上的数字进行反转。如：123，输出321；-130，输出：-31；数值范围为[−2 31,  2 31 − 1]\"></a>9、给出一个32位有符号的整数，你需要将这个整数中每位上的数字进行反转。如：123，输出321；-130，输出：-31；数值范围为[−2 31,  2 31 − 1]</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">reverse</span>(<span class=\"hljs-params\">x</span>)</span>&#123;<br>  <span class=\"hljs-keyword\">let</span> str = x + <span class=\"hljs-string\">''</span><br>  <span class=\"hljs-keyword\">let</span> result = <span class=\"hljs-string\">''</span><br>  <span class=\"hljs-keyword\">if</span>(x &gt; <span class=\"hljs-number\">0</span>)&#123;<br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i = str.length - <span class=\"hljs-number\">1</span>; i &gt;= <span class=\"hljs-number\">0</span>; i--)&#123;<br>      result += str[i]<br>    &#125;<br>  &#125;<span class=\"hljs-keyword\">else</span>&#123;<br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i = str.length <span class=\"hljs-number\">-1</span>; i &gt; <span class=\"hljs-number\">0</span>; i--)&#123;<br>      result += str[i]<br>    &#125;<br>    result = -result<br>  &#125;<br>  <span class=\"hljs-keyword\">if</span>(result &lt; <span class=\"hljs-built_in\">Math</span>.pow(<span class=\"hljs-number\">-2</span>, <span class=\"hljs-number\">31</span>) || result &gt; <span class=\"hljs-built_in\">Math</span>.pow(<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">31</span>) - <span class=\"hljs-number\">1</span>)&#123;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span><br>  &#125;<br>  <span class=\"hljs-keyword\">return</span> result<br>&#125;<br></code></pre></td></tr></table></figure>\n<h3 id=\"10、冒泡排序\"><a href=\"#10、冒泡排序\" class=\"headerlink\" title=\"10、冒泡排序\"></a>10、冒泡排序</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">bubbleSort</span>(<span class=\"hljs-params\">arr</span>)</span>&#123;<br>  <span class=\"hljs-keyword\">let</span> length = arr.length<br>  <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; length <span class=\"hljs-number\">-1</span>; i++)&#123;<br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> j = <span class=\"hljs-number\">0</span>; j &lt; length<span class=\"hljs-number\">-1</span>-i; j++)&#123;<br>      <span class=\"hljs-keyword\">if</span>(arr[j] &gt; arr[j+<span class=\"hljs-number\">1</span>])&#123;<br>        <span class=\"hljs-keyword\">let</span> temp = arr[j+<span class=\"hljs-number\">1</span>]<br>        arr[j+<span class=\"hljs-number\">1</span>] = arr[j]<br>        arr[j] = temp<br>      &#125;<br>    &#125;<br>  &#125;<br>  <span class=\"hljs-keyword\">return</span> arr<br>&#125;<br></code></pre></td></tr></table></figure>\n<h3 id=\"11、快速排序\"><a href=\"#11、快速排序\" class=\"headerlink\" title=\"11、快速排序\"></a>11、快速排序</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">quickSort</span>(<span class=\"hljs-params\">arr</span>)</span>&#123;<br>  <span class=\"hljs-keyword\">if</span>(arr.length &lt;= <span class=\"hljs-number\">1</span>) <span class=\"hljs-keyword\">return</span> arr<br>  <span class=\"hljs-keyword\">let</span> pivotIndex = <span class=\"hljs-built_in\">Math</span>.floor(arr.length/<span class=\"hljs-number\">2</span>)<br>  <span class=\"hljs-keyword\">let</span> pivot = arr.splice(pivotIndex, <span class=\"hljs-number\">1</span>)[<span class=\"hljs-number\">0</span>]<br>  <span class=\"hljs-keyword\">let</span> left = []<br>  <span class=\"hljs-keyword\">let</span> right = []<br>  <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; arr.length; i++)&#123;<br>    <span class=\"hljs-keyword\">if</span>(arr[i] &lt; pivot)&#123;<br>      left.push(arr[i])<br>    &#125;<span class=\"hljs-keyword\">else</span>&#123;<br>      right.push(arr[i])<br>    &#125;<br>  &#125;<br>  <span class=\"hljs-keyword\">return</span> quickSort(left).concat([pivot], quickSort(right))<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"12、找出数组中两项之和为-target-的下标\"><a href=\"#12、找出数组中两项之和为-target-的下标\" class=\"headerlink\" title=\"12、找出数组中两项之和为 target 的下标\"></a>12、找出数组中两项之和为 target 的下标</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">twoSum</span>(<span class=\"hljs-params\">nums, target</span>)</span>&#123;<br>  <span class=\"hljs-keyword\">const</span> comp = &#123;&#125;<br>  <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; nums.length; i++)&#123;<br>    <span class=\"hljs-keyword\">if</span>(comp[target - nums[i]] &gt;= <span class=\"hljs-number\">0</span>)&#123;<br>      <span class=\"hljs-keyword\">return</span> [comp[target - nums[i]], i]<br>    &#125;<br>    comp[nums[i]] = i<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"13、实现-5-add-3-minus-2-功能\"><a href=\"#13、实现-5-add-3-minus-2-功能\" class=\"headerlink\" title=\"13、实现(5).add(3).minus(2)功能\"></a>13、实现(5).add(3).minus(2)功能</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-built_in\">Number</span>.prototype.add = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">n</span>)</span>&#123;<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.valueOf() + n<br>&#125;<br><span class=\"hljs-built_in\">Number</span>.prototype.minus = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">n</span>)</span>&#123;<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.valueOf() - n<br>&#125;<br></code></pre></td></tr></table></figure>"},{"title":"call、apply、bind","date":"2020-05-23T06:31:09.000Z","_content":"### 三者之间的区别\n- call、apply、bind 都是用来改变 this 关键字的。\n\n- call 和 apply 的用法是一样的，只不过在传参的时候，call 是一个一个的传，而 apply 是放在一个数组中传递。\n\n- bind 方法在 IE6~8 下不兼容，在 call 和 apply 中改变 this 关键字和执行 fn 一起完成了，而在 bind 中只是改变了 this 关键字并且传参，但是 fn 并没有执行，执行 bind 会有一个返回值，而这个返回值就是我们把 fn 的 this 改变后的那个结果，所以 bind 只是对 fn 进行了预处理\n\n### 实现call\n\n```js\nFunction.prototype.myCall = function(context){  // 在函数的原型上绑定一个我们自定义的函数\n  if(typeof this !== 'function'){  // 如果调用这个方法不是函数数据类型，那么就抛出一个错误\n      throw new TypeError('Error')\n  }\n  context = context || window\n  const fn = Symbol(1)  // 防止对象上有fn这个属性，被我们覆盖\n  context[fn] = this  // 把函数作为对象的一个属性\n  const args = [...arguments].slice(1)  // 获取传进来的参数\n  const result = context[fn](...args)  // 将参数传入对象这个函数中，并执行返回结果\n  delete context[fn]  // 删除对象这个函数属性\n  return result   // 返回结果\n}\n\nlet user = {\n  name: 'John'\n}\n\nfunction sayHi(a,b){\n  let sum = a + b\n  return `Hi,${this.name},${sum}`\n}\n\nsayHi.myCall(user,1,2)  // \"Hi,John,3\"\n```\n\n## 实现apply\n\n- apply 的实现方法其实和 call 基本一样，唯一的区别就是在传参时的处理，下面我们就看一下 apply 的实现大体思路\n\n```js\nFunction.prototype.myApply = function(context){\n  if(typeof this !== 'function'){\n      throw new TypeError('Error')\n  }\n  context = context || window\n  const fn = Symbol(1)\n  context[fn] = this\n  let result\n  // 在处理参数上和 call 有一些区别\n  if(arguments[1]){\n    result = context[fn](...arguments[1])\n  }else {\n    result = context[fn]()\n  }\n  delete context[fn]\n  return result\n}\n\nlet user = {\n  name: 'Alice'\n}\n\nfunction sayBye(a,b){\n  const num = a + b\n  return `Bye,${this.name},${num}`\n}\n\nsayBye.myApply(user,[2,3])  // \"Bye,Alice,5\"\n```\n\n### 实现Bind\n\n```js\nFunction.prototype.myBind = function(context){\n  if(typeof this !== 'function'){\n      throw new TypeError('Error')\n  }\n  const _this = this\n  const args = [...arguments].slice(1)\n  return function F(){\n    // 如果被当做构造函数调用\n    if(this instanceof F){\n      return new _this(...args, ...arguments)\n    }\n    return _this.apply(context, args.concat(...arguments))\n  }\n}\n\nlet user = {\n  name: 'Lucy'\n}\n\nfunction other(age, birthday){\n  this.age = age\n  this.birthday = birthday\n}\n\nconst detail = other.myBind(user,18)\ndetail(2020)\nconsole.log(user) // {name: \"Lucy\", age: 18, birthday: 2020}\n\nconst newDetail = other.myBind(user, 17)\nconst detail2 = new newDetail(2020)\nconsole.log(user) // {name: \"Lucy\"}\nconsole.log(detail2) // {age: 17, birthday: 2020}\n```","source":"_posts/call.md","raw":"---\ntitle: call、apply、bind\ndate: 2020-05-23 14:31:09\ntags: JS\ncategories:\n- JS基础\n---\n### 三者之间的区别\n- call、apply、bind 都是用来改变 this 关键字的。\n\n- call 和 apply 的用法是一样的，只不过在传参的时候，call 是一个一个的传，而 apply 是放在一个数组中传递。\n\n- bind 方法在 IE6~8 下不兼容，在 call 和 apply 中改变 this 关键字和执行 fn 一起完成了，而在 bind 中只是改变了 this 关键字并且传参，但是 fn 并没有执行，执行 bind 会有一个返回值，而这个返回值就是我们把 fn 的 this 改变后的那个结果，所以 bind 只是对 fn 进行了预处理\n\n### 实现call\n\n```js\nFunction.prototype.myCall = function(context){  // 在函数的原型上绑定一个我们自定义的函数\n  if(typeof this !== 'function'){  // 如果调用这个方法不是函数数据类型，那么就抛出一个错误\n      throw new TypeError('Error')\n  }\n  context = context || window\n  const fn = Symbol(1)  // 防止对象上有fn这个属性，被我们覆盖\n  context[fn] = this  // 把函数作为对象的一个属性\n  const args = [...arguments].slice(1)  // 获取传进来的参数\n  const result = context[fn](...args)  // 将参数传入对象这个函数中，并执行返回结果\n  delete context[fn]  // 删除对象这个函数属性\n  return result   // 返回结果\n}\n\nlet user = {\n  name: 'John'\n}\n\nfunction sayHi(a,b){\n  let sum = a + b\n  return `Hi,${this.name},${sum}`\n}\n\nsayHi.myCall(user,1,2)  // \"Hi,John,3\"\n```\n\n## 实现apply\n\n- apply 的实现方法其实和 call 基本一样，唯一的区别就是在传参时的处理，下面我们就看一下 apply 的实现大体思路\n\n```js\nFunction.prototype.myApply = function(context){\n  if(typeof this !== 'function'){\n      throw new TypeError('Error')\n  }\n  context = context || window\n  const fn = Symbol(1)\n  context[fn] = this\n  let result\n  // 在处理参数上和 call 有一些区别\n  if(arguments[1]){\n    result = context[fn](...arguments[1])\n  }else {\n    result = context[fn]()\n  }\n  delete context[fn]\n  return result\n}\n\nlet user = {\n  name: 'Alice'\n}\n\nfunction sayBye(a,b){\n  const num = a + b\n  return `Bye,${this.name},${num}`\n}\n\nsayBye.myApply(user,[2,3])  // \"Bye,Alice,5\"\n```\n\n### 实现Bind\n\n```js\nFunction.prototype.myBind = function(context){\n  if(typeof this !== 'function'){\n      throw new TypeError('Error')\n  }\n  const _this = this\n  const args = [...arguments].slice(1)\n  return function F(){\n    // 如果被当做构造函数调用\n    if(this instanceof F){\n      return new _this(...args, ...arguments)\n    }\n    return _this.apply(context, args.concat(...arguments))\n  }\n}\n\nlet user = {\n  name: 'Lucy'\n}\n\nfunction other(age, birthday){\n  this.age = age\n  this.birthday = birthday\n}\n\nconst detail = other.myBind(user,18)\ndetail(2020)\nconsole.log(user) // {name: \"Lucy\", age: 18, birthday: 2020}\n\nconst newDetail = other.myBind(user, 17)\nconst detail2 = new newDetail(2020)\nconsole.log(user) // {name: \"Lucy\"}\nconsole.log(detail2) // {age: 17, birthday: 2020}\n```","slug":"call","published":1,"updated":"2020-09-25T11:58:12.255Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckfl1j0300019m4ol212tfrla","content":"<h3 id=\"三者之间的区别\"><a href=\"#三者之间的区别\" class=\"headerlink\" title=\"三者之间的区别\"></a>三者之间的区别</h3><ul>\n<li><p>call、apply、bind 都是用来改变 this 关键字的。</p>\n</li>\n<li><p>call 和 apply 的用法是一样的，只不过在传参的时候，call 是一个一个的传，而 apply 是放在一个数组中传递。</p>\n</li>\n<li><p>bind 方法在 IE6~8 下不兼容，在 call 和 apply 中改变 this 关键字和执行 fn 一起完成了，而在 bind 中只是改变了 this 关键字并且传参，但是 fn 并没有执行，执行 bind 会有一个返回值，而这个返回值就是我们把 fn 的 this 改变后的那个结果，所以 bind 只是对 fn 进行了预处理</p>\n</li>\n</ul>\n<h3 id=\"实现call\"><a href=\"#实现call\" class=\"headerlink\" title=\"实现call\"></a>实现call</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-built_in\">Function</span>.prototype.myCall = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">context</span>)</span>&#123;  <span class=\"hljs-comment\">// 在函数的原型上绑定一个我们自定义的函数</span><br>  <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-keyword\">typeof</span> <span class=\"hljs-keyword\">this</span> !== <span class=\"hljs-string\">'function'</span>)&#123;  <span class=\"hljs-comment\">// 如果调用这个方法不是函数数据类型，那么就抛出一个错误</span><br>      <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">TypeError</span>(<span class=\"hljs-string\">'Error'</span>)<br>  &#125;<br>  context = context || <span class=\"hljs-built_in\">window</span><br>  <span class=\"hljs-keyword\">const</span> fn = <span class=\"hljs-built_in\">Symbol</span>(<span class=\"hljs-number\">1</span>)  <span class=\"hljs-comment\">// 防止对象上有fn这个属性，被我们覆盖</span><br>  context[fn] = <span class=\"hljs-keyword\">this</span>  <span class=\"hljs-comment\">// 把函数作为对象的一个属性</span><br>  <span class=\"hljs-keyword\">const</span> args = [...arguments].slice(<span class=\"hljs-number\">1</span>)  <span class=\"hljs-comment\">// 获取传进来的参数</span><br>  <span class=\"hljs-keyword\">const</span> result = context[fn](...args)  <span class=\"hljs-comment\">// 将参数传入对象这个函数中，并执行返回结果</span><br>  <span class=\"hljs-keyword\">delete</span> context[fn]  <span class=\"hljs-comment\">// 删除对象这个函数属性</span><br>  <span class=\"hljs-keyword\">return</span> result   <span class=\"hljs-comment\">// 返回结果</span><br>&#125;<br><br><span class=\"hljs-keyword\">let</span> user = &#123;<br>  name: <span class=\"hljs-string\">'John'</span><br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">sayHi</span>(<span class=\"hljs-params\">a,b</span>)</span>&#123;<br>  <span class=\"hljs-keyword\">let</span> sum = a + b<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">`Hi,<span class=\"hljs-subst\">$&#123;<span class=\"hljs-keyword\">this</span>.name&#125;</span>,<span class=\"hljs-subst\">$&#123;sum&#125;</span>`</span><br>&#125;<br><br>sayHi.myCall(user,<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>)  <span class=\"hljs-comment\">// \"Hi,John,3\"</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"实现apply\"><a href=\"#实现apply\" class=\"headerlink\" title=\"实现apply\"></a>实现apply</h2><ul>\n<li>apply 的实现方法其实和 call 基本一样，唯一的区别就是在传参时的处理，下面我们就看一下 apply 的实现大体思路</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-built_in\">Function</span>.prototype.myApply = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">context</span>)</span>&#123;<br>  <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-keyword\">typeof</span> <span class=\"hljs-keyword\">this</span> !== <span class=\"hljs-string\">'function'</span>)&#123;<br>      <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">TypeError</span>(<span class=\"hljs-string\">'Error'</span>)<br>  &#125;<br>  context = context || <span class=\"hljs-built_in\">window</span><br>  <span class=\"hljs-keyword\">const</span> fn = <span class=\"hljs-built_in\">Symbol</span>(<span class=\"hljs-number\">1</span>)<br>  context[fn] = <span class=\"hljs-keyword\">this</span><br>  <span class=\"hljs-keyword\">let</span> result<br>  <span class=\"hljs-comment\">// 在处理参数上和 call 有一些区别</span><br>  <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-built_in\">arguments</span>[<span class=\"hljs-number\">1</span>])&#123;<br>    result = context[fn](...arguments[<span class=\"hljs-number\">1</span>])<br>  &#125;<span class=\"hljs-keyword\">else</span> &#123;<br>    result = context[fn]()<br>  &#125;<br>  <span class=\"hljs-keyword\">delete</span> context[fn]<br>  <span class=\"hljs-keyword\">return</span> result<br>&#125;<br><br><span class=\"hljs-keyword\">let</span> user = &#123;<br>  name: <span class=\"hljs-string\">'Alice'</span><br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">sayBye</span>(<span class=\"hljs-params\">a,b</span>)</span>&#123;<br>  <span class=\"hljs-keyword\">const</span> num = a + b<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">`Bye,<span class=\"hljs-subst\">$&#123;<span class=\"hljs-keyword\">this</span>.name&#125;</span>,<span class=\"hljs-subst\">$&#123;num&#125;</span>`</span><br>&#125;<br><br>sayBye.myApply(user,[<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>])  <span class=\"hljs-comment\">// \"Bye,Alice,5\"</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"实现Bind\"><a href=\"#实现Bind\" class=\"headerlink\" title=\"实现Bind\"></a>实现Bind</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-built_in\">Function</span>.prototype.myBind = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">context</span>)</span>&#123;<br>  <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-keyword\">typeof</span> <span class=\"hljs-keyword\">this</span> !== <span class=\"hljs-string\">'function'</span>)&#123;<br>      <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">TypeError</span>(<span class=\"hljs-string\">'Error'</span>)<br>  &#125;<br>  <span class=\"hljs-keyword\">const</span> _this = <span class=\"hljs-keyword\">this</span><br>  <span class=\"hljs-keyword\">const</span> args = [...arguments].slice(<span class=\"hljs-number\">1</span>)<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">F</span>(<span class=\"hljs-params\"></span>)</span>&#123;<br>    <span class=\"hljs-comment\">// 如果被当做构造函数调用</span><br>    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-keyword\">this</span> <span class=\"hljs-keyword\">instanceof</span> F)&#123;<br>      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> _this(...args, ...arguments)<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> _this.apply(context, args.concat(...arguments))<br>  &#125;<br>&#125;<br><br><span class=\"hljs-keyword\">let</span> user = &#123;<br>  name: <span class=\"hljs-string\">'Lucy'</span><br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">other</span>(<span class=\"hljs-params\">age, birthday</span>)</span>&#123;<br>  <span class=\"hljs-keyword\">this</span>.age = age<br>  <span class=\"hljs-keyword\">this</span>.birthday = birthday<br>&#125;<br><br><span class=\"hljs-keyword\">const</span> detail = other.myBind(user,<span class=\"hljs-number\">18</span>)<br>detail(<span class=\"hljs-number\">2020</span>)<br><span class=\"hljs-built_in\">console</span>.log(user) <span class=\"hljs-comment\">// &#123;name: \"Lucy\", age: 18, birthday: 2020&#125;</span><br><br><span class=\"hljs-keyword\">const</span> newDetail = other.myBind(user, <span class=\"hljs-number\">17</span>)<br><span class=\"hljs-keyword\">const</span> detail2 = <span class=\"hljs-keyword\">new</span> newDetail(<span class=\"hljs-number\">2020</span>)<br><span class=\"hljs-built_in\">console</span>.log(user) <span class=\"hljs-comment\">// &#123;name: \"Lucy\"&#125;</span><br><span class=\"hljs-built_in\">console</span>.log(detail2) <span class=\"hljs-comment\">// &#123;age: 17, birthday: 2020&#125;</span><br></code></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"三者之间的区别\"><a href=\"#三者之间的区别\" class=\"headerlink\" title=\"三者之间的区别\"></a>三者之间的区别</h3><ul>\n<li><p>call、apply、bind 都是用来改变 this 关键字的。</p>\n</li>\n<li><p>call 和 apply 的用法是一样的，只不过在传参的时候，call 是一个一个的传，而 apply 是放在一个数组中传递。</p>\n</li>\n<li><p>bind 方法在 IE6~8 下不兼容，在 call 和 apply 中改变 this 关键字和执行 fn 一起完成了，而在 bind 中只是改变了 this 关键字并且传参，但是 fn 并没有执行，执行 bind 会有一个返回值，而这个返回值就是我们把 fn 的 this 改变后的那个结果，所以 bind 只是对 fn 进行了预处理</p>\n</li>\n</ul>\n<h3 id=\"实现call\"><a href=\"#实现call\" class=\"headerlink\" title=\"实现call\"></a>实现call</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-built_in\">Function</span>.prototype.myCall = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">context</span>)</span>&#123;  <span class=\"hljs-comment\">// 在函数的原型上绑定一个我们自定义的函数</span><br>  <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-keyword\">typeof</span> <span class=\"hljs-keyword\">this</span> !== <span class=\"hljs-string\">'function'</span>)&#123;  <span class=\"hljs-comment\">// 如果调用这个方法不是函数数据类型，那么就抛出一个错误</span><br>      <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">TypeError</span>(<span class=\"hljs-string\">'Error'</span>)<br>  &#125;<br>  context = context || <span class=\"hljs-built_in\">window</span><br>  <span class=\"hljs-keyword\">const</span> fn = <span class=\"hljs-built_in\">Symbol</span>(<span class=\"hljs-number\">1</span>)  <span class=\"hljs-comment\">// 防止对象上有fn这个属性，被我们覆盖</span><br>  context[fn] = <span class=\"hljs-keyword\">this</span>  <span class=\"hljs-comment\">// 把函数作为对象的一个属性</span><br>  <span class=\"hljs-keyword\">const</span> args = [...arguments].slice(<span class=\"hljs-number\">1</span>)  <span class=\"hljs-comment\">// 获取传进来的参数</span><br>  <span class=\"hljs-keyword\">const</span> result = context[fn](...args)  <span class=\"hljs-comment\">// 将参数传入对象这个函数中，并执行返回结果</span><br>  <span class=\"hljs-keyword\">delete</span> context[fn]  <span class=\"hljs-comment\">// 删除对象这个函数属性</span><br>  <span class=\"hljs-keyword\">return</span> result   <span class=\"hljs-comment\">// 返回结果</span><br>&#125;<br><br><span class=\"hljs-keyword\">let</span> user = &#123;<br>  name: <span class=\"hljs-string\">'John'</span><br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">sayHi</span>(<span class=\"hljs-params\">a,b</span>)</span>&#123;<br>  <span class=\"hljs-keyword\">let</span> sum = a + b<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">`Hi,<span class=\"hljs-subst\">$&#123;<span class=\"hljs-keyword\">this</span>.name&#125;</span>,<span class=\"hljs-subst\">$&#123;sum&#125;</span>`</span><br>&#125;<br><br>sayHi.myCall(user,<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>)  <span class=\"hljs-comment\">// \"Hi,John,3\"</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"实现apply\"><a href=\"#实现apply\" class=\"headerlink\" title=\"实现apply\"></a>实现apply</h2><ul>\n<li>apply 的实现方法其实和 call 基本一样，唯一的区别就是在传参时的处理，下面我们就看一下 apply 的实现大体思路</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-built_in\">Function</span>.prototype.myApply = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">context</span>)</span>&#123;<br>  <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-keyword\">typeof</span> <span class=\"hljs-keyword\">this</span> !== <span class=\"hljs-string\">'function'</span>)&#123;<br>      <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">TypeError</span>(<span class=\"hljs-string\">'Error'</span>)<br>  &#125;<br>  context = context || <span class=\"hljs-built_in\">window</span><br>  <span class=\"hljs-keyword\">const</span> fn = <span class=\"hljs-built_in\">Symbol</span>(<span class=\"hljs-number\">1</span>)<br>  context[fn] = <span class=\"hljs-keyword\">this</span><br>  <span class=\"hljs-keyword\">let</span> result<br>  <span class=\"hljs-comment\">// 在处理参数上和 call 有一些区别</span><br>  <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-built_in\">arguments</span>[<span class=\"hljs-number\">1</span>])&#123;<br>    result = context[fn](...arguments[<span class=\"hljs-number\">1</span>])<br>  &#125;<span class=\"hljs-keyword\">else</span> &#123;<br>    result = context[fn]()<br>  &#125;<br>  <span class=\"hljs-keyword\">delete</span> context[fn]<br>  <span class=\"hljs-keyword\">return</span> result<br>&#125;<br><br><span class=\"hljs-keyword\">let</span> user = &#123;<br>  name: <span class=\"hljs-string\">'Alice'</span><br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">sayBye</span>(<span class=\"hljs-params\">a,b</span>)</span>&#123;<br>  <span class=\"hljs-keyword\">const</span> num = a + b<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">`Bye,<span class=\"hljs-subst\">$&#123;<span class=\"hljs-keyword\">this</span>.name&#125;</span>,<span class=\"hljs-subst\">$&#123;num&#125;</span>`</span><br>&#125;<br><br>sayBye.myApply(user,[<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>])  <span class=\"hljs-comment\">// \"Bye,Alice,5\"</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"实现Bind\"><a href=\"#实现Bind\" class=\"headerlink\" title=\"实现Bind\"></a>实现Bind</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-built_in\">Function</span>.prototype.myBind = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">context</span>)</span>&#123;<br>  <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-keyword\">typeof</span> <span class=\"hljs-keyword\">this</span> !== <span class=\"hljs-string\">'function'</span>)&#123;<br>      <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">TypeError</span>(<span class=\"hljs-string\">'Error'</span>)<br>  &#125;<br>  <span class=\"hljs-keyword\">const</span> _this = <span class=\"hljs-keyword\">this</span><br>  <span class=\"hljs-keyword\">const</span> args = [...arguments].slice(<span class=\"hljs-number\">1</span>)<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">F</span>(<span class=\"hljs-params\"></span>)</span>&#123;<br>    <span class=\"hljs-comment\">// 如果被当做构造函数调用</span><br>    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-keyword\">this</span> <span class=\"hljs-keyword\">instanceof</span> F)&#123;<br>      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> _this(...args, ...arguments)<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> _this.apply(context, args.concat(...arguments))<br>  &#125;<br>&#125;<br><br><span class=\"hljs-keyword\">let</span> user = &#123;<br>  name: <span class=\"hljs-string\">'Lucy'</span><br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">other</span>(<span class=\"hljs-params\">age, birthday</span>)</span>&#123;<br>  <span class=\"hljs-keyword\">this</span>.age = age<br>  <span class=\"hljs-keyword\">this</span>.birthday = birthday<br>&#125;<br><br><span class=\"hljs-keyword\">const</span> detail = other.myBind(user,<span class=\"hljs-number\">18</span>)<br>detail(<span class=\"hljs-number\">2020</span>)<br><span class=\"hljs-built_in\">console</span>.log(user) <span class=\"hljs-comment\">// &#123;name: \"Lucy\", age: 18, birthday: 2020&#125;</span><br><br><span class=\"hljs-keyword\">const</span> newDetail = other.myBind(user, <span class=\"hljs-number\">17</span>)<br><span class=\"hljs-keyword\">const</span> detail2 = <span class=\"hljs-keyword\">new</span> newDetail(<span class=\"hljs-number\">2020</span>)<br><span class=\"hljs-built_in\">console</span>.log(user) <span class=\"hljs-comment\">// &#123;name: \"Lucy\"&#125;</span><br><span class=\"hljs-built_in\">console</span>.log(detail2) <span class=\"hljs-comment\">// &#123;age: 17, birthday: 2020&#125;</span><br></code></pre></td></tr></table></figure>"},{"title":"Webpack基础入门01","date":"2020-05-19T04:49:41.000Z","_content":"&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;Webpack是一种前端资源构建工具,一个静态模块打包器。当我们在开发过程中使用一些浏览器并不能识别的语言时，比如：在js文件中使用ES Module语法、使用less语法等等，这时我们就需要一个工具将浏览器不能识别的语法编译成浏览器能够识别的语法，在过去我们会把这些语法通过一个个小工具去编译，这样维护起来会很麻烦，所以前端就提出了一个概念，叫做\"构建工具\"，构建工具的意思就是找一个大的工具将这些小的工具功能都包含进来，现在我们只要关注这个大工具就可以了。而Webpack就是构建工具的一种。Webpack会根据入口文件的依赖关系，将所有的资源(js/json/css/image/less/...)全部引进来，形成chunk代码块，然后会根据不同的资源进行不同的处理，比如将less编译成css，这个过程叫做打包，打包之后输出出去，输出去的文件我们叫做bundle，所以Webpack还是一个静态模块打包器。\n&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;webpack有五个核心概念，分别是：entry、output、loader、plugins、mode\n### 安装\n```js\n// 全局安装，我们可以使用webpack的相关指令\nnpm i webpack webpack-cli -global\n// 本地安装\nnpm i webpack webpack-cli -D\n```\n- 运行指令\n  - 开发环境：\n  ```js\n  // webpack会以./src/index.js为入口文件开始打包，打包后输出到./build/build.js\n  webpack ./src/index.js -o ./build/build.js --mode=development\n  ```\n  - 生产环境：\n  ```js\n  // webpack会以./src/index.js为入口文件开始打包，打包后输出到./build/build.js\n  webpack ./src/index.js -o ./build/build.js --mode=production\n  ```\n- 总结：\n  - 生产环境比开发环境多一个压缩js代码\n  - webpack能处理js/json，不能处理css/img等其他资源\n  - 生产环境和开发环境将ES6模块化编译成浏览器能识别的模块化\n\n### 打包资源文件\n&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;我们可以在根目录下建一个Webpack的配置文件webpack.config.js，用来指示Webpack做哪些事情（当我们运行webpack指令时，会加载里面的配置）\n&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;所有构建工具都是基于nodejs平台运行的,模块化默认采用commonjs\n- 打包样式资源（webpack.config.js）\n```js\n// resolve用来拼接绝对路径的方法\nconst { resolve } = require('path')\n\nmodule.exports = {\n  // webpack配置\n  // 入口起点\n  entry: './src/index.js',\n  // 输出\n  output: {\n    // 输出文件名\n    filname: 'build.js',\n    // 输出路径\n    // __dirname nodejs的变量，代表当前文件的目录绝对路径\n    path: resolve(__diranem,'build')\n  },\n  // loader的配置\n  module: {\n    rules: [\n      // 详细loader的配置\n      // 不同文件必须配置不同loader处理\n      {\n        // 匹配哪些文件\n        test: /\\.css/,\n        // 使用哪些loader进行处理\n        use: [\n          // use数组中loader执行顺序：从右到左，从下到上 依次执行\n          // 创建style标签，将js中的样式资源插入进去，添加到head中生效\n          'style-loader',\n          // 将css文件变成commonjs模块加载js中,里面内容是样式字符串\n          'css-loader'\n        ]\n      },\n      {\n        test: /\\.less/,\n        use: [\n          'style-loader',\n          'css-loader',\n          // 将less文件编译成css文件\n          // 需要下载less-loader less\n          'less-loader'\n        ]\n      }\n    ]\n  },\n  // plugins的配置\n  plugins: [\n    // 详细plugins的配置\n  ],\n  // 模式\n  mode: 'development' // 开发模式\n  // mode: 'production'\n}\n```\n注：以上都需要下载相应的loader，例如：```npm i style-loader css-loader -D```\n- 打包html资源\n打包html需要引入html-webpack-plugin插件\n```js\nconst { resolve } = require('path')\nimport HtmlWebpackPlugin from 'html-webpack-plugin'\n\nmodule.exports = {\n  entry: './src/index.js',\n  output: {\n    filename: 'built.js',\n    path: resolve(__dirname,'build')\n  },\n  module: {\n    rules: [\n      // loader配置\n    ]\n  },\n  plugins: [\n    // plugins的配置\n    // 功能：默认会创建一个空的HTML，自动引入打包输出的所有资源（JS/CSS）\n    // 如果需要有结构的html文件，可以通过传参的方式\n    new HtmlWebpackPlugin({\n      // 复制./src/index.html文件，并自动引入打包输出的所有资源（JS/CSS）\n      template: './src/index.html\n    })\n  ],\n  mode: 'development'\n}\n```\n- 打包图片资源\nindex.html\n```html\n  <div id=\"box1\"></div>\n  <div id=\"box2\"></div>\n  <div id=\"box3\"></div>\n  <img src=\"./01.jpg\" alt=\"01\">\n```\nindex.less\n```css\n#box1{\n  width: 100px;\n  height: 100px;\n  background-image: url('./01.jpg');\n  background-repeat: no-repeat;\n  background-size: 100% 100%;\n}\n#box2{\n  width: 100px;\n  height: 100px;\n  background-image: url('./02.jpg');\n  background-repeat: no-repeat;\n  background-size: 100% 100%;\n}\n#box3{\n  width: 100px;\n  height: 100px;\n  background-image: url('./03.jpg');\n  background-repeat: no-repeat;\n  background-size: 100% 100%;\n}\n```\nindex.js\n```js\nimport './index.less'\n```\nwebpack.config.js\n```js\nconst { resolve } =  require('path')\nconst HtmlWebpackPlugin = require('html-webpack-plugin')\n\nmodule.exports = {\n  entry: './src/index.js',\n  output: {\n    filename: 'built.js',\n    path: resolve(__dirname, 'build')\n  },\n  module: {\n    rules: [\n      {\n        test: /\\.less$/,\n        // 要使用多个loader处理用use\n        use: [\n          'style-loader',\n          'css-loader',\n          'less-loader'\n        ]\n      },\n      {\n        // 处理图片资源\n        // 处理不了html中img图片\n        test: /\\.(jpg|png|gif)$/,\n        // 使用一个loader\n        // 下载 url-loader file-loader\n        loader: 'url-loader',\n        options: {\n          // 图片大小小于8kb,就会被base64处理\n          // 优点：减少请求数量（减轻服务器压力）\n          // 缺点：图片体积会更大（文件请求速度会更慢）\n          limit: 8 * 1024,\n          // 问题：因为url-loader默认使用es6模块化解析，而html-loader引入图片是commonjs\n          // 解析时会出问题：[object Module]\n          // 解决：关闭url-loader的es6模块化，使用commonjs解析\n          // 注：目前新版本不会有这个问题\n          esModule: false,\n          // 给图片进行重命名\n          // [hash:10]取图片的hash的前10位\n          // [ext]取文件原来扩展名\n          name: '[hash:10].[ext]'\n        }\n      },\n      {\n        test: /\\.html$/,\n        // 处理html文件的img图片（负责引入img，从而能被url-loader进行处理）\n        loader: 'html-loader'\n      }\n    ]\n  },\n  plugins: [\n    new HtmlWebpackPlugin({\n      template: './src/index.html'\n    })\n  ],\n  mode: 'development'\n}\n```\n最新版本已经优化了url-loader，不会出现在html文件中直接引入图片解析时显示[object Module]这个问题\n- 打包其他资源\n其他资源一般指除了html、css、js以外的资源，比如说字体文件资源\n```js\nconst {resolve} = require('path')\nconst HtmlWebpackPlugin = require('html-webpack-plugin')\n\nmodule.exports = {\n  entry: './src/index.js',\n  output: {\n    filename: 'built.js',\n    path: resolve(__dirname,'build')\n  },\n  module: {\n    rules: [\n      {\n        test: /\\.css$/,\n        use: ['style-loader','css-loader']\n      },\n      // 打包其他资源（除了html/js/css资源以外的其他资源）\n      {\n        // 排除html/js/css资源\n        exclude: /\\.(html|js|css)$/,\n        loader: 'file-loader',\n        options: {\n          name: '[hash:10].[ext]'\n        }\n      }\n    ]\n  },\n  plugins: [\n    new HtmlWebpackPlugin({\n      template: './src/index.html'\n    })\n  ],\n  mode: 'development'\n}\n```\n### devServer\n&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;devServer用来自动化(自动编译，自动打开浏览器，自动刷新浏览器)，只会在内存中编译打包，不会有任何输出。\n```js\nconst {resolve} = require('path')\nconst HtmlWebpackPlugin = require('html-webpack-plugin')\n\nmodule.exports = {\n  entry: './src/index.js',\n  output: {\n    filename: 'built.js',\n    path: resolve(__dirname,'build')\n  },\n  module: {\n    rules: [\n      {\n        test: /\\.css$/,\n        use: ['style-loader','css-loader']\n      },\n      // 打包其他资源（除了html/js/css资源以外的其他资源）\n      {\n        // 排除html/js/css资源\n        exclude: /\\.(html|js|css)$/,\n        loader: 'file-loader',\n        options: {\n          name: '[hash:10].[ext]'\n        }\n      }\n    ]\n  },\n  plugins: [\n    new HtmlWebpackPlugin({\n      template: './src/index.html'\n    })\n  ],\n  mode: 'development',\n  devServer: {\n    // 项目构建后路径\n    contentBase: resolve(__dirname,'build'),\n    // 启动gzip压缩\n    compress: true,\n    // 端口号\n    port: 3000,\n    // 自动打开默认浏览器\n    open: true\n  }\n}\n```\n&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;在运行前需要安装webpack-dev-server包，指令为```npm i webpack-dev-server -D```，启动devServer指令为：```npx webpack-dev-server```，由于我们没有全局安装webpack-dev-server，所以要在前面加一个npx。\n&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;webpack指令会将打包结果输出出去，npx webpack-dev-server指令只会在内存中编译打包，没有输出。","source":"_posts/webpack.md","raw":"---\ntitle: Webpack基础入门01\ndate: 2020-05-19 12:49:41\ntags: webpack\ncategories:\n- 前端构建工具\n---\n&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;Webpack是一种前端资源构建工具,一个静态模块打包器。当我们在开发过程中使用一些浏览器并不能识别的语言时，比如：在js文件中使用ES Module语法、使用less语法等等，这时我们就需要一个工具将浏览器不能识别的语法编译成浏览器能够识别的语法，在过去我们会把这些语法通过一个个小工具去编译，这样维护起来会很麻烦，所以前端就提出了一个概念，叫做\"构建工具\"，构建工具的意思就是找一个大的工具将这些小的工具功能都包含进来，现在我们只要关注这个大工具就可以了。而Webpack就是构建工具的一种。Webpack会根据入口文件的依赖关系，将所有的资源(js/json/css/image/less/...)全部引进来，形成chunk代码块，然后会根据不同的资源进行不同的处理，比如将less编译成css，这个过程叫做打包，打包之后输出出去，输出去的文件我们叫做bundle，所以Webpack还是一个静态模块打包器。\n&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;webpack有五个核心概念，分别是：entry、output、loader、plugins、mode\n### 安装\n```js\n// 全局安装，我们可以使用webpack的相关指令\nnpm i webpack webpack-cli -global\n// 本地安装\nnpm i webpack webpack-cli -D\n```\n- 运行指令\n  - 开发环境：\n  ```js\n  // webpack会以./src/index.js为入口文件开始打包，打包后输出到./build/build.js\n  webpack ./src/index.js -o ./build/build.js --mode=development\n  ```\n  - 生产环境：\n  ```js\n  // webpack会以./src/index.js为入口文件开始打包，打包后输出到./build/build.js\n  webpack ./src/index.js -o ./build/build.js --mode=production\n  ```\n- 总结：\n  - 生产环境比开发环境多一个压缩js代码\n  - webpack能处理js/json，不能处理css/img等其他资源\n  - 生产环境和开发环境将ES6模块化编译成浏览器能识别的模块化\n\n### 打包资源文件\n&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;我们可以在根目录下建一个Webpack的配置文件webpack.config.js，用来指示Webpack做哪些事情（当我们运行webpack指令时，会加载里面的配置）\n&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;所有构建工具都是基于nodejs平台运行的,模块化默认采用commonjs\n- 打包样式资源（webpack.config.js）\n```js\n// resolve用来拼接绝对路径的方法\nconst { resolve } = require('path')\n\nmodule.exports = {\n  // webpack配置\n  // 入口起点\n  entry: './src/index.js',\n  // 输出\n  output: {\n    // 输出文件名\n    filname: 'build.js',\n    // 输出路径\n    // __dirname nodejs的变量，代表当前文件的目录绝对路径\n    path: resolve(__diranem,'build')\n  },\n  // loader的配置\n  module: {\n    rules: [\n      // 详细loader的配置\n      // 不同文件必须配置不同loader处理\n      {\n        // 匹配哪些文件\n        test: /\\.css/,\n        // 使用哪些loader进行处理\n        use: [\n          // use数组中loader执行顺序：从右到左，从下到上 依次执行\n          // 创建style标签，将js中的样式资源插入进去，添加到head中生效\n          'style-loader',\n          // 将css文件变成commonjs模块加载js中,里面内容是样式字符串\n          'css-loader'\n        ]\n      },\n      {\n        test: /\\.less/,\n        use: [\n          'style-loader',\n          'css-loader',\n          // 将less文件编译成css文件\n          // 需要下载less-loader less\n          'less-loader'\n        ]\n      }\n    ]\n  },\n  // plugins的配置\n  plugins: [\n    // 详细plugins的配置\n  ],\n  // 模式\n  mode: 'development' // 开发模式\n  // mode: 'production'\n}\n```\n注：以上都需要下载相应的loader，例如：```npm i style-loader css-loader -D```\n- 打包html资源\n打包html需要引入html-webpack-plugin插件\n```js\nconst { resolve } = require('path')\nimport HtmlWebpackPlugin from 'html-webpack-plugin'\n\nmodule.exports = {\n  entry: './src/index.js',\n  output: {\n    filename: 'built.js',\n    path: resolve(__dirname,'build')\n  },\n  module: {\n    rules: [\n      // loader配置\n    ]\n  },\n  plugins: [\n    // plugins的配置\n    // 功能：默认会创建一个空的HTML，自动引入打包输出的所有资源（JS/CSS）\n    // 如果需要有结构的html文件，可以通过传参的方式\n    new HtmlWebpackPlugin({\n      // 复制./src/index.html文件，并自动引入打包输出的所有资源（JS/CSS）\n      template: './src/index.html\n    })\n  ],\n  mode: 'development'\n}\n```\n- 打包图片资源\nindex.html\n```html\n  <div id=\"box1\"></div>\n  <div id=\"box2\"></div>\n  <div id=\"box3\"></div>\n  <img src=\"./01.jpg\" alt=\"01\">\n```\nindex.less\n```css\n#box1{\n  width: 100px;\n  height: 100px;\n  background-image: url('./01.jpg');\n  background-repeat: no-repeat;\n  background-size: 100% 100%;\n}\n#box2{\n  width: 100px;\n  height: 100px;\n  background-image: url('./02.jpg');\n  background-repeat: no-repeat;\n  background-size: 100% 100%;\n}\n#box3{\n  width: 100px;\n  height: 100px;\n  background-image: url('./03.jpg');\n  background-repeat: no-repeat;\n  background-size: 100% 100%;\n}\n```\nindex.js\n```js\nimport './index.less'\n```\nwebpack.config.js\n```js\nconst { resolve } =  require('path')\nconst HtmlWebpackPlugin = require('html-webpack-plugin')\n\nmodule.exports = {\n  entry: './src/index.js',\n  output: {\n    filename: 'built.js',\n    path: resolve(__dirname, 'build')\n  },\n  module: {\n    rules: [\n      {\n        test: /\\.less$/,\n        // 要使用多个loader处理用use\n        use: [\n          'style-loader',\n          'css-loader',\n          'less-loader'\n        ]\n      },\n      {\n        // 处理图片资源\n        // 处理不了html中img图片\n        test: /\\.(jpg|png|gif)$/,\n        // 使用一个loader\n        // 下载 url-loader file-loader\n        loader: 'url-loader',\n        options: {\n          // 图片大小小于8kb,就会被base64处理\n          // 优点：减少请求数量（减轻服务器压力）\n          // 缺点：图片体积会更大（文件请求速度会更慢）\n          limit: 8 * 1024,\n          // 问题：因为url-loader默认使用es6模块化解析，而html-loader引入图片是commonjs\n          // 解析时会出问题：[object Module]\n          // 解决：关闭url-loader的es6模块化，使用commonjs解析\n          // 注：目前新版本不会有这个问题\n          esModule: false,\n          // 给图片进行重命名\n          // [hash:10]取图片的hash的前10位\n          // [ext]取文件原来扩展名\n          name: '[hash:10].[ext]'\n        }\n      },\n      {\n        test: /\\.html$/,\n        // 处理html文件的img图片（负责引入img，从而能被url-loader进行处理）\n        loader: 'html-loader'\n      }\n    ]\n  },\n  plugins: [\n    new HtmlWebpackPlugin({\n      template: './src/index.html'\n    })\n  ],\n  mode: 'development'\n}\n```\n最新版本已经优化了url-loader，不会出现在html文件中直接引入图片解析时显示[object Module]这个问题\n- 打包其他资源\n其他资源一般指除了html、css、js以外的资源，比如说字体文件资源\n```js\nconst {resolve} = require('path')\nconst HtmlWebpackPlugin = require('html-webpack-plugin')\n\nmodule.exports = {\n  entry: './src/index.js',\n  output: {\n    filename: 'built.js',\n    path: resolve(__dirname,'build')\n  },\n  module: {\n    rules: [\n      {\n        test: /\\.css$/,\n        use: ['style-loader','css-loader']\n      },\n      // 打包其他资源（除了html/js/css资源以外的其他资源）\n      {\n        // 排除html/js/css资源\n        exclude: /\\.(html|js|css)$/,\n        loader: 'file-loader',\n        options: {\n          name: '[hash:10].[ext]'\n        }\n      }\n    ]\n  },\n  plugins: [\n    new HtmlWebpackPlugin({\n      template: './src/index.html'\n    })\n  ],\n  mode: 'development'\n}\n```\n### devServer\n&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;devServer用来自动化(自动编译，自动打开浏览器，自动刷新浏览器)，只会在内存中编译打包，不会有任何输出。\n```js\nconst {resolve} = require('path')\nconst HtmlWebpackPlugin = require('html-webpack-plugin')\n\nmodule.exports = {\n  entry: './src/index.js',\n  output: {\n    filename: 'built.js',\n    path: resolve(__dirname,'build')\n  },\n  module: {\n    rules: [\n      {\n        test: /\\.css$/,\n        use: ['style-loader','css-loader']\n      },\n      // 打包其他资源（除了html/js/css资源以外的其他资源）\n      {\n        // 排除html/js/css资源\n        exclude: /\\.(html|js|css)$/,\n        loader: 'file-loader',\n        options: {\n          name: '[hash:10].[ext]'\n        }\n      }\n    ]\n  },\n  plugins: [\n    new HtmlWebpackPlugin({\n      template: './src/index.html'\n    })\n  ],\n  mode: 'development',\n  devServer: {\n    // 项目构建后路径\n    contentBase: resolve(__dirname,'build'),\n    // 启动gzip压缩\n    compress: true,\n    // 端口号\n    port: 3000,\n    // 自动打开默认浏览器\n    open: true\n  }\n}\n```\n&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;在运行前需要安装webpack-dev-server包，指令为```npm i webpack-dev-server -D```，启动devServer指令为：```npx webpack-dev-server```，由于我们没有全局安装webpack-dev-server，所以要在前面加一个npx。\n&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;webpack指令会将打包结果输出出去，npx webpack-dev-server指令只会在内存中编译打包，没有输出。","slug":"webpack","published":1,"updated":"2020-05-19T14:05:35.191Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckfl1j03c001im4olg3szcpny","content":"<p>&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;Webpack是一种前端资源构建工具,一个静态模块打包器。当我们在开发过程中使用一些浏览器并不能识别的语言时，比如：在js文件中使用ES Module语法、使用less语法等等，这时我们就需要一个工具将浏览器不能识别的语法编译成浏览器能够识别的语法，在过去我们会把这些语法通过一个个小工具去编译，这样维护起来会很麻烦，所以前端就提出了一个概念，叫做”构建工具”，构建工具的意思就是找一个大的工具将这些小的工具功能都包含进来，现在我们只要关注这个大工具就可以了。而Webpack就是构建工具的一种。Webpack会根据入口文件的依赖关系，将所有的资源(js/json/css/image/less/…)全部引进来，形成chunk代码块，然后会根据不同的资源进行不同的处理，比如将less编译成css，这个过程叫做打包，打包之后输出出去，输出去的文件我们叫做bundle，所以Webpack还是一个静态模块打包器。<br>&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;webpack有五个核心概念，分别是：entry、output、loader、plugins、mode</p>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// 全局安装，我们可以使用webpack的相关指令</span><br>npm i webpack webpack-cli -global<br><span class=\"hljs-comment\">// 本地安装</span><br>npm i webpack webpack-cli -D<br></code></pre></td></tr></table></figure>\n<ul>\n<li>运行指令<ul>\n<li>开发环境：<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// webpack会以./src/index.js为入口文件开始打包，打包后输出到./build/build.js</span><br>webpack ./src/index.js -o ./build/build.js --mode=development<br></code></pre></td></tr></table></figure></li>\n<li>生产环境：<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// webpack会以./src/index.js为入口文件开始打包，打包后输出到./build/build.js</span><br>webpack ./src/index.js -o ./build/build.js --mode=production<br></code></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li>总结：<ul>\n<li>生产环境比开发环境多一个压缩js代码</li>\n<li>webpack能处理js/json，不能处理css/img等其他资源</li>\n<li>生产环境和开发环境将ES6模块化编译成浏览器能识别的模块化</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"打包资源文件\"><a href=\"#打包资源文件\" class=\"headerlink\" title=\"打包资源文件\"></a>打包资源文件</h3><p>&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;我们可以在根目录下建一个Webpack的配置文件webpack.config.js，用来指示Webpack做哪些事情（当我们运行webpack指令时，会加载里面的配置）<br>&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;所有构建工具都是基于nodejs平台运行的,模块化默认采用commonjs</p>\n<ul>\n<li>打包样式资源（webpack.config.js）<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// resolve用来拼接绝对路径的方法</span><br><span class=\"hljs-keyword\">const</span> &#123; resolve &#125; = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'path'</span>)<br><br><span class=\"hljs-built_in\">module</span>.exports = &#123;<br>  <span class=\"hljs-comment\">// webpack配置</span><br>  <span class=\"hljs-comment\">// 入口起点</span><br>  entry: <span class=\"hljs-string\">'./src/index.js'</span>,<br>  <span class=\"hljs-comment\">// 输出</span><br>  output: &#123;<br>    <span class=\"hljs-comment\">// 输出文件名</span><br>    filname: <span class=\"hljs-string\">'build.js'</span>,<br>    <span class=\"hljs-comment\">// 输出路径</span><br>    <span class=\"hljs-comment\">// __dirname nodejs的变量，代表当前文件的目录绝对路径</span><br>    path: resolve(__diranem,<span class=\"hljs-string\">'build'</span>)<br>  &#125;,<br>  <span class=\"hljs-comment\">// loader的配置</span><br>  <span class=\"hljs-built_in\">module</span>: &#123;<br>    rules: [<br>      <span class=\"hljs-comment\">// 详细loader的配置</span><br>      <span class=\"hljs-comment\">// 不同文件必须配置不同loader处理</span><br>      &#123;<br>        <span class=\"hljs-comment\">// 匹配哪些文件</span><br>        test: <span class=\"hljs-regexp\">/\\.css/</span>,<br>        <span class=\"hljs-comment\">// 使用哪些loader进行处理</span><br>        use: [<br>          <span class=\"hljs-comment\">// use数组中loader执行顺序：从右到左，从下到上 依次执行</span><br>          <span class=\"hljs-comment\">// 创建style标签，将js中的样式资源插入进去，添加到head中生效</span><br>          <span class=\"hljs-string\">'style-loader'</span>,<br>          <span class=\"hljs-comment\">// 将css文件变成commonjs模块加载js中,里面内容是样式字符串</span><br>          <span class=\"hljs-string\">'css-loader'</span><br>        ]<br>      &#125;,<br>      &#123;<br>        test: <span class=\"hljs-regexp\">/\\.less/</span>,<br>        use: [<br>          <span class=\"hljs-string\">'style-loader'</span>,<br>          <span class=\"hljs-string\">'css-loader'</span>,<br>          <span class=\"hljs-comment\">// 将less文件编译成css文件</span><br>          <span class=\"hljs-comment\">// 需要下载less-loader less</span><br>          <span class=\"hljs-string\">'less-loader'</span><br>        ]<br>      &#125;<br>    ]<br>  &#125;,<br>  <span class=\"hljs-comment\">// plugins的配置</span><br>  plugins: [<br>    <span class=\"hljs-comment\">// 详细plugins的配置</span><br>  ],<br>  <span class=\"hljs-comment\">// 模式</span><br>  mode: <span class=\"hljs-string\">'development'</span> <span class=\"hljs-comment\">// 开发模式</span><br>  <span class=\"hljs-comment\">// mode: 'production'</span><br>&#125;<br></code></pre></td></tr></table></figure>\n注：以上都需要下载相应的loader，例如：<code>npm i style-loader css-loader -D</code></li>\n<li>打包html资源<br>打包html需要引入html-webpack-plugin插件<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> &#123; resolve &#125; = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'path'</span>)<br><span class=\"hljs-keyword\">import</span> HtmlWebpackPlugin <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'html-webpack-plugin'</span><br><br><span class=\"hljs-built_in\">module</span>.exports = &#123;<br>  entry: <span class=\"hljs-string\">'./src/index.js'</span>,<br>  output: &#123;<br>    filename: <span class=\"hljs-string\">'built.js'</span>,<br>    path: resolve(__dirname,<span class=\"hljs-string\">'build'</span>)<br>  &#125;,<br>  <span class=\"hljs-built_in\">module</span>: &#123;<br>    rules: [<br>      <span class=\"hljs-comment\">// loader配置</span><br>    ]<br>  &#125;,<br>  plugins: [<br>    <span class=\"hljs-comment\">// plugins的配置</span><br>    <span class=\"hljs-comment\">// 功能：默认会创建一个空的HTML，自动引入打包输出的所有资源（JS/CSS）</span><br>    <span class=\"hljs-comment\">// 如果需要有结构的html文件，可以通过传参的方式</span><br>    <span class=\"hljs-keyword\">new</span> HtmlWebpackPlugin(&#123;<br>      <span class=\"hljs-comment\">// 复制./src/index.html文件，并自动引入打包输出的所有资源（JS/CSS）</span><br>      template: <span class=\"hljs-string\">'./src/index.html</span><br><span class=\"hljs-string\">    &#125;)</span><br><span class=\"hljs-string\">  ],</span><br><span class=\"hljs-string\">  mode: '</span>development<span class=\"hljs-string\">'</span><br><span class=\"hljs-string\">&#125;</span><br></code></pre></td></tr></table></figure></li>\n<li>打包图片资源<br>index.html<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"box1\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"box2\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"box3\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">img</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"./01.jpg\"</span> <span class=\"hljs-attr\">alt</span>=<span class=\"hljs-string\">\"01\"</span>&gt;</span><br></code></pre></td></tr></table></figure>\nindex.less<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-selector-id\">#box1</span>&#123;<br>  <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">100px</span>;<br>  <span class=\"hljs-attribute\">height</span>: <span class=\"hljs-number\">100px</span>;<br>  <span class=\"hljs-attribute\">background-image</span>: <span class=\"hljs-built_in\">url</span>(<span class=\"hljs-string\">'./01.jpg'</span>);<br>  <span class=\"hljs-attribute\">background-repeat</span>: no-repeat;<br>  <span class=\"hljs-attribute\">background-size</span>: <span class=\"hljs-number\">100%</span> <span class=\"hljs-number\">100%</span>;<br>&#125;<br><span class=\"hljs-selector-id\">#box2</span>&#123;<br>  <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">100px</span>;<br>  <span class=\"hljs-attribute\">height</span>: <span class=\"hljs-number\">100px</span>;<br>  <span class=\"hljs-attribute\">background-image</span>: <span class=\"hljs-built_in\">url</span>(<span class=\"hljs-string\">'./02.jpg'</span>);<br>  <span class=\"hljs-attribute\">background-repeat</span>: no-repeat;<br>  <span class=\"hljs-attribute\">background-size</span>: <span class=\"hljs-number\">100%</span> <span class=\"hljs-number\">100%</span>;<br>&#125;<br><span class=\"hljs-selector-id\">#box3</span>&#123;<br>  <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">100px</span>;<br>  <span class=\"hljs-attribute\">height</span>: <span class=\"hljs-number\">100px</span>;<br>  <span class=\"hljs-attribute\">background-image</span>: <span class=\"hljs-built_in\">url</span>(<span class=\"hljs-string\">'./03.jpg'</span>);<br>  <span class=\"hljs-attribute\">background-repeat</span>: no-repeat;<br>  <span class=\"hljs-attribute\">background-size</span>: <span class=\"hljs-number\">100%</span> <span class=\"hljs-number\">100%</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\nindex.js<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">'./index.less'</span><br></code></pre></td></tr></table></figure>\nwebpack.config.js<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> &#123; resolve &#125; =  <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'path'</span>)<br><span class=\"hljs-keyword\">const</span> HtmlWebpackPlugin = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'html-webpack-plugin'</span>)<br><br><span class=\"hljs-built_in\">module</span>.exports = &#123;<br>  entry: <span class=\"hljs-string\">'./src/index.js'</span>,<br>  output: &#123;<br>    filename: <span class=\"hljs-string\">'built.js'</span>,<br>    path: resolve(__dirname, <span class=\"hljs-string\">'build'</span>)<br>  &#125;,<br>  <span class=\"hljs-built_in\">module</span>: &#123;<br>    rules: [<br>      &#123;<br>        test: <span class=\"hljs-regexp\">/\\.less$/</span>,<br>        <span class=\"hljs-comment\">// 要使用多个loader处理用use</span><br>        use: [<br>          <span class=\"hljs-string\">'style-loader'</span>,<br>          <span class=\"hljs-string\">'css-loader'</span>,<br>          <span class=\"hljs-string\">'less-loader'</span><br>        ]<br>      &#125;,<br>      &#123;<br>        <span class=\"hljs-comment\">// 处理图片资源</span><br>        <span class=\"hljs-comment\">// 处理不了html中img图片</span><br>        test: <span class=\"hljs-regexp\">/\\.(jpg|png|gif)$/</span>,<br>        <span class=\"hljs-comment\">// 使用一个loader</span><br>        <span class=\"hljs-comment\">// 下载 url-loader file-loader</span><br>        loader: <span class=\"hljs-string\">'url-loader'</span>,<br>        options: &#123;<br>          <span class=\"hljs-comment\">// 图片大小小于8kb,就会被base64处理</span><br>          <span class=\"hljs-comment\">// 优点：减少请求数量（减轻服务器压力）</span><br>          <span class=\"hljs-comment\">// 缺点：图片体积会更大（文件请求速度会更慢）</span><br>          limit: <span class=\"hljs-number\">8</span> * <span class=\"hljs-number\">1024</span>,<br>          <span class=\"hljs-comment\">// 问题：因为url-loader默认使用es6模块化解析，而html-loader引入图片是commonjs</span><br>          <span class=\"hljs-comment\">// 解析时会出问题：[object Module]</span><br>          <span class=\"hljs-comment\">// 解决：关闭url-loader的es6模块化，使用commonjs解析</span><br>          <span class=\"hljs-comment\">// 注：目前新版本不会有这个问题</span><br>          esModule: <span class=\"hljs-literal\">false</span>,<br>          <span class=\"hljs-comment\">// 给图片进行重命名</span><br>          <span class=\"hljs-comment\">// [hash:10]取图片的hash的前10位</span><br>          <span class=\"hljs-comment\">// [ext]取文件原来扩展名</span><br>          name: <span class=\"hljs-string\">'[hash:10].[ext]'</span><br>        &#125;<br>      &#125;,<br>      &#123;<br>        test: <span class=\"hljs-regexp\">/\\.html$/</span>,<br>        <span class=\"hljs-comment\">// 处理html文件的img图片（负责引入img，从而能被url-loader进行处理）</span><br>        loader: <span class=\"hljs-string\">'html-loader'</span><br>      &#125;<br>    ]<br>  &#125;,<br>  plugins: [<br>    <span class=\"hljs-keyword\">new</span> HtmlWebpackPlugin(&#123;<br>      template: <span class=\"hljs-string\">'./src/index.html'</span><br>    &#125;)<br>  ],<br>  mode: <span class=\"hljs-string\">'development'</span><br>&#125;<br></code></pre></td></tr></table></figure>\n最新版本已经优化了url-loader，不会出现在html文件中直接引入图片解析时显示[object Module]这个问题</li>\n<li>打包其他资源<br>其他资源一般指除了html、css、js以外的资源，比如说字体文件资源<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> &#123;resolve&#125; = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'path'</span>)<br><span class=\"hljs-keyword\">const</span> HtmlWebpackPlugin = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'html-webpack-plugin'</span>)<br><br><span class=\"hljs-built_in\">module</span>.exports = &#123;<br>  entry: <span class=\"hljs-string\">'./src/index.js'</span>,<br>  output: &#123;<br>    filename: <span class=\"hljs-string\">'built.js'</span>,<br>    path: resolve(__dirname,<span class=\"hljs-string\">'build'</span>)<br>  &#125;,<br>  <span class=\"hljs-built_in\">module</span>: &#123;<br>    rules: [<br>      &#123;<br>        test: <span class=\"hljs-regexp\">/\\.css$/</span>,<br>        use: [<span class=\"hljs-string\">'style-loader'</span>,<span class=\"hljs-string\">'css-loader'</span>]<br>      &#125;,<br>      <span class=\"hljs-comment\">// 打包其他资源（除了html/js/css资源以外的其他资源）</span><br>      &#123;<br>        <span class=\"hljs-comment\">// 排除html/js/css资源</span><br>        exclude: <span class=\"hljs-regexp\">/\\.(html|js|css)$/</span>,<br>        loader: <span class=\"hljs-string\">'file-loader'</span>,<br>        options: &#123;<br>          name: <span class=\"hljs-string\">'[hash:10].[ext]'</span><br>        &#125;<br>      &#125;<br>    ]<br>  &#125;,<br>  plugins: [<br>    <span class=\"hljs-keyword\">new</span> HtmlWebpackPlugin(&#123;<br>      template: <span class=\"hljs-string\">'./src/index.html'</span><br>    &#125;)<br>  ],<br>  mode: <span class=\"hljs-string\">'development'</span><br>&#125;<br></code></pre></td></tr></table></figure>\n<h3 id=\"devServer\"><a href=\"#devServer\" class=\"headerlink\" title=\"devServer\"></a>devServer</h3>&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;devServer用来自动化(自动编译，自动打开浏览器，自动刷新浏览器)，只会在内存中编译打包，不会有任何输出。<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> &#123;resolve&#125; = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'path'</span>)<br><span class=\"hljs-keyword\">const</span> HtmlWebpackPlugin = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'html-webpack-plugin'</span>)<br><br><span class=\"hljs-built_in\">module</span>.exports = &#123;<br>  entry: <span class=\"hljs-string\">'./src/index.js'</span>,<br>  output: &#123;<br>    filename: <span class=\"hljs-string\">'built.js'</span>,<br>    path: resolve(__dirname,<span class=\"hljs-string\">'build'</span>)<br>  &#125;,<br>  <span class=\"hljs-built_in\">module</span>: &#123;<br>    rules: [<br>      &#123;<br>        test: <span class=\"hljs-regexp\">/\\.css$/</span>,<br>        use: [<span class=\"hljs-string\">'style-loader'</span>,<span class=\"hljs-string\">'css-loader'</span>]<br>      &#125;,<br>      <span class=\"hljs-comment\">// 打包其他资源（除了html/js/css资源以外的其他资源）</span><br>      &#123;<br>        <span class=\"hljs-comment\">// 排除html/js/css资源</span><br>        exclude: <span class=\"hljs-regexp\">/\\.(html|js|css)$/</span>,<br>        loader: <span class=\"hljs-string\">'file-loader'</span>,<br>        options: &#123;<br>          name: <span class=\"hljs-string\">'[hash:10].[ext]'</span><br>        &#125;<br>      &#125;<br>    ]<br>  &#125;,<br>  plugins: [<br>    <span class=\"hljs-keyword\">new</span> HtmlWebpackPlugin(&#123;<br>      template: <span class=\"hljs-string\">'./src/index.html'</span><br>    &#125;)<br>  ],<br>  mode: <span class=\"hljs-string\">'development'</span>,<br>  devServer: &#123;<br>    <span class=\"hljs-comment\">// 项目构建后路径</span><br>    contentBase: resolve(__dirname,<span class=\"hljs-string\">'build'</span>),<br>    <span class=\"hljs-comment\">// 启动gzip压缩</span><br>    compress: <span class=\"hljs-literal\">true</span>,<br>    <span class=\"hljs-comment\">// 端口号</span><br>    port: <span class=\"hljs-number\">3000</span>,<br>    <span class=\"hljs-comment\">// 自动打开默认浏览器</span><br>    open: <span class=\"hljs-literal\">true</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;在运行前需要安装webpack-dev-server包，指令为<code>npm i webpack-dev-server -D</code>，启动devServer指令为：<code>npx webpack-dev-server</code>，由于我们没有全局安装webpack-dev-server，所以要在前面加一个npx。<br>&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;webpack指令会将打包结果输出出去，npx webpack-dev-server指令只会在内存中编译打包，没有输出。</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;Webpack是一种前端资源构建工具,一个静态模块打包器。当我们在开发过程中使用一些浏览器并不能识别的语言时，比如：在js文件中使用ES Module语法、使用less语法等等，这时我们就需要一个工具将浏览器不能识别的语法编译成浏览器能够识别的语法，在过去我们会把这些语法通过一个个小工具去编译，这样维护起来会很麻烦，所以前端就提出了一个概念，叫做”构建工具”，构建工具的意思就是找一个大的工具将这些小的工具功能都包含进来，现在我们只要关注这个大工具就可以了。而Webpack就是构建工具的一种。Webpack会根据入口文件的依赖关系，将所有的资源(js/json/css/image/less/…)全部引进来，形成chunk代码块，然后会根据不同的资源进行不同的处理，比如将less编译成css，这个过程叫做打包，打包之后输出出去，输出去的文件我们叫做bundle，所以Webpack还是一个静态模块打包器。<br>&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;webpack有五个核心概念，分别是：entry、output、loader、plugins、mode</p>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// 全局安装，我们可以使用webpack的相关指令</span><br>npm i webpack webpack-cli -global<br><span class=\"hljs-comment\">// 本地安装</span><br>npm i webpack webpack-cli -D<br></code></pre></td></tr></table></figure>\n<ul>\n<li>运行指令<ul>\n<li>开发环境：<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// webpack会以./src/index.js为入口文件开始打包，打包后输出到./build/build.js</span><br>webpack ./src/index.js -o ./build/build.js --mode=development<br></code></pre></td></tr></table></figure></li>\n<li>生产环境：<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// webpack会以./src/index.js为入口文件开始打包，打包后输出到./build/build.js</span><br>webpack ./src/index.js -o ./build/build.js --mode=production<br></code></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li>总结：<ul>\n<li>生产环境比开发环境多一个压缩js代码</li>\n<li>webpack能处理js/json，不能处理css/img等其他资源</li>\n<li>生产环境和开发环境将ES6模块化编译成浏览器能识别的模块化</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"打包资源文件\"><a href=\"#打包资源文件\" class=\"headerlink\" title=\"打包资源文件\"></a>打包资源文件</h3><p>&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;我们可以在根目录下建一个Webpack的配置文件webpack.config.js，用来指示Webpack做哪些事情（当我们运行webpack指令时，会加载里面的配置）<br>&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;所有构建工具都是基于nodejs平台运行的,模块化默认采用commonjs</p>\n<ul>\n<li>打包样式资源（webpack.config.js）<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// resolve用来拼接绝对路径的方法</span><br><span class=\"hljs-keyword\">const</span> &#123; resolve &#125; = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'path'</span>)<br><br><span class=\"hljs-built_in\">module</span>.exports = &#123;<br>  <span class=\"hljs-comment\">// webpack配置</span><br>  <span class=\"hljs-comment\">// 入口起点</span><br>  entry: <span class=\"hljs-string\">'./src/index.js'</span>,<br>  <span class=\"hljs-comment\">// 输出</span><br>  output: &#123;<br>    <span class=\"hljs-comment\">// 输出文件名</span><br>    filname: <span class=\"hljs-string\">'build.js'</span>,<br>    <span class=\"hljs-comment\">// 输出路径</span><br>    <span class=\"hljs-comment\">// __dirname nodejs的变量，代表当前文件的目录绝对路径</span><br>    path: resolve(__diranem,<span class=\"hljs-string\">'build'</span>)<br>  &#125;,<br>  <span class=\"hljs-comment\">// loader的配置</span><br>  <span class=\"hljs-built_in\">module</span>: &#123;<br>    rules: [<br>      <span class=\"hljs-comment\">// 详细loader的配置</span><br>      <span class=\"hljs-comment\">// 不同文件必须配置不同loader处理</span><br>      &#123;<br>        <span class=\"hljs-comment\">// 匹配哪些文件</span><br>        test: <span class=\"hljs-regexp\">/\\.css/</span>,<br>        <span class=\"hljs-comment\">// 使用哪些loader进行处理</span><br>        use: [<br>          <span class=\"hljs-comment\">// use数组中loader执行顺序：从右到左，从下到上 依次执行</span><br>          <span class=\"hljs-comment\">// 创建style标签，将js中的样式资源插入进去，添加到head中生效</span><br>          <span class=\"hljs-string\">'style-loader'</span>,<br>          <span class=\"hljs-comment\">// 将css文件变成commonjs模块加载js中,里面内容是样式字符串</span><br>          <span class=\"hljs-string\">'css-loader'</span><br>        ]<br>      &#125;,<br>      &#123;<br>        test: <span class=\"hljs-regexp\">/\\.less/</span>,<br>        use: [<br>          <span class=\"hljs-string\">'style-loader'</span>,<br>          <span class=\"hljs-string\">'css-loader'</span>,<br>          <span class=\"hljs-comment\">// 将less文件编译成css文件</span><br>          <span class=\"hljs-comment\">// 需要下载less-loader less</span><br>          <span class=\"hljs-string\">'less-loader'</span><br>        ]<br>      &#125;<br>    ]<br>  &#125;,<br>  <span class=\"hljs-comment\">// plugins的配置</span><br>  plugins: [<br>    <span class=\"hljs-comment\">// 详细plugins的配置</span><br>  ],<br>  <span class=\"hljs-comment\">// 模式</span><br>  mode: <span class=\"hljs-string\">'development'</span> <span class=\"hljs-comment\">// 开发模式</span><br>  <span class=\"hljs-comment\">// mode: 'production'</span><br>&#125;<br></code></pre></td></tr></table></figure>\n注：以上都需要下载相应的loader，例如：<code>npm i style-loader css-loader -D</code></li>\n<li>打包html资源<br>打包html需要引入html-webpack-plugin插件<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> &#123; resolve &#125; = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'path'</span>)<br><span class=\"hljs-keyword\">import</span> HtmlWebpackPlugin <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'html-webpack-plugin'</span><br><br><span class=\"hljs-built_in\">module</span>.exports = &#123;<br>  entry: <span class=\"hljs-string\">'./src/index.js'</span>,<br>  output: &#123;<br>    filename: <span class=\"hljs-string\">'built.js'</span>,<br>    path: resolve(__dirname,<span class=\"hljs-string\">'build'</span>)<br>  &#125;,<br>  <span class=\"hljs-built_in\">module</span>: &#123;<br>    rules: [<br>      <span class=\"hljs-comment\">// loader配置</span><br>    ]<br>  &#125;,<br>  plugins: [<br>    <span class=\"hljs-comment\">// plugins的配置</span><br>    <span class=\"hljs-comment\">// 功能：默认会创建一个空的HTML，自动引入打包输出的所有资源（JS/CSS）</span><br>    <span class=\"hljs-comment\">// 如果需要有结构的html文件，可以通过传参的方式</span><br>    <span class=\"hljs-keyword\">new</span> HtmlWebpackPlugin(&#123;<br>      <span class=\"hljs-comment\">// 复制./src/index.html文件，并自动引入打包输出的所有资源（JS/CSS）</span><br>      template: <span class=\"hljs-string\">'./src/index.html</span><br><span class=\"hljs-string\">    &#125;)</span><br><span class=\"hljs-string\">  ],</span><br><span class=\"hljs-string\">  mode: '</span>development<span class=\"hljs-string\">'</span><br><span class=\"hljs-string\">&#125;</span><br></code></pre></td></tr></table></figure></li>\n<li>打包图片资源<br>index.html<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"box1\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"box2\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"box3\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">img</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"./01.jpg\"</span> <span class=\"hljs-attr\">alt</span>=<span class=\"hljs-string\">\"01\"</span>&gt;</span><br></code></pre></td></tr></table></figure>\nindex.less<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-selector-id\">#box1</span>&#123;<br>  <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">100px</span>;<br>  <span class=\"hljs-attribute\">height</span>: <span class=\"hljs-number\">100px</span>;<br>  <span class=\"hljs-attribute\">background-image</span>: <span class=\"hljs-built_in\">url</span>(<span class=\"hljs-string\">'./01.jpg'</span>);<br>  <span class=\"hljs-attribute\">background-repeat</span>: no-repeat;<br>  <span class=\"hljs-attribute\">background-size</span>: <span class=\"hljs-number\">100%</span> <span class=\"hljs-number\">100%</span>;<br>&#125;<br><span class=\"hljs-selector-id\">#box2</span>&#123;<br>  <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">100px</span>;<br>  <span class=\"hljs-attribute\">height</span>: <span class=\"hljs-number\">100px</span>;<br>  <span class=\"hljs-attribute\">background-image</span>: <span class=\"hljs-built_in\">url</span>(<span class=\"hljs-string\">'./02.jpg'</span>);<br>  <span class=\"hljs-attribute\">background-repeat</span>: no-repeat;<br>  <span class=\"hljs-attribute\">background-size</span>: <span class=\"hljs-number\">100%</span> <span class=\"hljs-number\">100%</span>;<br>&#125;<br><span class=\"hljs-selector-id\">#box3</span>&#123;<br>  <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">100px</span>;<br>  <span class=\"hljs-attribute\">height</span>: <span class=\"hljs-number\">100px</span>;<br>  <span class=\"hljs-attribute\">background-image</span>: <span class=\"hljs-built_in\">url</span>(<span class=\"hljs-string\">'./03.jpg'</span>);<br>  <span class=\"hljs-attribute\">background-repeat</span>: no-repeat;<br>  <span class=\"hljs-attribute\">background-size</span>: <span class=\"hljs-number\">100%</span> <span class=\"hljs-number\">100%</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\nindex.js<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">'./index.less'</span><br></code></pre></td></tr></table></figure>\nwebpack.config.js<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> &#123; resolve &#125; =  <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'path'</span>)<br><span class=\"hljs-keyword\">const</span> HtmlWebpackPlugin = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'html-webpack-plugin'</span>)<br><br><span class=\"hljs-built_in\">module</span>.exports = &#123;<br>  entry: <span class=\"hljs-string\">'./src/index.js'</span>,<br>  output: &#123;<br>    filename: <span class=\"hljs-string\">'built.js'</span>,<br>    path: resolve(__dirname, <span class=\"hljs-string\">'build'</span>)<br>  &#125;,<br>  <span class=\"hljs-built_in\">module</span>: &#123;<br>    rules: [<br>      &#123;<br>        test: <span class=\"hljs-regexp\">/\\.less$/</span>,<br>        <span class=\"hljs-comment\">// 要使用多个loader处理用use</span><br>        use: [<br>          <span class=\"hljs-string\">'style-loader'</span>,<br>          <span class=\"hljs-string\">'css-loader'</span>,<br>          <span class=\"hljs-string\">'less-loader'</span><br>        ]<br>      &#125;,<br>      &#123;<br>        <span class=\"hljs-comment\">// 处理图片资源</span><br>        <span class=\"hljs-comment\">// 处理不了html中img图片</span><br>        test: <span class=\"hljs-regexp\">/\\.(jpg|png|gif)$/</span>,<br>        <span class=\"hljs-comment\">// 使用一个loader</span><br>        <span class=\"hljs-comment\">// 下载 url-loader file-loader</span><br>        loader: <span class=\"hljs-string\">'url-loader'</span>,<br>        options: &#123;<br>          <span class=\"hljs-comment\">// 图片大小小于8kb,就会被base64处理</span><br>          <span class=\"hljs-comment\">// 优点：减少请求数量（减轻服务器压力）</span><br>          <span class=\"hljs-comment\">// 缺点：图片体积会更大（文件请求速度会更慢）</span><br>          limit: <span class=\"hljs-number\">8</span> * <span class=\"hljs-number\">1024</span>,<br>          <span class=\"hljs-comment\">// 问题：因为url-loader默认使用es6模块化解析，而html-loader引入图片是commonjs</span><br>          <span class=\"hljs-comment\">// 解析时会出问题：[object Module]</span><br>          <span class=\"hljs-comment\">// 解决：关闭url-loader的es6模块化，使用commonjs解析</span><br>          <span class=\"hljs-comment\">// 注：目前新版本不会有这个问题</span><br>          esModule: <span class=\"hljs-literal\">false</span>,<br>          <span class=\"hljs-comment\">// 给图片进行重命名</span><br>          <span class=\"hljs-comment\">// [hash:10]取图片的hash的前10位</span><br>          <span class=\"hljs-comment\">// [ext]取文件原来扩展名</span><br>          name: <span class=\"hljs-string\">'[hash:10].[ext]'</span><br>        &#125;<br>      &#125;,<br>      &#123;<br>        test: <span class=\"hljs-regexp\">/\\.html$/</span>,<br>        <span class=\"hljs-comment\">// 处理html文件的img图片（负责引入img，从而能被url-loader进行处理）</span><br>        loader: <span class=\"hljs-string\">'html-loader'</span><br>      &#125;<br>    ]<br>  &#125;,<br>  plugins: [<br>    <span class=\"hljs-keyword\">new</span> HtmlWebpackPlugin(&#123;<br>      template: <span class=\"hljs-string\">'./src/index.html'</span><br>    &#125;)<br>  ],<br>  mode: <span class=\"hljs-string\">'development'</span><br>&#125;<br></code></pre></td></tr></table></figure>\n最新版本已经优化了url-loader，不会出现在html文件中直接引入图片解析时显示[object Module]这个问题</li>\n<li>打包其他资源<br>其他资源一般指除了html、css、js以外的资源，比如说字体文件资源<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> &#123;resolve&#125; = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'path'</span>)<br><span class=\"hljs-keyword\">const</span> HtmlWebpackPlugin = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'html-webpack-plugin'</span>)<br><br><span class=\"hljs-built_in\">module</span>.exports = &#123;<br>  entry: <span class=\"hljs-string\">'./src/index.js'</span>,<br>  output: &#123;<br>    filename: <span class=\"hljs-string\">'built.js'</span>,<br>    path: resolve(__dirname,<span class=\"hljs-string\">'build'</span>)<br>  &#125;,<br>  <span class=\"hljs-built_in\">module</span>: &#123;<br>    rules: [<br>      &#123;<br>        test: <span class=\"hljs-regexp\">/\\.css$/</span>,<br>        use: [<span class=\"hljs-string\">'style-loader'</span>,<span class=\"hljs-string\">'css-loader'</span>]<br>      &#125;,<br>      <span class=\"hljs-comment\">// 打包其他资源（除了html/js/css资源以外的其他资源）</span><br>      &#123;<br>        <span class=\"hljs-comment\">// 排除html/js/css资源</span><br>        exclude: <span class=\"hljs-regexp\">/\\.(html|js|css)$/</span>,<br>        loader: <span class=\"hljs-string\">'file-loader'</span>,<br>        options: &#123;<br>          name: <span class=\"hljs-string\">'[hash:10].[ext]'</span><br>        &#125;<br>      &#125;<br>    ]<br>  &#125;,<br>  plugins: [<br>    <span class=\"hljs-keyword\">new</span> HtmlWebpackPlugin(&#123;<br>      template: <span class=\"hljs-string\">'./src/index.html'</span><br>    &#125;)<br>  ],<br>  mode: <span class=\"hljs-string\">'development'</span><br>&#125;<br></code></pre></td></tr></table></figure>\n<h3 id=\"devServer\"><a href=\"#devServer\" class=\"headerlink\" title=\"devServer\"></a>devServer</h3>&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;devServer用来自动化(自动编译，自动打开浏览器，自动刷新浏览器)，只会在内存中编译打包，不会有任何输出。<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> &#123;resolve&#125; = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'path'</span>)<br><span class=\"hljs-keyword\">const</span> HtmlWebpackPlugin = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'html-webpack-plugin'</span>)<br><br><span class=\"hljs-built_in\">module</span>.exports = &#123;<br>  entry: <span class=\"hljs-string\">'./src/index.js'</span>,<br>  output: &#123;<br>    filename: <span class=\"hljs-string\">'built.js'</span>,<br>    path: resolve(__dirname,<span class=\"hljs-string\">'build'</span>)<br>  &#125;,<br>  <span class=\"hljs-built_in\">module</span>: &#123;<br>    rules: [<br>      &#123;<br>        test: <span class=\"hljs-regexp\">/\\.css$/</span>,<br>        use: [<span class=\"hljs-string\">'style-loader'</span>,<span class=\"hljs-string\">'css-loader'</span>]<br>      &#125;,<br>      <span class=\"hljs-comment\">// 打包其他资源（除了html/js/css资源以外的其他资源）</span><br>      &#123;<br>        <span class=\"hljs-comment\">// 排除html/js/css资源</span><br>        exclude: <span class=\"hljs-regexp\">/\\.(html|js|css)$/</span>,<br>        loader: <span class=\"hljs-string\">'file-loader'</span>,<br>        options: &#123;<br>          name: <span class=\"hljs-string\">'[hash:10].[ext]'</span><br>        &#125;<br>      &#125;<br>    ]<br>  &#125;,<br>  plugins: [<br>    <span class=\"hljs-keyword\">new</span> HtmlWebpackPlugin(&#123;<br>      template: <span class=\"hljs-string\">'./src/index.html'</span><br>    &#125;)<br>  ],<br>  mode: <span class=\"hljs-string\">'development'</span>,<br>  devServer: &#123;<br>    <span class=\"hljs-comment\">// 项目构建后路径</span><br>    contentBase: resolve(__dirname,<span class=\"hljs-string\">'build'</span>),<br>    <span class=\"hljs-comment\">// 启动gzip压缩</span><br>    compress: <span class=\"hljs-literal\">true</span>,<br>    <span class=\"hljs-comment\">// 端口号</span><br>    port: <span class=\"hljs-number\">3000</span>,<br>    <span class=\"hljs-comment\">// 自动打开默认浏览器</span><br>    open: <span class=\"hljs-literal\">true</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;在运行前需要安装webpack-dev-server包，指令为<code>npm i webpack-dev-server -D</code>，启动devServer指令为：<code>npx webpack-dev-server</code>，由于我们没有全局安装webpack-dev-server，所以要在前面加一个npx。<br>&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;webpack指令会将打包结果输出出去，npx webpack-dev-server指令只会在内存中编译打包，没有输出。</li>\n</ul>\n"},{"title":"Webpack基础入门02","date":"2020-05-19T15:43:27.000Z","_content":"### 开发环境\n&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;Webpack 可以配置两种环境模式，即：```开发环境```和```生产环境```。开发环境是 能让代码本地调试运行的环境，生产环境是 能让代码优化上线运行的环境。\n\n&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;我们写的源代码里面包含了 es6 语法, less 文件要经过webpack进行编译处理,比如将 less 文件编译成 css 文件，把 es6 语法编译成浏览器能够识别的语法，然后输出的 bundle 这个资源文件就可以被浏览器运行了，为了让开发者更轻松，这里还添加了一些自动化工作，比如自动打开浏览器，自动刷新，自动编译等等一些咧操作，让我们的效率更高，这就是开发环境所做的事情。\n\n&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;我们的样式在之前处理是整合到js中的，如果让样式在 js 中，会让 js 体积变得很大，下载的很慢，同时，这里会先加载js，再通过创建```<style>```标签，会出现闪屏的现象，所以我们要将css从js文件中提取出来，还有代码压缩，兼容性处理都可以让带吗更快，性能更好，能够平稳的运行，这样我们要做的事情会很多，如果把这些都放在开发环境下，那开发环境要做的事情就太多了，打包速度就会很慢，不利于我们开发，所以这些事情我们要放在生产环境上去做。\n\n### 提取css成单独文件\n&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;这里需要用到一个新的插件 ```miniCssExtractPlugin```，引用这个插件之后打包出来的样式是以 ```<link>```  引入，而不是 ```<style>``` 标签，所以不会出现闪屏现象，并且 css 文件和 js 文件分割开了，js 文件的体积也没有那么大，解析速度会更好一些。\n\nwebpack.config.js\n```js\nconst { resolve } = require('path')\nconst HtmlWebpackPlugin = require('html-webpack-plugin')\nconst miniCssExtractPlugin = require('mini-css-extract-plugin')\n\nmodule.exports = {\n    entry: './src/js/index.js',\n    output: {\n        filename: 'js/built.js',\n        path: resolve(__dirname, 'build')\n    },\n    module: {\n        rules: [\n            {\n                test: /\\.css$/,\n                use: [\n                    // 创建style标签，将样式放入\n                    // 'style-loader', \n                    // 这个loader取代style-loader。作用：提取js中的css成单独文件\n                    miniCssExtractPlugin.loader,\n                    // 将css整合到js文件中\n                    'css-loader'\n                ]\n            }\n        ]\n    },\n    plugins: [\n        new HtmlWebpackPlugin({\n            template: './src/index.html'\n        }),\n        new miniCssExtractPlugin({\n            // 对输出的css文件进行重命名\n            filename: 'css/built.css'\n        })\n    ],\n    mode: 'development'\n}\n```\n目录文件\n\n![](./webpack02/catalogue.jpeg)\n\n打包输出的 index.html 文件\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Document</title>\n<link href=\"css/built.css\" rel=\"stylesheet\"></head>\n<body>\n    <div id=\"box1\"></div>\n    <div id=\"box2\"></div>\n<script src=\"js/built.js\"></script></body>\n</html>\n```\n\n### css的兼容性处理\n&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;有时我们写的 css 样式并不是在所有的浏览器上都兼容，而 webpack 的 postcss-loader 会帮助我们解决这个问题。\n\nwebpack.config.js\n```js\nconst { resolve } = require('path')\nconst HtmlWebpackPlugin = require('html-webpack-plugin')\nconst miniCssExtractPlugin = require('mini-css-extract-plugin')\n\n// 设置nodejs环境变量\nprocess.env.NODE_ENV = 'development'\n\nmodule.exports = {\n    entry: './src/js/index.js',\n    output: {\n        filename: 'js/built.js',\n        path: resolve(__dirname, 'build')\n    },\n    module: {\n        rules: [\n            {\n                test: /\\.css$/,\n                use: [\n                    miniCssExtractPlugin.loader,\n                    // 这种写法是使用loader的默认配置\n                    'css-loader',\n                    /*\n                        css兼容性处理：postcss --> postcss-loader postcss-preset-env，下载这两个包\n\n                        postcss-preset-env插件帮postcss找到package.json中 browserslist 里面的配置，通过配置加载指定的css兼容性样式\n\n                        “browserslist”:{\n                            开发环境 --> 设置node环境变量 : process.env.NODE_ENV = development\n                            \"development\":[\n                                \"last 1 chrome version\",\n                                \"last 1 firefox version\",\n                                \"last 1 safari version\"\n                            ],\n                            生产环境：默认是看生产环境\n                            \"production\":[\n                                \">0.2%\",\n                                \"not dead\",\n                                \"not op_mini all\"\n                            ]\n                        }\n                    */\n                   // 使用loader的默认配置\n                   // \"postcss-loader\"\n                   // 修改loader的配置\n                   {\n                       loader: 'postcss-loader',\n                       options: {\n                           // 固定写法\n                           ident: 'postcss',\n                           plugins: ()=> [\n                               // postcss插件\n                               require('postcss-preset-env')()\n                           ]\n                       }\n                   }\n                ]\n            }\n        ]\n    },\n    plugins: [\n        new HtmlWebpackPlugin({\n            template: './src/index.html'\n        }),\n        new miniCssExtractPlugin({\n            filename: 'css/built.css'\n        })\n    ],\n    mode: 'development'\n}\n```\npackage.json\n\n```json\n{\n  \"name\": \"webpack_code\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n  },\n  \"author\": \"\",\n  \"license\": \"ISC\",\n  \"devDependencies\": {\n    \"css-loader\": \"^3.5.3\",\n    \"file-loader\": \"^6.0.0\",\n    \"html-loader\": \"^1.1.0\",\n    \"html-webpack-plugin\": \"^4.3.0\",\n    \"less\": \"^3.11.1\",\n    \"less-loader\": \"^6.1.0\",\n    \"mini-css-extract-plugin\": \"^0.9.0\",\n    \"postcss-loader\": \"^3.0.0\",\n    \"postcss-preset-env\": \"^6.7.0\",\n    \"style-loader\": \"^1.2.1\",\n    \"url-loader\": \"^4.1.0\",\n    \"webpack\": \"^4.43.0\",\n    \"webpack-cli\": \"^3.3.11\",\n    \"webpack-dev-server\": \"^3.11.0\"\n  },\n  \"browserslist\":{\n    \"development\":[\n        \"last 1 chrome version\",\n        \"last 1 firefox version\",\n        \"last 1 safari version\"\n    ],\n    \"production\":[\n        \">0.2%\",\n        \"not dead\",\n        \"not op_mini all\"\n    ]\n  }\n}\n```\n\na.css\n\n```css\n#box1 {\n    width: 100px;\n    height: 100px;\n    background-color: pink;\n    display: flex;\n    backface-visibility: hidden;\n}\n```\n\n打包之后的css文件\n```css\n#box1 {\n    width: 100px;\n    height: 100px;\n    background-color: pink;\n    display: flex;\n    -webkit-backface-visibility: hidden;\n            backface-visibility: hidden;\n}\n#box2 {\n    width: 200px;\n    height: 200px;\n    background-color: deeppink;\n}\n```\n\n### 压缩css\n\nwebpack.config.js\n```js\nconst { resolve } = require('path')\nconst HtmlWebpackPlugin = require('html-webpack-plugin')\nconst miniCssExtractPlugin = require('mini-css-extract-plugin')\nconst optimizeCssAssetsWebpackPlugin = require('optimize-css-assets-webpack-plugin')\n\nprocess.env.NODE_ENV = 'development'\n\n// optimize-css-assets-webpack-plugin\n\nmodule.exports = {\n    entry: './src/js/index.js',\n    output: {\n        filename: 'js/built.js',\n        path: resolve(__dirname, 'build')\n    },\n    module: {\n        rules: [\n            {\n                test: /\\.css$/,\n                use: [\n                    miniCssExtractPlugin.loader,\n                    'css-loader',\n                   {\n                       loader: 'postcss-loader',\n                       options: {\n                           ident: 'postcss',\n                           plugins: ()=> [\n                               require('postcss-preset-env')()\n                           ]\n                       }\n                   }\n                ]\n            }\n        ]\n    },\n    plugins: [\n        new HtmlWebpackPlugin({\n            template: './src/index.html'\n        }),\n        new miniCssExtractPlugin({\n            filename: 'css/built.css'\n        }),\n        // 压缩css\n        new optimizeCssAssetsWebpackPlugin()\n    ],\n    mode: 'development'\n}\n```\n使用 optimize-css-assets-webpack-plugin 插件就可以压缩css\n","source":"_posts/webpack02.md","raw":"---\ntitle: Webpack基础入门02\ndate: 2020-05-19 23:43:27\ntags: webpack\ncategories:\n- 前端构建工具\n---\n### 开发环境\n&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;Webpack 可以配置两种环境模式，即：```开发环境```和```生产环境```。开发环境是 能让代码本地调试运行的环境，生产环境是 能让代码优化上线运行的环境。\n\n&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;我们写的源代码里面包含了 es6 语法, less 文件要经过webpack进行编译处理,比如将 less 文件编译成 css 文件，把 es6 语法编译成浏览器能够识别的语法，然后输出的 bundle 这个资源文件就可以被浏览器运行了，为了让开发者更轻松，这里还添加了一些自动化工作，比如自动打开浏览器，自动刷新，自动编译等等一些咧操作，让我们的效率更高，这就是开发环境所做的事情。\n\n&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;我们的样式在之前处理是整合到js中的，如果让样式在 js 中，会让 js 体积变得很大，下载的很慢，同时，这里会先加载js，再通过创建```<style>```标签，会出现闪屏的现象，所以我们要将css从js文件中提取出来，还有代码压缩，兼容性处理都可以让带吗更快，性能更好，能够平稳的运行，这样我们要做的事情会很多，如果把这些都放在开发环境下，那开发环境要做的事情就太多了，打包速度就会很慢，不利于我们开发，所以这些事情我们要放在生产环境上去做。\n\n### 提取css成单独文件\n&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;这里需要用到一个新的插件 ```miniCssExtractPlugin```，引用这个插件之后打包出来的样式是以 ```<link>```  引入，而不是 ```<style>``` 标签，所以不会出现闪屏现象，并且 css 文件和 js 文件分割开了，js 文件的体积也没有那么大，解析速度会更好一些。\n\nwebpack.config.js\n```js\nconst { resolve } = require('path')\nconst HtmlWebpackPlugin = require('html-webpack-plugin')\nconst miniCssExtractPlugin = require('mini-css-extract-plugin')\n\nmodule.exports = {\n    entry: './src/js/index.js',\n    output: {\n        filename: 'js/built.js',\n        path: resolve(__dirname, 'build')\n    },\n    module: {\n        rules: [\n            {\n                test: /\\.css$/,\n                use: [\n                    // 创建style标签，将样式放入\n                    // 'style-loader', \n                    // 这个loader取代style-loader。作用：提取js中的css成单独文件\n                    miniCssExtractPlugin.loader,\n                    // 将css整合到js文件中\n                    'css-loader'\n                ]\n            }\n        ]\n    },\n    plugins: [\n        new HtmlWebpackPlugin({\n            template: './src/index.html'\n        }),\n        new miniCssExtractPlugin({\n            // 对输出的css文件进行重命名\n            filename: 'css/built.css'\n        })\n    ],\n    mode: 'development'\n}\n```\n目录文件\n\n![](./webpack02/catalogue.jpeg)\n\n打包输出的 index.html 文件\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Document</title>\n<link href=\"css/built.css\" rel=\"stylesheet\"></head>\n<body>\n    <div id=\"box1\"></div>\n    <div id=\"box2\"></div>\n<script src=\"js/built.js\"></script></body>\n</html>\n```\n\n### css的兼容性处理\n&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;有时我们写的 css 样式并不是在所有的浏览器上都兼容，而 webpack 的 postcss-loader 会帮助我们解决这个问题。\n\nwebpack.config.js\n```js\nconst { resolve } = require('path')\nconst HtmlWebpackPlugin = require('html-webpack-plugin')\nconst miniCssExtractPlugin = require('mini-css-extract-plugin')\n\n// 设置nodejs环境变量\nprocess.env.NODE_ENV = 'development'\n\nmodule.exports = {\n    entry: './src/js/index.js',\n    output: {\n        filename: 'js/built.js',\n        path: resolve(__dirname, 'build')\n    },\n    module: {\n        rules: [\n            {\n                test: /\\.css$/,\n                use: [\n                    miniCssExtractPlugin.loader,\n                    // 这种写法是使用loader的默认配置\n                    'css-loader',\n                    /*\n                        css兼容性处理：postcss --> postcss-loader postcss-preset-env，下载这两个包\n\n                        postcss-preset-env插件帮postcss找到package.json中 browserslist 里面的配置，通过配置加载指定的css兼容性样式\n\n                        “browserslist”:{\n                            开发环境 --> 设置node环境变量 : process.env.NODE_ENV = development\n                            \"development\":[\n                                \"last 1 chrome version\",\n                                \"last 1 firefox version\",\n                                \"last 1 safari version\"\n                            ],\n                            生产环境：默认是看生产环境\n                            \"production\":[\n                                \">0.2%\",\n                                \"not dead\",\n                                \"not op_mini all\"\n                            ]\n                        }\n                    */\n                   // 使用loader的默认配置\n                   // \"postcss-loader\"\n                   // 修改loader的配置\n                   {\n                       loader: 'postcss-loader',\n                       options: {\n                           // 固定写法\n                           ident: 'postcss',\n                           plugins: ()=> [\n                               // postcss插件\n                               require('postcss-preset-env')()\n                           ]\n                       }\n                   }\n                ]\n            }\n        ]\n    },\n    plugins: [\n        new HtmlWebpackPlugin({\n            template: './src/index.html'\n        }),\n        new miniCssExtractPlugin({\n            filename: 'css/built.css'\n        })\n    ],\n    mode: 'development'\n}\n```\npackage.json\n\n```json\n{\n  \"name\": \"webpack_code\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n  },\n  \"author\": \"\",\n  \"license\": \"ISC\",\n  \"devDependencies\": {\n    \"css-loader\": \"^3.5.3\",\n    \"file-loader\": \"^6.0.0\",\n    \"html-loader\": \"^1.1.0\",\n    \"html-webpack-plugin\": \"^4.3.0\",\n    \"less\": \"^3.11.1\",\n    \"less-loader\": \"^6.1.0\",\n    \"mini-css-extract-plugin\": \"^0.9.0\",\n    \"postcss-loader\": \"^3.0.0\",\n    \"postcss-preset-env\": \"^6.7.0\",\n    \"style-loader\": \"^1.2.1\",\n    \"url-loader\": \"^4.1.0\",\n    \"webpack\": \"^4.43.0\",\n    \"webpack-cli\": \"^3.3.11\",\n    \"webpack-dev-server\": \"^3.11.0\"\n  },\n  \"browserslist\":{\n    \"development\":[\n        \"last 1 chrome version\",\n        \"last 1 firefox version\",\n        \"last 1 safari version\"\n    ],\n    \"production\":[\n        \">0.2%\",\n        \"not dead\",\n        \"not op_mini all\"\n    ]\n  }\n}\n```\n\na.css\n\n```css\n#box1 {\n    width: 100px;\n    height: 100px;\n    background-color: pink;\n    display: flex;\n    backface-visibility: hidden;\n}\n```\n\n打包之后的css文件\n```css\n#box1 {\n    width: 100px;\n    height: 100px;\n    background-color: pink;\n    display: flex;\n    -webkit-backface-visibility: hidden;\n            backface-visibility: hidden;\n}\n#box2 {\n    width: 200px;\n    height: 200px;\n    background-color: deeppink;\n}\n```\n\n### 压缩css\n\nwebpack.config.js\n```js\nconst { resolve } = require('path')\nconst HtmlWebpackPlugin = require('html-webpack-plugin')\nconst miniCssExtractPlugin = require('mini-css-extract-plugin')\nconst optimizeCssAssetsWebpackPlugin = require('optimize-css-assets-webpack-plugin')\n\nprocess.env.NODE_ENV = 'development'\n\n// optimize-css-assets-webpack-plugin\n\nmodule.exports = {\n    entry: './src/js/index.js',\n    output: {\n        filename: 'js/built.js',\n        path: resolve(__dirname, 'build')\n    },\n    module: {\n        rules: [\n            {\n                test: /\\.css$/,\n                use: [\n                    miniCssExtractPlugin.loader,\n                    'css-loader',\n                   {\n                       loader: 'postcss-loader',\n                       options: {\n                           ident: 'postcss',\n                           plugins: ()=> [\n                               require('postcss-preset-env')()\n                           ]\n                       }\n                   }\n                ]\n            }\n        ]\n    },\n    plugins: [\n        new HtmlWebpackPlugin({\n            template: './src/index.html'\n        }),\n        new miniCssExtractPlugin({\n            filename: 'css/built.css'\n        }),\n        // 压缩css\n        new optimizeCssAssetsWebpackPlugin()\n    ],\n    mode: 'development'\n}\n```\n使用 optimize-css-assets-webpack-plugin 插件就可以压缩css\n","slug":"webpack02","published":1,"updated":"2020-08-17T12:15:00.088Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckfl1j03d001jm4olf1tdf35r","content":"<h3 id=\"开发环境\"><a href=\"#开发环境\" class=\"headerlink\" title=\"开发环境\"></a>开发环境</h3><p>&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;Webpack 可以配置两种环境模式，即：<code>开发环境</code>和<code>生产环境</code>。开发环境是 能让代码本地调试运行的环境，生产环境是 能让代码优化上线运行的环境。</p>\n<p>&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;我们写的源代码里面包含了 es6 语法, less 文件要经过webpack进行编译处理,比如将 less 文件编译成 css 文件，把 es6 语法编译成浏览器能够识别的语法，然后输出的 bundle 这个资源文件就可以被浏览器运行了，为了让开发者更轻松，这里还添加了一些自动化工作，比如自动打开浏览器，自动刷新，自动编译等等一些咧操作，让我们的效率更高，这就是开发环境所做的事情。</p>\n<p>&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;我们的样式在之前处理是整合到js中的，如果让样式在 js 中，会让 js 体积变得很大，下载的很慢，同时，这里会先加载js，再通过创建<code>&lt;style&gt;</code>标签，会出现闪屏的现象，所以我们要将css从js文件中提取出来，还有代码压缩，兼容性处理都可以让带吗更快，性能更好，能够平稳的运行，这样我们要做的事情会很多，如果把这些都放在开发环境下，那开发环境要做的事情就太多了，打包速度就会很慢，不利于我们开发，所以这些事情我们要放在生产环境上去做。</p>\n<h3 id=\"提取css成单独文件\"><a href=\"#提取css成单独文件\" class=\"headerlink\" title=\"提取css成单独文件\"></a>提取css成单独文件</h3><p>&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;这里需要用到一个新的插件 <code>miniCssExtractPlugin</code>，引用这个插件之后打包出来的样式是以 <code>&lt;link&gt;</code>  引入，而不是 <code>&lt;style&gt;</code> 标签，所以不会出现闪屏现象，并且 css 文件和 js 文件分割开了，js 文件的体积也没有那么大，解析速度会更好一些。</p>\n<p>webpack.config.js</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> &#123; resolve &#125; = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'path'</span>)<br><span class=\"hljs-keyword\">const</span> HtmlWebpackPlugin = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'html-webpack-plugin'</span>)<br><span class=\"hljs-keyword\">const</span> miniCssExtractPlugin = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'mini-css-extract-plugin'</span>)<br><br><span class=\"hljs-built_in\">module</span>.exports = &#123;<br>    entry: <span class=\"hljs-string\">'./src/js/index.js'</span>,<br>    output: &#123;<br>        filename: <span class=\"hljs-string\">'js/built.js'</span>,<br>        path: resolve(__dirname, <span class=\"hljs-string\">'build'</span>)<br>    &#125;,<br>    <span class=\"hljs-built_in\">module</span>: &#123;<br>        rules: [<br>            &#123;<br>                test: <span class=\"hljs-regexp\">/\\.css$/</span>,<br>                use: [<br>                    <span class=\"hljs-comment\">// 创建style标签，将样式放入</span><br>                    <span class=\"hljs-comment\">// 'style-loader', </span><br>                    <span class=\"hljs-comment\">// 这个loader取代style-loader。作用：提取js中的css成单独文件</span><br>                    miniCssExtractPlugin.loader,<br>                    <span class=\"hljs-comment\">// 将css整合到js文件中</span><br>                    <span class=\"hljs-string\">'css-loader'</span><br>                ]<br>            &#125;<br>        ]<br>    &#125;,<br>    plugins: [<br>        <span class=\"hljs-keyword\">new</span> HtmlWebpackPlugin(&#123;<br>            template: <span class=\"hljs-string\">'./src/index.html'</span><br>        &#125;),<br>        <span class=\"hljs-keyword\">new</span> miniCssExtractPlugin(&#123;<br>            <span class=\"hljs-comment\">// 对输出的css文件进行重命名</span><br>            filename: <span class=\"hljs-string\">'css/built.css'</span><br>        &#125;)<br>    ],<br>    mode: <span class=\"hljs-string\">'development'</span><br>&#125;<br></code></pre></td></tr></table></figure>\n<p>目录文件</p>\n{% asset_img catalogue.jpeg  %}\n\n<p>打包输出的 index.html 文件</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-meta\">&lt;!DOCTYPE <span class=\"hljs-meta-keyword\">html</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">\"en\"</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">charset</span>=<span class=\"hljs-string\">\"UTF-8\"</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"viewport\"</span> <span class=\"hljs-attr\">content</span>=<span class=\"hljs-string\">\"width=device-width, initial-scale=1.0\"</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title</span>&gt;</span>Document<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">title</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">link</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"css/built.css\"</span> <span class=\"hljs-attr\">rel</span>=<span class=\"hljs-string\">\"stylesheet\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"box1\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"box2\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"js/built.js\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"css的兼容性处理\"><a href=\"#css的兼容性处理\" class=\"headerlink\" title=\"css的兼容性处理\"></a>css的兼容性处理</h3><p>&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;有时我们写的 css 样式并不是在所有的浏览器上都兼容，而 webpack 的 postcss-loader 会帮助我们解决这个问题。</p>\n<p>webpack.config.js</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> &#123; resolve &#125; = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'path'</span>)<br><span class=\"hljs-keyword\">const</span> HtmlWebpackPlugin = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'html-webpack-plugin'</span>)<br><span class=\"hljs-keyword\">const</span> miniCssExtractPlugin = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'mini-css-extract-plugin'</span>)<br><br><span class=\"hljs-comment\">// 设置nodejs环境变量</span><br>process.env.NODE_ENV = <span class=\"hljs-string\">'development'</span><br><br><span class=\"hljs-built_in\">module</span>.exports = &#123;<br>    entry: <span class=\"hljs-string\">'./src/js/index.js'</span>,<br>    output: &#123;<br>        filename: <span class=\"hljs-string\">'js/built.js'</span>,<br>        path: resolve(__dirname, <span class=\"hljs-string\">'build'</span>)<br>    &#125;,<br>    <span class=\"hljs-built_in\">module</span>: &#123;<br>        rules: [<br>            &#123;<br>                test: <span class=\"hljs-regexp\">/\\.css$/</span>,<br>                use: [<br>                    miniCssExtractPlugin.loader,<br>                    <span class=\"hljs-comment\">// 这种写法是使用loader的默认配置</span><br>                    <span class=\"hljs-string\">'css-loader'</span>,<br>                    <span class=\"hljs-comment\">/*</span><br><span class=\"hljs-comment\">                        css兼容性处理：postcss --&gt; postcss-loader postcss-preset-env，下载这两个包</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">                        postcss-preset-env插件帮postcss找到package.json中 browserslist 里面的配置，通过配置加载指定的css兼容性样式</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">                        “browserslist”:&#123;</span><br><span class=\"hljs-comment\">                            开发环境 --&gt; 设置node环境变量 : process.env.NODE_ENV = development</span><br><span class=\"hljs-comment\">                            \"development\":[</span><br><span class=\"hljs-comment\">                                \"last 1 chrome version\",</span><br><span class=\"hljs-comment\">                                \"last 1 firefox version\",</span><br><span class=\"hljs-comment\">                                \"last 1 safari version\"</span><br><span class=\"hljs-comment\">                            ],</span><br><span class=\"hljs-comment\">                            生产环境：默认是看生产环境</span><br><span class=\"hljs-comment\">                            \"production\":[</span><br><span class=\"hljs-comment\">                                \"&gt;0.2%\",</span><br><span class=\"hljs-comment\">                                \"not dead\",</span><br><span class=\"hljs-comment\">                                \"not op_mini all\"</span><br><span class=\"hljs-comment\">                            ]</span><br><span class=\"hljs-comment\">                        &#125;</span><br><span class=\"hljs-comment\">                    */</span><br>                   <span class=\"hljs-comment\">// 使用loader的默认配置</span><br>                   <span class=\"hljs-comment\">// \"postcss-loader\"</span><br>                   <span class=\"hljs-comment\">// 修改loader的配置</span><br>                   &#123;<br>                       loader: <span class=\"hljs-string\">'postcss-loader'</span>,<br>                       options: &#123;<br>                           <span class=\"hljs-comment\">// 固定写法</span><br>                           ident: <span class=\"hljs-string\">'postcss'</span>,<br>                           plugins: <span class=\"hljs-function\"><span class=\"hljs-params\">()</span>=&gt;</span> [<br>                               <span class=\"hljs-comment\">// postcss插件</span><br>                               <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'postcss-preset-env'</span>)()<br>                           ]<br>                       &#125;<br>                   &#125;<br>                ]<br>            &#125;<br>        ]<br>    &#125;,<br>    plugins: [<br>        <span class=\"hljs-keyword\">new</span> HtmlWebpackPlugin(&#123;<br>            template: <span class=\"hljs-string\">'./src/index.html'</span><br>        &#125;),<br>        <span class=\"hljs-keyword\">new</span> miniCssExtractPlugin(&#123;<br>            filename: <span class=\"hljs-string\">'css/built.css'</span><br>        &#125;)<br>    ],<br>    mode: <span class=\"hljs-string\">'development'</span><br>&#125;<br></code></pre></td></tr></table></figure>\n<p>package.json</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs json\">&#123;<br>  <span class=\"hljs-attr\">\"name\"</span>: <span class=\"hljs-string\">\"webpack_code\"</span>,<br>  <span class=\"hljs-attr\">\"version\"</span>: <span class=\"hljs-string\">\"1.0.0\"</span>,<br>  <span class=\"hljs-attr\">\"description\"</span>: <span class=\"hljs-string\">\"\"</span>,<br>  <span class=\"hljs-attr\">\"main\"</span>: <span class=\"hljs-string\">\"index.js\"</span>,<br>  <span class=\"hljs-attr\">\"scripts\"</span>: &#123;<br>    <span class=\"hljs-attr\">\"test\"</span>: <span class=\"hljs-string\">\"echo \\\"Error: no test specified\\\" &amp;&amp; exit 1\"</span><br>  &#125;,<br>  <span class=\"hljs-attr\">\"author\"</span>: <span class=\"hljs-string\">\"\"</span>,<br>  <span class=\"hljs-attr\">\"license\"</span>: <span class=\"hljs-string\">\"ISC\"</span>,<br>  <span class=\"hljs-attr\">\"devDependencies\"</span>: &#123;<br>    <span class=\"hljs-attr\">\"css-loader\"</span>: <span class=\"hljs-string\">\"^3.5.3\"</span>,<br>    <span class=\"hljs-attr\">\"file-loader\"</span>: <span class=\"hljs-string\">\"^6.0.0\"</span>,<br>    <span class=\"hljs-attr\">\"html-loader\"</span>: <span class=\"hljs-string\">\"^1.1.0\"</span>,<br>    <span class=\"hljs-attr\">\"html-webpack-plugin\"</span>: <span class=\"hljs-string\">\"^4.3.0\"</span>,<br>    <span class=\"hljs-attr\">\"less\"</span>: <span class=\"hljs-string\">\"^3.11.1\"</span>,<br>    <span class=\"hljs-attr\">\"less-loader\"</span>: <span class=\"hljs-string\">\"^6.1.0\"</span>,<br>    <span class=\"hljs-attr\">\"mini-css-extract-plugin\"</span>: <span class=\"hljs-string\">\"^0.9.0\"</span>,<br>    <span class=\"hljs-attr\">\"postcss-loader\"</span>: <span class=\"hljs-string\">\"^3.0.0\"</span>,<br>    <span class=\"hljs-attr\">\"postcss-preset-env\"</span>: <span class=\"hljs-string\">\"^6.7.0\"</span>,<br>    <span class=\"hljs-attr\">\"style-loader\"</span>: <span class=\"hljs-string\">\"^1.2.1\"</span>,<br>    <span class=\"hljs-attr\">\"url-loader\"</span>: <span class=\"hljs-string\">\"^4.1.0\"</span>,<br>    <span class=\"hljs-attr\">\"webpack\"</span>: <span class=\"hljs-string\">\"^4.43.0\"</span>,<br>    <span class=\"hljs-attr\">\"webpack-cli\"</span>: <span class=\"hljs-string\">\"^3.3.11\"</span>,<br>    <span class=\"hljs-attr\">\"webpack-dev-server\"</span>: <span class=\"hljs-string\">\"^3.11.0\"</span><br>  &#125;,<br>  <span class=\"hljs-attr\">\"browserslist\"</span>:&#123;<br>    <span class=\"hljs-attr\">\"development\"</span>:[<br>        <span class=\"hljs-string\">\"last 1 chrome version\"</span>,<br>        <span class=\"hljs-string\">\"last 1 firefox version\"</span>,<br>        <span class=\"hljs-string\">\"last 1 safari version\"</span><br>    ],<br>    <span class=\"hljs-attr\">\"production\"</span>:[<br>        <span class=\"hljs-string\">\"&gt;0.2%\"</span>,<br>        <span class=\"hljs-string\">\"not dead\"</span>,<br>        <span class=\"hljs-string\">\"not op_mini all\"</span><br>    ]<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>a.css</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-selector-id\">#box1</span> &#123;<br>    <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">100px</span>;<br>    <span class=\"hljs-attribute\">height</span>: <span class=\"hljs-number\">100px</span>;<br>    <span class=\"hljs-attribute\">background-color</span>: pink;<br>    <span class=\"hljs-attribute\">display</span>: flex;<br>    <span class=\"hljs-attribute\">backface-visibility</span>: hidden;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>打包之后的css文件</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-selector-id\">#box1</span> &#123;<br>    <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">100px</span>;<br>    <span class=\"hljs-attribute\">height</span>: <span class=\"hljs-number\">100px</span>;<br>    <span class=\"hljs-attribute\">background-color</span>: pink;<br>    <span class=\"hljs-attribute\">display</span>: flex;<br>    <span class=\"hljs-attribute\">-webkit-backface-visibility</span>: hidden;<br>            <span class=\"hljs-attribute\">backface-visibility</span>: hidden;<br>&#125;<br><span class=\"hljs-selector-id\">#box2</span> &#123;<br>    <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">200px</span>;<br>    <span class=\"hljs-attribute\">height</span>: <span class=\"hljs-number\">200px</span>;<br>    <span class=\"hljs-attribute\">background-color</span>: deeppink;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"压缩css\"><a href=\"#压缩css\" class=\"headerlink\" title=\"压缩css\"></a>压缩css</h3><p>webpack.config.js</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> &#123; resolve &#125; = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'path'</span>)<br><span class=\"hljs-keyword\">const</span> HtmlWebpackPlugin = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'html-webpack-plugin'</span>)<br><span class=\"hljs-keyword\">const</span> miniCssExtractPlugin = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'mini-css-extract-plugin'</span>)<br><span class=\"hljs-keyword\">const</span> optimizeCssAssetsWebpackPlugin = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'optimize-css-assets-webpack-plugin'</span>)<br><br>process.env.NODE_ENV = <span class=\"hljs-string\">'development'</span><br><br><span class=\"hljs-comment\">// optimize-css-assets-webpack-plugin</span><br><br><span class=\"hljs-built_in\">module</span>.exports = &#123;<br>    entry: <span class=\"hljs-string\">'./src/js/index.js'</span>,<br>    output: &#123;<br>        filename: <span class=\"hljs-string\">'js/built.js'</span>,<br>        path: resolve(__dirname, <span class=\"hljs-string\">'build'</span>)<br>    &#125;,<br>    <span class=\"hljs-built_in\">module</span>: &#123;<br>        rules: [<br>            &#123;<br>                test: <span class=\"hljs-regexp\">/\\.css$/</span>,<br>                use: [<br>                    miniCssExtractPlugin.loader,<br>                    <span class=\"hljs-string\">'css-loader'</span>,<br>                   &#123;<br>                       loader: <span class=\"hljs-string\">'postcss-loader'</span>,<br>                       options: &#123;<br>                           ident: <span class=\"hljs-string\">'postcss'</span>,<br>                           plugins: <span class=\"hljs-function\"><span class=\"hljs-params\">()</span>=&gt;</span> [<br>                               <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'postcss-preset-env'</span>)()<br>                           ]<br>                       &#125;<br>                   &#125;<br>                ]<br>            &#125;<br>        ]<br>    &#125;,<br>    plugins: [<br>        <span class=\"hljs-keyword\">new</span> HtmlWebpackPlugin(&#123;<br>            template: <span class=\"hljs-string\">'./src/index.html'</span><br>        &#125;),<br>        <span class=\"hljs-keyword\">new</span> miniCssExtractPlugin(&#123;<br>            filename: <span class=\"hljs-string\">'css/built.css'</span><br>        &#125;),<br>        <span class=\"hljs-comment\">// 压缩css</span><br>        <span class=\"hljs-keyword\">new</span> optimizeCssAssetsWebpackPlugin()<br>    ],<br>    mode: <span class=\"hljs-string\">'development'</span><br>&#125;<br></code></pre></td></tr></table></figure>\n<p>使用 optimize-css-assets-webpack-plugin 插件就可以压缩css</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"开发环境\"><a href=\"#开发环境\" class=\"headerlink\" title=\"开发环境\"></a>开发环境</h3><p>&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;Webpack 可以配置两种环境模式，即：<code>开发环境</code>和<code>生产环境</code>。开发环境是 能让代码本地调试运行的环境，生产环境是 能让代码优化上线运行的环境。</p>\n<p>&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;我们写的源代码里面包含了 es6 语法, less 文件要经过webpack进行编译处理,比如将 less 文件编译成 css 文件，把 es6 语法编译成浏览器能够识别的语法，然后输出的 bundle 这个资源文件就可以被浏览器运行了，为了让开发者更轻松，这里还添加了一些自动化工作，比如自动打开浏览器，自动刷新，自动编译等等一些咧操作，让我们的效率更高，这就是开发环境所做的事情。</p>\n<p>&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;我们的样式在之前处理是整合到js中的，如果让样式在 js 中，会让 js 体积变得很大，下载的很慢，同时，这里会先加载js，再通过创建<code>&lt;style&gt;</code>标签，会出现闪屏的现象，所以我们要将css从js文件中提取出来，还有代码压缩，兼容性处理都可以让带吗更快，性能更好，能够平稳的运行，这样我们要做的事情会很多，如果把这些都放在开发环境下，那开发环境要做的事情就太多了，打包速度就会很慢，不利于我们开发，所以这些事情我们要放在生产环境上去做。</p>\n<h3 id=\"提取css成单独文件\"><a href=\"#提取css成单独文件\" class=\"headerlink\" title=\"提取css成单独文件\"></a>提取css成单独文件</h3><p>&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;这里需要用到一个新的插件 <code>miniCssExtractPlugin</code>，引用这个插件之后打包出来的样式是以 <code>&lt;link&gt;</code>  引入，而不是 <code>&lt;style&gt;</code> 标签，所以不会出现闪屏现象，并且 css 文件和 js 文件分割开了，js 文件的体积也没有那么大，解析速度会更好一些。</p>\n<p>webpack.config.js</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> &#123; resolve &#125; = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'path'</span>)<br><span class=\"hljs-keyword\">const</span> HtmlWebpackPlugin = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'html-webpack-plugin'</span>)<br><span class=\"hljs-keyword\">const</span> miniCssExtractPlugin = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'mini-css-extract-plugin'</span>)<br><br><span class=\"hljs-built_in\">module</span>.exports = &#123;<br>    entry: <span class=\"hljs-string\">'./src/js/index.js'</span>,<br>    output: &#123;<br>        filename: <span class=\"hljs-string\">'js/built.js'</span>,<br>        path: resolve(__dirname, <span class=\"hljs-string\">'build'</span>)<br>    &#125;,<br>    <span class=\"hljs-built_in\">module</span>: &#123;<br>        rules: [<br>            &#123;<br>                test: <span class=\"hljs-regexp\">/\\.css$/</span>,<br>                use: [<br>                    <span class=\"hljs-comment\">// 创建style标签，将样式放入</span><br>                    <span class=\"hljs-comment\">// 'style-loader', </span><br>                    <span class=\"hljs-comment\">// 这个loader取代style-loader。作用：提取js中的css成单独文件</span><br>                    miniCssExtractPlugin.loader,<br>                    <span class=\"hljs-comment\">// 将css整合到js文件中</span><br>                    <span class=\"hljs-string\">'css-loader'</span><br>                ]<br>            &#125;<br>        ]<br>    &#125;,<br>    plugins: [<br>        <span class=\"hljs-keyword\">new</span> HtmlWebpackPlugin(&#123;<br>            template: <span class=\"hljs-string\">'./src/index.html'</span><br>        &#125;),<br>        <span class=\"hljs-keyword\">new</span> miniCssExtractPlugin(&#123;<br>            <span class=\"hljs-comment\">// 对输出的css文件进行重命名</span><br>            filename: <span class=\"hljs-string\">'css/built.css'</span><br>        &#125;)<br>    ],<br>    mode: <span class=\"hljs-string\">'development'</span><br>&#125;<br></code></pre></td></tr></table></figure>\n<p>目录文件</p>\n{% asset_img catalogue.jpeg  %}\n\n<p>打包输出的 index.html 文件</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-meta\">&lt;!DOCTYPE <span class=\"hljs-meta-keyword\">html</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">\"en\"</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">charset</span>=<span class=\"hljs-string\">\"UTF-8\"</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"viewport\"</span> <span class=\"hljs-attr\">content</span>=<span class=\"hljs-string\">\"width=device-width, initial-scale=1.0\"</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title</span>&gt;</span>Document<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">title</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">link</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"css/built.css\"</span> <span class=\"hljs-attr\">rel</span>=<span class=\"hljs-string\">\"stylesheet\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"box1\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"box2\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"js/built.js\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"css的兼容性处理\"><a href=\"#css的兼容性处理\" class=\"headerlink\" title=\"css的兼容性处理\"></a>css的兼容性处理</h3><p>&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;有时我们写的 css 样式并不是在所有的浏览器上都兼容，而 webpack 的 postcss-loader 会帮助我们解决这个问题。</p>\n<p>webpack.config.js</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> &#123; resolve &#125; = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'path'</span>)<br><span class=\"hljs-keyword\">const</span> HtmlWebpackPlugin = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'html-webpack-plugin'</span>)<br><span class=\"hljs-keyword\">const</span> miniCssExtractPlugin = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'mini-css-extract-plugin'</span>)<br><br><span class=\"hljs-comment\">// 设置nodejs环境变量</span><br>process.env.NODE_ENV = <span class=\"hljs-string\">'development'</span><br><br><span class=\"hljs-built_in\">module</span>.exports = &#123;<br>    entry: <span class=\"hljs-string\">'./src/js/index.js'</span>,<br>    output: &#123;<br>        filename: <span class=\"hljs-string\">'js/built.js'</span>,<br>        path: resolve(__dirname, <span class=\"hljs-string\">'build'</span>)<br>    &#125;,<br>    <span class=\"hljs-built_in\">module</span>: &#123;<br>        rules: [<br>            &#123;<br>                test: <span class=\"hljs-regexp\">/\\.css$/</span>,<br>                use: [<br>                    miniCssExtractPlugin.loader,<br>                    <span class=\"hljs-comment\">// 这种写法是使用loader的默认配置</span><br>                    <span class=\"hljs-string\">'css-loader'</span>,<br>                    <span class=\"hljs-comment\">/*</span><br><span class=\"hljs-comment\">                        css兼容性处理：postcss --&gt; postcss-loader postcss-preset-env，下载这两个包</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">                        postcss-preset-env插件帮postcss找到package.json中 browserslist 里面的配置，通过配置加载指定的css兼容性样式</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">                        “browserslist”:&#123;</span><br><span class=\"hljs-comment\">                            开发环境 --&gt; 设置node环境变量 : process.env.NODE_ENV = development</span><br><span class=\"hljs-comment\">                            \"development\":[</span><br><span class=\"hljs-comment\">                                \"last 1 chrome version\",</span><br><span class=\"hljs-comment\">                                \"last 1 firefox version\",</span><br><span class=\"hljs-comment\">                                \"last 1 safari version\"</span><br><span class=\"hljs-comment\">                            ],</span><br><span class=\"hljs-comment\">                            生产环境：默认是看生产环境</span><br><span class=\"hljs-comment\">                            \"production\":[</span><br><span class=\"hljs-comment\">                                \"&gt;0.2%\",</span><br><span class=\"hljs-comment\">                                \"not dead\",</span><br><span class=\"hljs-comment\">                                \"not op_mini all\"</span><br><span class=\"hljs-comment\">                            ]</span><br><span class=\"hljs-comment\">                        &#125;</span><br><span class=\"hljs-comment\">                    */</span><br>                   <span class=\"hljs-comment\">// 使用loader的默认配置</span><br>                   <span class=\"hljs-comment\">// \"postcss-loader\"</span><br>                   <span class=\"hljs-comment\">// 修改loader的配置</span><br>                   &#123;<br>                       loader: <span class=\"hljs-string\">'postcss-loader'</span>,<br>                       options: &#123;<br>                           <span class=\"hljs-comment\">// 固定写法</span><br>                           ident: <span class=\"hljs-string\">'postcss'</span>,<br>                           plugins: <span class=\"hljs-function\"><span class=\"hljs-params\">()</span>=&gt;</span> [<br>                               <span class=\"hljs-comment\">// postcss插件</span><br>                               <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'postcss-preset-env'</span>)()<br>                           ]<br>                       &#125;<br>                   &#125;<br>                ]<br>            &#125;<br>        ]<br>    &#125;,<br>    plugins: [<br>        <span class=\"hljs-keyword\">new</span> HtmlWebpackPlugin(&#123;<br>            template: <span class=\"hljs-string\">'./src/index.html'</span><br>        &#125;),<br>        <span class=\"hljs-keyword\">new</span> miniCssExtractPlugin(&#123;<br>            filename: <span class=\"hljs-string\">'css/built.css'</span><br>        &#125;)<br>    ],<br>    mode: <span class=\"hljs-string\">'development'</span><br>&#125;<br></code></pre></td></tr></table></figure>\n<p>package.json</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs json\">&#123;<br>  <span class=\"hljs-attr\">\"name\"</span>: <span class=\"hljs-string\">\"webpack_code\"</span>,<br>  <span class=\"hljs-attr\">\"version\"</span>: <span class=\"hljs-string\">\"1.0.0\"</span>,<br>  <span class=\"hljs-attr\">\"description\"</span>: <span class=\"hljs-string\">\"\"</span>,<br>  <span class=\"hljs-attr\">\"main\"</span>: <span class=\"hljs-string\">\"index.js\"</span>,<br>  <span class=\"hljs-attr\">\"scripts\"</span>: &#123;<br>    <span class=\"hljs-attr\">\"test\"</span>: <span class=\"hljs-string\">\"echo \\\"Error: no test specified\\\" &amp;&amp; exit 1\"</span><br>  &#125;,<br>  <span class=\"hljs-attr\">\"author\"</span>: <span class=\"hljs-string\">\"\"</span>,<br>  <span class=\"hljs-attr\">\"license\"</span>: <span class=\"hljs-string\">\"ISC\"</span>,<br>  <span class=\"hljs-attr\">\"devDependencies\"</span>: &#123;<br>    <span class=\"hljs-attr\">\"css-loader\"</span>: <span class=\"hljs-string\">\"^3.5.3\"</span>,<br>    <span class=\"hljs-attr\">\"file-loader\"</span>: <span class=\"hljs-string\">\"^6.0.0\"</span>,<br>    <span class=\"hljs-attr\">\"html-loader\"</span>: <span class=\"hljs-string\">\"^1.1.0\"</span>,<br>    <span class=\"hljs-attr\">\"html-webpack-plugin\"</span>: <span class=\"hljs-string\">\"^4.3.0\"</span>,<br>    <span class=\"hljs-attr\">\"less\"</span>: <span class=\"hljs-string\">\"^3.11.1\"</span>,<br>    <span class=\"hljs-attr\">\"less-loader\"</span>: <span class=\"hljs-string\">\"^6.1.0\"</span>,<br>    <span class=\"hljs-attr\">\"mini-css-extract-plugin\"</span>: <span class=\"hljs-string\">\"^0.9.0\"</span>,<br>    <span class=\"hljs-attr\">\"postcss-loader\"</span>: <span class=\"hljs-string\">\"^3.0.0\"</span>,<br>    <span class=\"hljs-attr\">\"postcss-preset-env\"</span>: <span class=\"hljs-string\">\"^6.7.0\"</span>,<br>    <span class=\"hljs-attr\">\"style-loader\"</span>: <span class=\"hljs-string\">\"^1.2.1\"</span>,<br>    <span class=\"hljs-attr\">\"url-loader\"</span>: <span class=\"hljs-string\">\"^4.1.0\"</span>,<br>    <span class=\"hljs-attr\">\"webpack\"</span>: <span class=\"hljs-string\">\"^4.43.0\"</span>,<br>    <span class=\"hljs-attr\">\"webpack-cli\"</span>: <span class=\"hljs-string\">\"^3.3.11\"</span>,<br>    <span class=\"hljs-attr\">\"webpack-dev-server\"</span>: <span class=\"hljs-string\">\"^3.11.0\"</span><br>  &#125;,<br>  <span class=\"hljs-attr\">\"browserslist\"</span>:&#123;<br>    <span class=\"hljs-attr\">\"development\"</span>:[<br>        <span class=\"hljs-string\">\"last 1 chrome version\"</span>,<br>        <span class=\"hljs-string\">\"last 1 firefox version\"</span>,<br>        <span class=\"hljs-string\">\"last 1 safari version\"</span><br>    ],<br>    <span class=\"hljs-attr\">\"production\"</span>:[<br>        <span class=\"hljs-string\">\"&gt;0.2%\"</span>,<br>        <span class=\"hljs-string\">\"not dead\"</span>,<br>        <span class=\"hljs-string\">\"not op_mini all\"</span><br>    ]<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>a.css</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-selector-id\">#box1</span> &#123;<br>    <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">100px</span>;<br>    <span class=\"hljs-attribute\">height</span>: <span class=\"hljs-number\">100px</span>;<br>    <span class=\"hljs-attribute\">background-color</span>: pink;<br>    <span class=\"hljs-attribute\">display</span>: flex;<br>    <span class=\"hljs-attribute\">backface-visibility</span>: hidden;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>打包之后的css文件</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-selector-id\">#box1</span> &#123;<br>    <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">100px</span>;<br>    <span class=\"hljs-attribute\">height</span>: <span class=\"hljs-number\">100px</span>;<br>    <span class=\"hljs-attribute\">background-color</span>: pink;<br>    <span class=\"hljs-attribute\">display</span>: flex;<br>    <span class=\"hljs-attribute\">-webkit-backface-visibility</span>: hidden;<br>            <span class=\"hljs-attribute\">backface-visibility</span>: hidden;<br>&#125;<br><span class=\"hljs-selector-id\">#box2</span> &#123;<br>    <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">200px</span>;<br>    <span class=\"hljs-attribute\">height</span>: <span class=\"hljs-number\">200px</span>;<br>    <span class=\"hljs-attribute\">background-color</span>: deeppink;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"压缩css\"><a href=\"#压缩css\" class=\"headerlink\" title=\"压缩css\"></a>压缩css</h3><p>webpack.config.js</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> &#123; resolve &#125; = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'path'</span>)<br><span class=\"hljs-keyword\">const</span> HtmlWebpackPlugin = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'html-webpack-plugin'</span>)<br><span class=\"hljs-keyword\">const</span> miniCssExtractPlugin = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'mini-css-extract-plugin'</span>)<br><span class=\"hljs-keyword\">const</span> optimizeCssAssetsWebpackPlugin = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'optimize-css-assets-webpack-plugin'</span>)<br><br>process.env.NODE_ENV = <span class=\"hljs-string\">'development'</span><br><br><span class=\"hljs-comment\">// optimize-css-assets-webpack-plugin</span><br><br><span class=\"hljs-built_in\">module</span>.exports = &#123;<br>    entry: <span class=\"hljs-string\">'./src/js/index.js'</span>,<br>    output: &#123;<br>        filename: <span class=\"hljs-string\">'js/built.js'</span>,<br>        path: resolve(__dirname, <span class=\"hljs-string\">'build'</span>)<br>    &#125;,<br>    <span class=\"hljs-built_in\">module</span>: &#123;<br>        rules: [<br>            &#123;<br>                test: <span class=\"hljs-regexp\">/\\.css$/</span>,<br>                use: [<br>                    miniCssExtractPlugin.loader,<br>                    <span class=\"hljs-string\">'css-loader'</span>,<br>                   &#123;<br>                       loader: <span class=\"hljs-string\">'postcss-loader'</span>,<br>                       options: &#123;<br>                           ident: <span class=\"hljs-string\">'postcss'</span>,<br>                           plugins: <span class=\"hljs-function\"><span class=\"hljs-params\">()</span>=&gt;</span> [<br>                               <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'postcss-preset-env'</span>)()<br>                           ]<br>                       &#125;<br>                   &#125;<br>                ]<br>            &#125;<br>        ]<br>    &#125;,<br>    plugins: [<br>        <span class=\"hljs-keyword\">new</span> HtmlWebpackPlugin(&#123;<br>            template: <span class=\"hljs-string\">'./src/index.html'</span><br>        &#125;),<br>        <span class=\"hljs-keyword\">new</span> miniCssExtractPlugin(&#123;<br>            filename: <span class=\"hljs-string\">'css/built.css'</span><br>        &#125;),<br>        <span class=\"hljs-comment\">// 压缩css</span><br>        <span class=\"hljs-keyword\">new</span> optimizeCssAssetsWebpackPlugin()<br>    ],<br>    mode: <span class=\"hljs-string\">'development'</span><br>&#125;<br></code></pre></td></tr></table></figure>\n<p>使用 optimize-css-assets-webpack-plugin 插件就可以压缩css</p>\n"},{"title":"webpack03","date":"2020-05-31T11:03:18.000Z","_content":"### eslint检查js\n\n&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;如果我们好多人开发一个项目，每个人有自己一套代码规范，这样会造成代码混乱，不宜维护。而 eslint 可以解决这个问题，让开发者使用同一套代码规范。\n\nwebpack.config.js\n```js\nconst { resolve } = require('path')\nconst HtmlWebpackPlugin = require('html-webpack-plugin')\n\nmodule.exports = {\n    entry: './src/js/index.js',\n    output: {\n        filename: 'js/built.js',\n        path: resolve(__dirname, 'build')\n    },\n    module: {\n        rules: [\n            /*\n                语法检查：eslint-loader eslint\n                注意：只检查自己写的源代码，第三方的库是不用检查的。\n                设置检查规则：\n                    package.json中eslintConfig中设置\n                        \"eslintConfig\":{\n                            \"extends\": \"airbnb-base\"\n                        }\n\n                    https://github.com/airbnb/javascript\n                    airbnb   -->  eslint-config-airbnb-base eslint eslint-plugin-import\n            */\n           {\n               test: /\\.js$/,\n               exclude: /node_modules/,\n               loader: 'eslint-loader',\n               options: {\n                   // 自动修复eslint的错误\n                   fix: true\n               }\n           }\n        ]\n    },\n    plugins: [\n        new HtmlWebpackPlugin({\n            template: './src/index.html'\n        })\n    ],\n    mode: 'development'\n}\n```\n需要 ```npm i eslint-loader eslint eslint-config-airbnb-base eslint-plugin-import```\n\npackage.json\n```json\n{\n  \"name\": \"webpack_code\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n  },\n  \"author\": \"\",\n  \"license\": \"ISC\",\n  \"devDependencies\": {\n    \"css-loader\": \"^3.5.3\",\n    \"eslint\": \"^7.1.0\",\n    \"eslint-config-airbnb-base\": \"^14.1.0\",\n    \"eslint-loader\": \"^4.0.2\",\n    \"eslint-plugin-import\": \"^2.20.2\",\n    \"file-loader\": \"^6.0.0\",\n    \"html-loader\": \"^1.1.0\",\n    \"html-webpack-plugin\": \"^4.3.0\",\n    \"less\": \"^3.11.1\",\n    \"less-loader\": \"^6.1.0\",\n    \"mini-css-extract-plugin\": \"^0.9.0\",\n    \"optimize-css-assets-webpack-plugin\": \"^5.0.3\",\n    \"postcss-loader\": \"^3.0.0\",\n    \"postcss-preset-env\": \"^6.7.0\",\n    \"style-loader\": \"^1.2.1\",\n    \"url-loader\": \"^4.1.0\",\n    \"webpack\": \"^4.43.0\",\n    \"webpack-cli\": \"^3.3.11\",\n    \"webpack-dev-server\": \"^3.11.0\"\n  },\n  \"browserslist\": {\n    \"development\": [\n      \"last 1 chrome version\",\n      \"last 1 firefox version\",\n      \"last 1 safari version\"\n    ],\n    \"production\": [\n      \">0.2%\",\n      \"not dead\",\n      \"not op_mini all\"\n    ]\n  },\n  \"eslintConfig\":{\n    \"extends\": \"airbnb-base\"\n  }\n}\n```\n接下来我们可以试验一下，在 js 中写一些不规范的代码\n\nindex.js\n```js\nfunction add(a, b){\n  return a+b;\n}\nconsole.log(add(2,3))\n```\n之后运行webpack，我们再来看一下 index.js 文件\n\n```js\nfunction add(a, b) {\n  return a + b;\n}\nconsole.log(add(2, 3));\n```\n所有的代码都规范了，但是，在控制台有一个警告，建议我们不要在这里写 console.log\n![](./webpack03/warn.png)\n\n我们再来修改一下这个 index.js 文件吧\n\n```js\nfunction add(a, b) {\n  return a + b;\n}\n\n// 下一行eslint所有规则都失效（下一行不进行eslint检查）\n// eslint-disable-next-line\nconsole.log(add(2, 3));\n```\n\n现在再运行 webpack 就不会有任何警告了\n\n### babel处理js兼容性\n\n&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;当我们使用 ES6 语法来写代码时，我们在谷歌浏览器打开完全没有问题，但是使用IE打开就会报错，比如箭头函数，在IE下是不识别的，这时我们就需要用到 babel 了，来将 ES6 甚至更高级的语法转换成浏览器识别的语法。我们需要下载 ```babel-loader``` ```@babel/core``` ```@babel/preset-env```\n\n&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;在 webpack 中，按照以上的方法处理后，确实 IE 能识别像箭头函数这样的语法了，但是像更高级的语法 promise 却还是无法识别，这时我们需要做全部兼容性处理，用到 ```@babel/polyfill``` ，下载完成后，只需在代码中用 ```import '@babel/polyfill'```引入即可，我们再打开浏览器看一下，确实可以识别了 promise。\n\n&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;虽然现在所有的语法都识别了，但现在还是有一个弊端，之前我们打的包可能也就几十KB，可是现在打出来的包需要几百KB，一下子打了好多，别着急，这时候我们就可以用按需加载了，只需要加载我们需要做兼容性处理的部分就好了，我们需要下载一个 ```core-js```，webpack具体配置如下：\n\n```js\nconst { resolve } = require('path')\nconst HtmlWebpackPlugin = require('html-webpack-plugin')\n\nmodule.exports = {\n    entry: './src/js/index.js',\n    output: {\n        filename: 'js/built.js',\n        path: resolve(__dirname, 'build')\n    },\n    module: {\n        rules: [\n           /*\n            js兼容性处理：babel-loader @babel/core (需下载这两个)\n            1.基本兼容性处理 --> @babel/preset-env （下载）\n              问题：只能转换基本语法，如promise高级语法不能转换\n            2.全部兼容性处理 --> @babel/polyfill （下载）\n              问题：我只要解决部分兼容性问题，但是将所有兼容性代码全部引入，体积太大了~\n            3.需要做兼容性处理的就做：按需加载 --> corejs (下载core-js)\n\n           */\n          {\n              test: /\\.js$/,\n              exclude: /node_modules/,\n              loader: 'babel-loader', \n              options: {\n                  // 预设：指示babel做怎么样的兼容性处理\n                // presets: ['@babel/preset-env']\n                presets: [\n                    '@babel/preset-env',\n                    {\n                        // 按需加载\n                        useBuiltIns: 'usage',\n                        corejs: {\n                            version: 3\n                        },\n                        // 指定兼容性做到哪个版本的浏览器\n                        targets: {\n                            chrome: '60',\n                            firefox: '60',\n                            ie: '9',\n                            safari: '10',\n                            edge: '17'\n                        }\n                    }\n                ]\n              }\n          }\n        ]\n    },\n    plugins: [\n        new HtmlWebpackPlugin({\n            template: './src/index.html'\n        })\n    ],\n    mode: 'development'\n}\n```\n现在我们再回过头来看我们的包，比之前打出来的包要小很多，所以，平时我们开发时推荐使用1，3方法，不推荐全部兼容处理。\n\n### 压缩js、html\n\n&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;js 的压缩很简单，只需要将```mode```设置为 ```production```即可，因为 webpack 会默认将生产环境的 js 代码进行压缩，而 html 的压缩需要在 webpack 中进行简单的配置一下即可。\n```js\nconst { resolve } = require('path')\nconst HtmlWebpackPlugin = require('html-webpack-plugin')\n\nmodule.exports = {\n    entry: './src/js/index.js',\n    output: {\n        filename: 'js/built.js',\n        path: resolve(__dirname, 'build')\n    },\n    plugins: [\n        new HtmlWebpackPlugin({\n            template: './src/index.html',\n            // 压缩html\n            minify: {\n                // 移除空格\n                collapseWhitespace: true,\n                // 移除注释\n                removeComments: true\n            }\n        })\n    ],\n    // 生产环境下会自动压缩js代码\n    mode: 'production'\n}\n```\n### 开发环境的配置\n\n```js\nconst {resolve} = require('path')\nconst MiniCssExtractPlugin = require('mini-css-extract-plugin')\nconst OptimizeCssAssetsWebpackPlugin = require('optimize-css-assets-webpack-plugin')\nconst HtmlWebpackPlugin = require('html-webpack-plugin')\n\n// 定义nodejs的环境变量：绝决定使用browserslist的哪个环境\nprocess.env.NODE_ENV = 'production'\n\n// 复用loader\nconst commonCssLoader =  [\n    MiniCssExtractPlugin.loader,\n    'css-loader',\n    {\n        // 还需要在package.json中定义browserslist\n        loader: 'postcss-loader',\n        options: {\n            ident: 'postcss',\n            plugins: () => [\n                require('postcss-preset-env')()\n            ]\n        }\n    }\n]\n\nmodule.exports = {\n    entry: './src/js/index.js',\n    output: {\n        filename: 'js/built.js',\n        path: resolve(__dirname,'build')\n    },\n    module: {\n        rules: [\n            {\n                test: /\\.css$/,\n                use: [...commonCssLoader]\n            },\n            {\n                test: /\\.less$/,\n                use: [\n                    ...commonCssLoader,\n                    'less-loader'\n                ]\n            },\n            // js语法检查\n            /* 正常来讲： 一个文件只能被一个Loader处理。\n               当一个文件要被多个loader处理，那么一定要指定loader的执行先后顺序：\n                  先执行eslint，再执行babel\n            */\n            {\n                // 在package.json中eslintConfig --> airbnb\n                test: /\\.js$/,\n                exclude: /node_module/,\n                // 优先执行\n                enforce: 'pre',\n                loader: 'eslint-loader',\n                options: {\n                    fix: true\n                }\n            },\n            // js兼容性处理\n            {\n                // 在package.json中eslintConfig --> airbnb\n                test: /\\.js$/,\n                exclude: /node_module/,\n                loader: 'babel-loader',\n                options: {\n                    presets: [\n                        '@babel/preset-env',\n                        {\n                            useBuiltIns: 'usage',\n                            corejs: {version: 3},\n                            targets: {\n                                chrome: '60',\n                                firefox: '50'\n                            }\n                        }\n                    ]\n                }\n            },\n            {\n                test: /\\.(gif|jpg|png)/,\n                loader: 'url-loader',\n                options: {\n                    limit: 8 * 1024,\n                    name: '[hash:10].[ext]',\n                    outputPath: 'imgs',\n                    esModule: false\n                }\n            },\n            // 解析html中的图片\n            {\n                test: /\\.html$/,\n                loader: 'html-loader'\n            },\n            // 其他所有的文件处理\n            {\n                exclude: /\\.(js|css|html|less|jpg|png|gif)/,\n                loader: 'file-loader',\n                options: {\n                    outputPath: 'media'\n                }\n            }\n        ]\n    },\n    plugins: [\n        new MiniCssExtractPlugin({\n            filename: 'css/built.css'\n        }),\n        // 压缩css\n        new OptimizeCssAssetsWebpackPlugin(),\n        new HtmlWebpackPlugin({\n            template: './src/index.html',\n            minify: {\n                collapseWhitespace: true,\n                removeComments: true\n            }\n        })\n\n    ],\n    mode: 'production'\n}\n```","source":"_posts/webpack03.md","raw":"---\ntitle: webpack03\ndate: 2020-05-31 19:03:18\ntags: webpack\ncategories:\n- 前端构建工具\n---\n### eslint检查js\n\n&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;如果我们好多人开发一个项目，每个人有自己一套代码规范，这样会造成代码混乱，不宜维护。而 eslint 可以解决这个问题，让开发者使用同一套代码规范。\n\nwebpack.config.js\n```js\nconst { resolve } = require('path')\nconst HtmlWebpackPlugin = require('html-webpack-plugin')\n\nmodule.exports = {\n    entry: './src/js/index.js',\n    output: {\n        filename: 'js/built.js',\n        path: resolve(__dirname, 'build')\n    },\n    module: {\n        rules: [\n            /*\n                语法检查：eslint-loader eslint\n                注意：只检查自己写的源代码，第三方的库是不用检查的。\n                设置检查规则：\n                    package.json中eslintConfig中设置\n                        \"eslintConfig\":{\n                            \"extends\": \"airbnb-base\"\n                        }\n\n                    https://github.com/airbnb/javascript\n                    airbnb   -->  eslint-config-airbnb-base eslint eslint-plugin-import\n            */\n           {\n               test: /\\.js$/,\n               exclude: /node_modules/,\n               loader: 'eslint-loader',\n               options: {\n                   // 自动修复eslint的错误\n                   fix: true\n               }\n           }\n        ]\n    },\n    plugins: [\n        new HtmlWebpackPlugin({\n            template: './src/index.html'\n        })\n    ],\n    mode: 'development'\n}\n```\n需要 ```npm i eslint-loader eslint eslint-config-airbnb-base eslint-plugin-import```\n\npackage.json\n```json\n{\n  \"name\": \"webpack_code\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n  },\n  \"author\": \"\",\n  \"license\": \"ISC\",\n  \"devDependencies\": {\n    \"css-loader\": \"^3.5.3\",\n    \"eslint\": \"^7.1.0\",\n    \"eslint-config-airbnb-base\": \"^14.1.0\",\n    \"eslint-loader\": \"^4.0.2\",\n    \"eslint-plugin-import\": \"^2.20.2\",\n    \"file-loader\": \"^6.0.0\",\n    \"html-loader\": \"^1.1.0\",\n    \"html-webpack-plugin\": \"^4.3.0\",\n    \"less\": \"^3.11.1\",\n    \"less-loader\": \"^6.1.0\",\n    \"mini-css-extract-plugin\": \"^0.9.0\",\n    \"optimize-css-assets-webpack-plugin\": \"^5.0.3\",\n    \"postcss-loader\": \"^3.0.0\",\n    \"postcss-preset-env\": \"^6.7.0\",\n    \"style-loader\": \"^1.2.1\",\n    \"url-loader\": \"^4.1.0\",\n    \"webpack\": \"^4.43.0\",\n    \"webpack-cli\": \"^3.3.11\",\n    \"webpack-dev-server\": \"^3.11.0\"\n  },\n  \"browserslist\": {\n    \"development\": [\n      \"last 1 chrome version\",\n      \"last 1 firefox version\",\n      \"last 1 safari version\"\n    ],\n    \"production\": [\n      \">0.2%\",\n      \"not dead\",\n      \"not op_mini all\"\n    ]\n  },\n  \"eslintConfig\":{\n    \"extends\": \"airbnb-base\"\n  }\n}\n```\n接下来我们可以试验一下，在 js 中写一些不规范的代码\n\nindex.js\n```js\nfunction add(a, b){\n  return a+b;\n}\nconsole.log(add(2,3))\n```\n之后运行webpack，我们再来看一下 index.js 文件\n\n```js\nfunction add(a, b) {\n  return a + b;\n}\nconsole.log(add(2, 3));\n```\n所有的代码都规范了，但是，在控制台有一个警告，建议我们不要在这里写 console.log\n![](./webpack03/warn.png)\n\n我们再来修改一下这个 index.js 文件吧\n\n```js\nfunction add(a, b) {\n  return a + b;\n}\n\n// 下一行eslint所有规则都失效（下一行不进行eslint检查）\n// eslint-disable-next-line\nconsole.log(add(2, 3));\n```\n\n现在再运行 webpack 就不会有任何警告了\n\n### babel处理js兼容性\n\n&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;当我们使用 ES6 语法来写代码时，我们在谷歌浏览器打开完全没有问题，但是使用IE打开就会报错，比如箭头函数，在IE下是不识别的，这时我们就需要用到 babel 了，来将 ES6 甚至更高级的语法转换成浏览器识别的语法。我们需要下载 ```babel-loader``` ```@babel/core``` ```@babel/preset-env```\n\n&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;在 webpack 中，按照以上的方法处理后，确实 IE 能识别像箭头函数这样的语法了，但是像更高级的语法 promise 却还是无法识别，这时我们需要做全部兼容性处理，用到 ```@babel/polyfill``` ，下载完成后，只需在代码中用 ```import '@babel/polyfill'```引入即可，我们再打开浏览器看一下，确实可以识别了 promise。\n\n&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;虽然现在所有的语法都识别了，但现在还是有一个弊端，之前我们打的包可能也就几十KB，可是现在打出来的包需要几百KB，一下子打了好多，别着急，这时候我们就可以用按需加载了，只需要加载我们需要做兼容性处理的部分就好了，我们需要下载一个 ```core-js```，webpack具体配置如下：\n\n```js\nconst { resolve } = require('path')\nconst HtmlWebpackPlugin = require('html-webpack-plugin')\n\nmodule.exports = {\n    entry: './src/js/index.js',\n    output: {\n        filename: 'js/built.js',\n        path: resolve(__dirname, 'build')\n    },\n    module: {\n        rules: [\n           /*\n            js兼容性处理：babel-loader @babel/core (需下载这两个)\n            1.基本兼容性处理 --> @babel/preset-env （下载）\n              问题：只能转换基本语法，如promise高级语法不能转换\n            2.全部兼容性处理 --> @babel/polyfill （下载）\n              问题：我只要解决部分兼容性问题，但是将所有兼容性代码全部引入，体积太大了~\n            3.需要做兼容性处理的就做：按需加载 --> corejs (下载core-js)\n\n           */\n          {\n              test: /\\.js$/,\n              exclude: /node_modules/,\n              loader: 'babel-loader', \n              options: {\n                  // 预设：指示babel做怎么样的兼容性处理\n                // presets: ['@babel/preset-env']\n                presets: [\n                    '@babel/preset-env',\n                    {\n                        // 按需加载\n                        useBuiltIns: 'usage',\n                        corejs: {\n                            version: 3\n                        },\n                        // 指定兼容性做到哪个版本的浏览器\n                        targets: {\n                            chrome: '60',\n                            firefox: '60',\n                            ie: '9',\n                            safari: '10',\n                            edge: '17'\n                        }\n                    }\n                ]\n              }\n          }\n        ]\n    },\n    plugins: [\n        new HtmlWebpackPlugin({\n            template: './src/index.html'\n        })\n    ],\n    mode: 'development'\n}\n```\n现在我们再回过头来看我们的包，比之前打出来的包要小很多，所以，平时我们开发时推荐使用1，3方法，不推荐全部兼容处理。\n\n### 压缩js、html\n\n&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;js 的压缩很简单，只需要将```mode```设置为 ```production```即可，因为 webpack 会默认将生产环境的 js 代码进行压缩，而 html 的压缩需要在 webpack 中进行简单的配置一下即可。\n```js\nconst { resolve } = require('path')\nconst HtmlWebpackPlugin = require('html-webpack-plugin')\n\nmodule.exports = {\n    entry: './src/js/index.js',\n    output: {\n        filename: 'js/built.js',\n        path: resolve(__dirname, 'build')\n    },\n    plugins: [\n        new HtmlWebpackPlugin({\n            template: './src/index.html',\n            // 压缩html\n            minify: {\n                // 移除空格\n                collapseWhitespace: true,\n                // 移除注释\n                removeComments: true\n            }\n        })\n    ],\n    // 生产环境下会自动压缩js代码\n    mode: 'production'\n}\n```\n### 开发环境的配置\n\n```js\nconst {resolve} = require('path')\nconst MiniCssExtractPlugin = require('mini-css-extract-plugin')\nconst OptimizeCssAssetsWebpackPlugin = require('optimize-css-assets-webpack-plugin')\nconst HtmlWebpackPlugin = require('html-webpack-plugin')\n\n// 定义nodejs的环境变量：绝决定使用browserslist的哪个环境\nprocess.env.NODE_ENV = 'production'\n\n// 复用loader\nconst commonCssLoader =  [\n    MiniCssExtractPlugin.loader,\n    'css-loader',\n    {\n        // 还需要在package.json中定义browserslist\n        loader: 'postcss-loader',\n        options: {\n            ident: 'postcss',\n            plugins: () => [\n                require('postcss-preset-env')()\n            ]\n        }\n    }\n]\n\nmodule.exports = {\n    entry: './src/js/index.js',\n    output: {\n        filename: 'js/built.js',\n        path: resolve(__dirname,'build')\n    },\n    module: {\n        rules: [\n            {\n                test: /\\.css$/,\n                use: [...commonCssLoader]\n            },\n            {\n                test: /\\.less$/,\n                use: [\n                    ...commonCssLoader,\n                    'less-loader'\n                ]\n            },\n            // js语法检查\n            /* 正常来讲： 一个文件只能被一个Loader处理。\n               当一个文件要被多个loader处理，那么一定要指定loader的执行先后顺序：\n                  先执行eslint，再执行babel\n            */\n            {\n                // 在package.json中eslintConfig --> airbnb\n                test: /\\.js$/,\n                exclude: /node_module/,\n                // 优先执行\n                enforce: 'pre',\n                loader: 'eslint-loader',\n                options: {\n                    fix: true\n                }\n            },\n            // js兼容性处理\n            {\n                // 在package.json中eslintConfig --> airbnb\n                test: /\\.js$/,\n                exclude: /node_module/,\n                loader: 'babel-loader',\n                options: {\n                    presets: [\n                        '@babel/preset-env',\n                        {\n                            useBuiltIns: 'usage',\n                            corejs: {version: 3},\n                            targets: {\n                                chrome: '60',\n                                firefox: '50'\n                            }\n                        }\n                    ]\n                }\n            },\n            {\n                test: /\\.(gif|jpg|png)/,\n                loader: 'url-loader',\n                options: {\n                    limit: 8 * 1024,\n                    name: '[hash:10].[ext]',\n                    outputPath: 'imgs',\n                    esModule: false\n                }\n            },\n            // 解析html中的图片\n            {\n                test: /\\.html$/,\n                loader: 'html-loader'\n            },\n            // 其他所有的文件处理\n            {\n                exclude: /\\.(js|css|html|less|jpg|png|gif)/,\n                loader: 'file-loader',\n                options: {\n                    outputPath: 'media'\n                }\n            }\n        ]\n    },\n    plugins: [\n        new MiniCssExtractPlugin({\n            filename: 'css/built.css'\n        }),\n        // 压缩css\n        new OptimizeCssAssetsWebpackPlugin(),\n        new HtmlWebpackPlugin({\n            template: './src/index.html',\n            minify: {\n                collapseWhitespace: true,\n                removeComments: true\n            }\n        })\n\n    ],\n    mode: 'production'\n}\n```","slug":"webpack03","published":1,"updated":"2020-08-17T12:15:00.089Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckfl1j03e001mm4ol4nyu7y92","content":"<h3 id=\"eslint检查js\"><a href=\"#eslint检查js\" class=\"headerlink\" title=\"eslint检查js\"></a>eslint检查js</h3><p>&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;如果我们好多人开发一个项目，每个人有自己一套代码规范，这样会造成代码混乱，不宜维护。而 eslint 可以解决这个问题，让开发者使用同一套代码规范。</p>\n<p>webpack.config.js</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> &#123; resolve &#125; = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'path'</span>)<br><span class=\"hljs-keyword\">const</span> HtmlWebpackPlugin = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'html-webpack-plugin'</span>)<br><br><span class=\"hljs-built_in\">module</span>.exports = &#123;<br>    entry: <span class=\"hljs-string\">'./src/js/index.js'</span>,<br>    output: &#123;<br>        filename: <span class=\"hljs-string\">'js/built.js'</span>,<br>        path: resolve(__dirname, <span class=\"hljs-string\">'build'</span>)<br>    &#125;,<br>    <span class=\"hljs-built_in\">module</span>: &#123;<br>        rules: [<br>            <span class=\"hljs-comment\">/*</span><br><span class=\"hljs-comment\">                语法检查：eslint-loader eslint</span><br><span class=\"hljs-comment\">                注意：只检查自己写的源代码，第三方的库是不用检查的。</span><br><span class=\"hljs-comment\">                设置检查规则：</span><br><span class=\"hljs-comment\">                    package.json中eslintConfig中设置</span><br><span class=\"hljs-comment\">                        \"eslintConfig\":&#123;</span><br><span class=\"hljs-comment\">                            \"extends\": \"airbnb-base\"</span><br><span class=\"hljs-comment\">                        &#125;</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">                    https://github.com/airbnb/javascript</span><br><span class=\"hljs-comment\">                    airbnb   --&gt;  eslint-config-airbnb-base eslint eslint-plugin-import</span><br><span class=\"hljs-comment\">            */</span><br>           &#123;<br>               test: <span class=\"hljs-regexp\">/\\.js$/</span>,<br>               exclude: <span class=\"hljs-regexp\">/node_modules/</span>,<br>               loader: <span class=\"hljs-string\">'eslint-loader'</span>,<br>               options: &#123;<br>                   <span class=\"hljs-comment\">// 自动修复eslint的错误</span><br>                   fix: <span class=\"hljs-literal\">true</span><br>               &#125;<br>           &#125;<br>        ]<br>    &#125;,<br>    plugins: [<br>        <span class=\"hljs-keyword\">new</span> HtmlWebpackPlugin(&#123;<br>            template: <span class=\"hljs-string\">'./src/index.html'</span><br>        &#125;)<br>    ],<br>    mode: <span class=\"hljs-string\">'development'</span><br>&#125;<br></code></pre></td></tr></table></figure>\n<p>需要 <code>npm i eslint-loader eslint eslint-config-airbnb-base eslint-plugin-import</code></p>\n<p>package.json</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs json\">&#123;<br>  <span class=\"hljs-attr\">\"name\"</span>: <span class=\"hljs-string\">\"webpack_code\"</span>,<br>  <span class=\"hljs-attr\">\"version\"</span>: <span class=\"hljs-string\">\"1.0.0\"</span>,<br>  <span class=\"hljs-attr\">\"description\"</span>: <span class=\"hljs-string\">\"\"</span>,<br>  <span class=\"hljs-attr\">\"main\"</span>: <span class=\"hljs-string\">\"index.js\"</span>,<br>  <span class=\"hljs-attr\">\"scripts\"</span>: &#123;<br>    <span class=\"hljs-attr\">\"test\"</span>: <span class=\"hljs-string\">\"echo \\\"Error: no test specified\\\" &amp;&amp; exit 1\"</span><br>  &#125;,<br>  <span class=\"hljs-attr\">\"author\"</span>: <span class=\"hljs-string\">\"\"</span>,<br>  <span class=\"hljs-attr\">\"license\"</span>: <span class=\"hljs-string\">\"ISC\"</span>,<br>  <span class=\"hljs-attr\">\"devDependencies\"</span>: &#123;<br>    <span class=\"hljs-attr\">\"css-loader\"</span>: <span class=\"hljs-string\">\"^3.5.3\"</span>,<br>    <span class=\"hljs-attr\">\"eslint\"</span>: <span class=\"hljs-string\">\"^7.1.0\"</span>,<br>    <span class=\"hljs-attr\">\"eslint-config-airbnb-base\"</span>: <span class=\"hljs-string\">\"^14.1.0\"</span>,<br>    <span class=\"hljs-attr\">\"eslint-loader\"</span>: <span class=\"hljs-string\">\"^4.0.2\"</span>,<br>    <span class=\"hljs-attr\">\"eslint-plugin-import\"</span>: <span class=\"hljs-string\">\"^2.20.2\"</span>,<br>    <span class=\"hljs-attr\">\"file-loader\"</span>: <span class=\"hljs-string\">\"^6.0.0\"</span>,<br>    <span class=\"hljs-attr\">\"html-loader\"</span>: <span class=\"hljs-string\">\"^1.1.0\"</span>,<br>    <span class=\"hljs-attr\">\"html-webpack-plugin\"</span>: <span class=\"hljs-string\">\"^4.3.0\"</span>,<br>    <span class=\"hljs-attr\">\"less\"</span>: <span class=\"hljs-string\">\"^3.11.1\"</span>,<br>    <span class=\"hljs-attr\">\"less-loader\"</span>: <span class=\"hljs-string\">\"^6.1.0\"</span>,<br>    <span class=\"hljs-attr\">\"mini-css-extract-plugin\"</span>: <span class=\"hljs-string\">\"^0.9.0\"</span>,<br>    <span class=\"hljs-attr\">\"optimize-css-assets-webpack-plugin\"</span>: <span class=\"hljs-string\">\"^5.0.3\"</span>,<br>    <span class=\"hljs-attr\">\"postcss-loader\"</span>: <span class=\"hljs-string\">\"^3.0.0\"</span>,<br>    <span class=\"hljs-attr\">\"postcss-preset-env\"</span>: <span class=\"hljs-string\">\"^6.7.0\"</span>,<br>    <span class=\"hljs-attr\">\"style-loader\"</span>: <span class=\"hljs-string\">\"^1.2.1\"</span>,<br>    <span class=\"hljs-attr\">\"url-loader\"</span>: <span class=\"hljs-string\">\"^4.1.0\"</span>,<br>    <span class=\"hljs-attr\">\"webpack\"</span>: <span class=\"hljs-string\">\"^4.43.0\"</span>,<br>    <span class=\"hljs-attr\">\"webpack-cli\"</span>: <span class=\"hljs-string\">\"^3.3.11\"</span>,<br>    <span class=\"hljs-attr\">\"webpack-dev-server\"</span>: <span class=\"hljs-string\">\"^3.11.0\"</span><br>  &#125;,<br>  <span class=\"hljs-attr\">\"browserslist\"</span>: &#123;<br>    <span class=\"hljs-attr\">\"development\"</span>: [<br>      <span class=\"hljs-string\">\"last 1 chrome version\"</span>,<br>      <span class=\"hljs-string\">\"last 1 firefox version\"</span>,<br>      <span class=\"hljs-string\">\"last 1 safari version\"</span><br>    ],<br>    <span class=\"hljs-attr\">\"production\"</span>: [<br>      <span class=\"hljs-string\">\"&gt;0.2%\"</span>,<br>      <span class=\"hljs-string\">\"not dead\"</span>,<br>      <span class=\"hljs-string\">\"not op_mini all\"</span><br>    ]<br>  &#125;,<br>  <span class=\"hljs-attr\">\"eslintConfig\"</span>:&#123;<br>    <span class=\"hljs-attr\">\"extends\"</span>: <span class=\"hljs-string\">\"airbnb-base\"</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>接下来我们可以试验一下，在 js 中写一些不规范的代码</p>\n<p>index.js</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">add</span>(<span class=\"hljs-params\">a, b</span>)</span>&#123;<br>  <span class=\"hljs-keyword\">return</span> a+b;<br>&#125;<br><span class=\"hljs-built_in\">console</span>.log(add(<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>))<br></code></pre></td></tr></table></figure>\n<p>之后运行webpack，我们再来看一下 index.js 文件</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">add</span>(<span class=\"hljs-params\">a, b</span>) </span>&#123;<br>  <span class=\"hljs-keyword\">return</span> a + b;<br>&#125;<br><span class=\"hljs-built_in\">console</span>.log(add(<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>));<br></code></pre></td></tr></table></figure>\n<p>所有的代码都规范了，但是，在控制台有一个警告，建议我们不要在这里写 console.log</p>\n<img src=\"/blog/2020/05/31/webpack03/warn.png\" class=\"\">\n\n<p>我们再来修改一下这个 index.js 文件吧</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">add</span>(<span class=\"hljs-params\">a, b</span>) </span>&#123;<br>  <span class=\"hljs-keyword\">return</span> a + b;<br>&#125;<br><br><span class=\"hljs-comment\">// 下一行eslint所有规则都失效（下一行不进行eslint检查）</span><br><span class=\"hljs-comment\">// eslint-disable-next-line</span><br><span class=\"hljs-built_in\">console</span>.log(add(<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>));<br></code></pre></td></tr></table></figure>\n\n<p>现在再运行 webpack 就不会有任何警告了</p>\n<h3 id=\"babel处理js兼容性\"><a href=\"#babel处理js兼容性\" class=\"headerlink\" title=\"babel处理js兼容性\"></a>babel处理js兼容性</h3><p>&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;当我们使用 ES6 语法来写代码时，我们在谷歌浏览器打开完全没有问题，但是使用IE打开就会报错，比如箭头函数，在IE下是不识别的，这时我们就需要用到 babel 了，来将 ES6 甚至更高级的语法转换成浏览器识别的语法。我们需要下载 <code>babel-loader</code> <code>@babel/core</code> <code>@babel/preset-env</code></p>\n<p>&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;在 webpack 中，按照以上的方法处理后，确实 IE 能识别像箭头函数这样的语法了，但是像更高级的语法 promise 却还是无法识别，这时我们需要做全部兼容性处理，用到 <code>@babel/polyfill</code> ，下载完成后，只需在代码中用 <code>import &#39;@babel/polyfill&#39;</code>引入即可，我们再打开浏览器看一下，确实可以识别了 promise。</p>\n<p>&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;虽然现在所有的语法都识别了，但现在还是有一个弊端，之前我们打的包可能也就几十KB，可是现在打出来的包需要几百KB，一下子打了好多，别着急，这时候我们就可以用按需加载了，只需要加载我们需要做兼容性处理的部分就好了，我们需要下载一个 <code>core-js</code>，webpack具体配置如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> &#123; resolve &#125; = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'path'</span>)<br><span class=\"hljs-keyword\">const</span> HtmlWebpackPlugin = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'html-webpack-plugin'</span>)<br><br><span class=\"hljs-built_in\">module</span>.exports = &#123;<br>    entry: <span class=\"hljs-string\">'./src/js/index.js'</span>,<br>    output: &#123;<br>        filename: <span class=\"hljs-string\">'js/built.js'</span>,<br>        path: resolve(__dirname, <span class=\"hljs-string\">'build'</span>)<br>    &#125;,<br>    <span class=\"hljs-built_in\">module</span>: &#123;<br>        rules: [<br>           <span class=\"hljs-comment\">/*</span><br><span class=\"hljs-comment\">            js兼容性处理：babel-loader @babel/core (需下载这两个)</span><br><span class=\"hljs-comment\">            1.基本兼容性处理 --&gt; @babel/preset-env （下载）</span><br><span class=\"hljs-comment\">              问题：只能转换基本语法，如promise高级语法不能转换</span><br><span class=\"hljs-comment\">            2.全部兼容性处理 --&gt; @babel/polyfill （下载）</span><br><span class=\"hljs-comment\">              问题：我只要解决部分兼容性问题，但是将所有兼容性代码全部引入，体积太大了~</span><br><span class=\"hljs-comment\">            3.需要做兼容性处理的就做：按需加载 --&gt; corejs (下载core-js)</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">           */</span><br>          &#123;<br>              test: <span class=\"hljs-regexp\">/\\.js$/</span>,<br>              exclude: <span class=\"hljs-regexp\">/node_modules/</span>,<br>              loader: <span class=\"hljs-string\">'babel-loader'</span>, <br>              options: &#123;<br>                  <span class=\"hljs-comment\">// 预设：指示babel做怎么样的兼容性处理</span><br>                <span class=\"hljs-comment\">// presets: ['@babel/preset-env']</span><br>                presets: [<br>                    <span class=\"hljs-string\">'@babel/preset-env'</span>,<br>                    &#123;<br>                        <span class=\"hljs-comment\">// 按需加载</span><br>                        useBuiltIns: <span class=\"hljs-string\">'usage'</span>,<br>                        corejs: &#123;<br>                            version: <span class=\"hljs-number\">3</span><br>                        &#125;,<br>                        <span class=\"hljs-comment\">// 指定兼容性做到哪个版本的浏览器</span><br>                        targets: &#123;<br>                            chrome: <span class=\"hljs-string\">'60'</span>,<br>                            firefox: <span class=\"hljs-string\">'60'</span>,<br>                            ie: <span class=\"hljs-string\">'9'</span>,<br>                            safari: <span class=\"hljs-string\">'10'</span>,<br>                            edge: <span class=\"hljs-string\">'17'</span><br>                        &#125;<br>                    &#125;<br>                ]<br>              &#125;<br>          &#125;<br>        ]<br>    &#125;,<br>    plugins: [<br>        <span class=\"hljs-keyword\">new</span> HtmlWebpackPlugin(&#123;<br>            template: <span class=\"hljs-string\">'./src/index.html'</span><br>        &#125;)<br>    ],<br>    mode: <span class=\"hljs-string\">'development'</span><br>&#125;<br></code></pre></td></tr></table></figure>\n<p>现在我们再回过头来看我们的包，比之前打出来的包要小很多，所以，平时我们开发时推荐使用1，3方法，不推荐全部兼容处理。</p>\n<h3 id=\"压缩js、html\"><a href=\"#压缩js、html\" class=\"headerlink\" title=\"压缩js、html\"></a>压缩js、html</h3><p>&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;js 的压缩很简单，只需要将<code>mode</code>设置为 <code>production</code>即可，因为 webpack 会默认将生产环境的 js 代码进行压缩，而 html 的压缩需要在 webpack 中进行简单的配置一下即可。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> &#123; resolve &#125; = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'path'</span>)<br><span class=\"hljs-keyword\">const</span> HtmlWebpackPlugin = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'html-webpack-plugin'</span>)<br><br><span class=\"hljs-built_in\">module</span>.exports = &#123;<br>    entry: <span class=\"hljs-string\">'./src/js/index.js'</span>,<br>    output: &#123;<br>        filename: <span class=\"hljs-string\">'js/built.js'</span>,<br>        path: resolve(__dirname, <span class=\"hljs-string\">'build'</span>)<br>    &#125;,<br>    plugins: [<br>        <span class=\"hljs-keyword\">new</span> HtmlWebpackPlugin(&#123;<br>            template: <span class=\"hljs-string\">'./src/index.html'</span>,<br>            <span class=\"hljs-comment\">// 压缩html</span><br>            minify: &#123;<br>                <span class=\"hljs-comment\">// 移除空格</span><br>                collapseWhitespace: <span class=\"hljs-literal\">true</span>,<br>                <span class=\"hljs-comment\">// 移除注释</span><br>                removeComments: <span class=\"hljs-literal\">true</span><br>            &#125;<br>        &#125;)<br>    ],<br>    <span class=\"hljs-comment\">// 生产环境下会自动压缩js代码</span><br>    mode: <span class=\"hljs-string\">'production'</span><br>&#125;<br></code></pre></td></tr></table></figure>\n<h3 id=\"开发环境的配置\"><a href=\"#开发环境的配置\" class=\"headerlink\" title=\"开发环境的配置\"></a>开发环境的配置</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> &#123;resolve&#125; = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'path'</span>)<br><span class=\"hljs-keyword\">const</span> MiniCssExtractPlugin = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'mini-css-extract-plugin'</span>)<br><span class=\"hljs-keyword\">const</span> OptimizeCssAssetsWebpackPlugin = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'optimize-css-assets-webpack-plugin'</span>)<br><span class=\"hljs-keyword\">const</span> HtmlWebpackPlugin = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'html-webpack-plugin'</span>)<br><br><span class=\"hljs-comment\">// 定义nodejs的环境变量：绝决定使用browserslist的哪个环境</span><br>process.env.NODE_ENV = <span class=\"hljs-string\">'production'</span><br><br><span class=\"hljs-comment\">// 复用loader</span><br><span class=\"hljs-keyword\">const</span> commonCssLoader =  [<br>    MiniCssExtractPlugin.loader,<br>    <span class=\"hljs-string\">'css-loader'</span>,<br>    &#123;<br>        <span class=\"hljs-comment\">// 还需要在package.json中定义browserslist</span><br>        loader: <span class=\"hljs-string\">'postcss-loader'</span>,<br>        options: &#123;<br>            ident: <span class=\"hljs-string\">'postcss'</span>,<br>            plugins: <span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> [<br>                <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'postcss-preset-env'</span>)()<br>            ]<br>        &#125;<br>    &#125;<br>]<br><br><span class=\"hljs-built_in\">module</span>.exports = &#123;<br>    entry: <span class=\"hljs-string\">'./src/js/index.js'</span>,<br>    output: &#123;<br>        filename: <span class=\"hljs-string\">'js/built.js'</span>,<br>        path: resolve(__dirname,<span class=\"hljs-string\">'build'</span>)<br>    &#125;,<br>    <span class=\"hljs-built_in\">module</span>: &#123;<br>        rules: [<br>            &#123;<br>                test: <span class=\"hljs-regexp\">/\\.css$/</span>,<br>                use: [...commonCssLoader]<br>            &#125;,<br>            &#123;<br>                test: <span class=\"hljs-regexp\">/\\.less$/</span>,<br>                use: [<br>                    ...commonCssLoader,<br>                    <span class=\"hljs-string\">'less-loader'</span><br>                ]<br>            &#125;,<br>            <span class=\"hljs-comment\">// js语法检查</span><br>            <span class=\"hljs-comment\">/* 正常来讲： 一个文件只能被一个Loader处理。</span><br><span class=\"hljs-comment\">               当一个文件要被多个loader处理，那么一定要指定loader的执行先后顺序：</span><br><span class=\"hljs-comment\">                  先执行eslint，再执行babel</span><br><span class=\"hljs-comment\">            */</span><br>            &#123;<br>                <span class=\"hljs-comment\">// 在package.json中eslintConfig --&gt; airbnb</span><br>                test: <span class=\"hljs-regexp\">/\\.js$/</span>,<br>                exclude: <span class=\"hljs-regexp\">/node_module/</span>,<br>                <span class=\"hljs-comment\">// 优先执行</span><br>                enforce: <span class=\"hljs-string\">'pre'</span>,<br>                loader: <span class=\"hljs-string\">'eslint-loader'</span>,<br>                options: &#123;<br>                    fix: <span class=\"hljs-literal\">true</span><br>                &#125;<br>            &#125;,<br>            <span class=\"hljs-comment\">// js兼容性处理</span><br>            &#123;<br>                <span class=\"hljs-comment\">// 在package.json中eslintConfig --&gt; airbnb</span><br>                test: <span class=\"hljs-regexp\">/\\.js$/</span>,<br>                exclude: <span class=\"hljs-regexp\">/node_module/</span>,<br>                loader: <span class=\"hljs-string\">'babel-loader'</span>,<br>                options: &#123;<br>                    presets: [<br>                        <span class=\"hljs-string\">'@babel/preset-env'</span>,<br>                        &#123;<br>                            useBuiltIns: <span class=\"hljs-string\">'usage'</span>,<br>                            corejs: &#123;<span class=\"hljs-attr\">version</span>: <span class=\"hljs-number\">3</span>&#125;,<br>                            targets: &#123;<br>                                chrome: <span class=\"hljs-string\">'60'</span>,<br>                                firefox: <span class=\"hljs-string\">'50'</span><br>                            &#125;<br>                        &#125;<br>                    ]<br>                &#125;<br>            &#125;,<br>            &#123;<br>                test: <span class=\"hljs-regexp\">/\\.(gif|jpg|png)/</span>,<br>                loader: <span class=\"hljs-string\">'url-loader'</span>,<br>                options: &#123;<br>                    limit: <span class=\"hljs-number\">8</span> * <span class=\"hljs-number\">1024</span>,<br>                    name: <span class=\"hljs-string\">'[hash:10].[ext]'</span>,<br>                    outputPath: <span class=\"hljs-string\">'imgs'</span>,<br>                    esModule: <span class=\"hljs-literal\">false</span><br>                &#125;<br>            &#125;,<br>            <span class=\"hljs-comment\">// 解析html中的图片</span><br>            &#123;<br>                test: <span class=\"hljs-regexp\">/\\.html$/</span>,<br>                loader: <span class=\"hljs-string\">'html-loader'</span><br>            &#125;,<br>            <span class=\"hljs-comment\">// 其他所有的文件处理</span><br>            &#123;<br>                exclude: <span class=\"hljs-regexp\">/\\.(js|css|html|less|jpg|png|gif)/</span>,<br>                loader: <span class=\"hljs-string\">'file-loader'</span>,<br>                options: &#123;<br>                    outputPath: <span class=\"hljs-string\">'media'</span><br>                &#125;<br>            &#125;<br>        ]<br>    &#125;,<br>    plugins: [<br>        <span class=\"hljs-keyword\">new</span> MiniCssExtractPlugin(&#123;<br>            filename: <span class=\"hljs-string\">'css/built.css'</span><br>        &#125;),<br>        <span class=\"hljs-comment\">// 压缩css</span><br>        <span class=\"hljs-keyword\">new</span> OptimizeCssAssetsWebpackPlugin(),<br>        <span class=\"hljs-keyword\">new</span> HtmlWebpackPlugin(&#123;<br>            template: <span class=\"hljs-string\">'./src/index.html'</span>,<br>            minify: &#123;<br>                collapseWhitespace: <span class=\"hljs-literal\">true</span>,<br>                removeComments: <span class=\"hljs-literal\">true</span><br>            &#125;<br>        &#125;)<br><br>    ],<br>    mode: <span class=\"hljs-string\">'production'</span><br>&#125;<br></code></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"eslint检查js\"><a href=\"#eslint检查js\" class=\"headerlink\" title=\"eslint检查js\"></a>eslint检查js</h3><p>&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;如果我们好多人开发一个项目，每个人有自己一套代码规范，这样会造成代码混乱，不宜维护。而 eslint 可以解决这个问题，让开发者使用同一套代码规范。</p>\n<p>webpack.config.js</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> &#123; resolve &#125; = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'path'</span>)<br><span class=\"hljs-keyword\">const</span> HtmlWebpackPlugin = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'html-webpack-plugin'</span>)<br><br><span class=\"hljs-built_in\">module</span>.exports = &#123;<br>    entry: <span class=\"hljs-string\">'./src/js/index.js'</span>,<br>    output: &#123;<br>        filename: <span class=\"hljs-string\">'js/built.js'</span>,<br>        path: resolve(__dirname, <span class=\"hljs-string\">'build'</span>)<br>    &#125;,<br>    <span class=\"hljs-built_in\">module</span>: &#123;<br>        rules: [<br>            <span class=\"hljs-comment\">/*</span><br><span class=\"hljs-comment\">                语法检查：eslint-loader eslint</span><br><span class=\"hljs-comment\">                注意：只检查自己写的源代码，第三方的库是不用检查的。</span><br><span class=\"hljs-comment\">                设置检查规则：</span><br><span class=\"hljs-comment\">                    package.json中eslintConfig中设置</span><br><span class=\"hljs-comment\">                        \"eslintConfig\":&#123;</span><br><span class=\"hljs-comment\">                            \"extends\": \"airbnb-base\"</span><br><span class=\"hljs-comment\">                        &#125;</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">                    https://github.com/airbnb/javascript</span><br><span class=\"hljs-comment\">                    airbnb   --&gt;  eslint-config-airbnb-base eslint eslint-plugin-import</span><br><span class=\"hljs-comment\">            */</span><br>           &#123;<br>               test: <span class=\"hljs-regexp\">/\\.js$/</span>,<br>               exclude: <span class=\"hljs-regexp\">/node_modules/</span>,<br>               loader: <span class=\"hljs-string\">'eslint-loader'</span>,<br>               options: &#123;<br>                   <span class=\"hljs-comment\">// 自动修复eslint的错误</span><br>                   fix: <span class=\"hljs-literal\">true</span><br>               &#125;<br>           &#125;<br>        ]<br>    &#125;,<br>    plugins: [<br>        <span class=\"hljs-keyword\">new</span> HtmlWebpackPlugin(&#123;<br>            template: <span class=\"hljs-string\">'./src/index.html'</span><br>        &#125;)<br>    ],<br>    mode: <span class=\"hljs-string\">'development'</span><br>&#125;<br></code></pre></td></tr></table></figure>\n<p>需要 <code>npm i eslint-loader eslint eslint-config-airbnb-base eslint-plugin-import</code></p>\n<p>package.json</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs json\">&#123;<br>  <span class=\"hljs-attr\">\"name\"</span>: <span class=\"hljs-string\">\"webpack_code\"</span>,<br>  <span class=\"hljs-attr\">\"version\"</span>: <span class=\"hljs-string\">\"1.0.0\"</span>,<br>  <span class=\"hljs-attr\">\"description\"</span>: <span class=\"hljs-string\">\"\"</span>,<br>  <span class=\"hljs-attr\">\"main\"</span>: <span class=\"hljs-string\">\"index.js\"</span>,<br>  <span class=\"hljs-attr\">\"scripts\"</span>: &#123;<br>    <span class=\"hljs-attr\">\"test\"</span>: <span class=\"hljs-string\">\"echo \\\"Error: no test specified\\\" &amp;&amp; exit 1\"</span><br>  &#125;,<br>  <span class=\"hljs-attr\">\"author\"</span>: <span class=\"hljs-string\">\"\"</span>,<br>  <span class=\"hljs-attr\">\"license\"</span>: <span class=\"hljs-string\">\"ISC\"</span>,<br>  <span class=\"hljs-attr\">\"devDependencies\"</span>: &#123;<br>    <span class=\"hljs-attr\">\"css-loader\"</span>: <span class=\"hljs-string\">\"^3.5.3\"</span>,<br>    <span class=\"hljs-attr\">\"eslint\"</span>: <span class=\"hljs-string\">\"^7.1.0\"</span>,<br>    <span class=\"hljs-attr\">\"eslint-config-airbnb-base\"</span>: <span class=\"hljs-string\">\"^14.1.0\"</span>,<br>    <span class=\"hljs-attr\">\"eslint-loader\"</span>: <span class=\"hljs-string\">\"^4.0.2\"</span>,<br>    <span class=\"hljs-attr\">\"eslint-plugin-import\"</span>: <span class=\"hljs-string\">\"^2.20.2\"</span>,<br>    <span class=\"hljs-attr\">\"file-loader\"</span>: <span class=\"hljs-string\">\"^6.0.0\"</span>,<br>    <span class=\"hljs-attr\">\"html-loader\"</span>: <span class=\"hljs-string\">\"^1.1.0\"</span>,<br>    <span class=\"hljs-attr\">\"html-webpack-plugin\"</span>: <span class=\"hljs-string\">\"^4.3.0\"</span>,<br>    <span class=\"hljs-attr\">\"less\"</span>: <span class=\"hljs-string\">\"^3.11.1\"</span>,<br>    <span class=\"hljs-attr\">\"less-loader\"</span>: <span class=\"hljs-string\">\"^6.1.0\"</span>,<br>    <span class=\"hljs-attr\">\"mini-css-extract-plugin\"</span>: <span class=\"hljs-string\">\"^0.9.0\"</span>,<br>    <span class=\"hljs-attr\">\"optimize-css-assets-webpack-plugin\"</span>: <span class=\"hljs-string\">\"^5.0.3\"</span>,<br>    <span class=\"hljs-attr\">\"postcss-loader\"</span>: <span class=\"hljs-string\">\"^3.0.0\"</span>,<br>    <span class=\"hljs-attr\">\"postcss-preset-env\"</span>: <span class=\"hljs-string\">\"^6.7.0\"</span>,<br>    <span class=\"hljs-attr\">\"style-loader\"</span>: <span class=\"hljs-string\">\"^1.2.1\"</span>,<br>    <span class=\"hljs-attr\">\"url-loader\"</span>: <span class=\"hljs-string\">\"^4.1.0\"</span>,<br>    <span class=\"hljs-attr\">\"webpack\"</span>: <span class=\"hljs-string\">\"^4.43.0\"</span>,<br>    <span class=\"hljs-attr\">\"webpack-cli\"</span>: <span class=\"hljs-string\">\"^3.3.11\"</span>,<br>    <span class=\"hljs-attr\">\"webpack-dev-server\"</span>: <span class=\"hljs-string\">\"^3.11.0\"</span><br>  &#125;,<br>  <span class=\"hljs-attr\">\"browserslist\"</span>: &#123;<br>    <span class=\"hljs-attr\">\"development\"</span>: [<br>      <span class=\"hljs-string\">\"last 1 chrome version\"</span>,<br>      <span class=\"hljs-string\">\"last 1 firefox version\"</span>,<br>      <span class=\"hljs-string\">\"last 1 safari version\"</span><br>    ],<br>    <span class=\"hljs-attr\">\"production\"</span>: [<br>      <span class=\"hljs-string\">\"&gt;0.2%\"</span>,<br>      <span class=\"hljs-string\">\"not dead\"</span>,<br>      <span class=\"hljs-string\">\"not op_mini all\"</span><br>    ]<br>  &#125;,<br>  <span class=\"hljs-attr\">\"eslintConfig\"</span>:&#123;<br>    <span class=\"hljs-attr\">\"extends\"</span>: <span class=\"hljs-string\">\"airbnb-base\"</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>接下来我们可以试验一下，在 js 中写一些不规范的代码</p>\n<p>index.js</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">add</span>(<span class=\"hljs-params\">a, b</span>)</span>&#123;<br>  <span class=\"hljs-keyword\">return</span> a+b;<br>&#125;<br><span class=\"hljs-built_in\">console</span>.log(add(<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>))<br></code></pre></td></tr></table></figure>\n<p>之后运行webpack，我们再来看一下 index.js 文件</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">add</span>(<span class=\"hljs-params\">a, b</span>) </span>&#123;<br>  <span class=\"hljs-keyword\">return</span> a + b;<br>&#125;<br><span class=\"hljs-built_in\">console</span>.log(add(<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>));<br></code></pre></td></tr></table></figure>\n<p>所有的代码都规范了，但是，在控制台有一个警告，建议我们不要在这里写 console.log</p>\n<img src=\"/blog/2020/05/31/webpack03/warn.png\" class=\"\">\n\n<p>我们再来修改一下这个 index.js 文件吧</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">add</span>(<span class=\"hljs-params\">a, b</span>) </span>&#123;<br>  <span class=\"hljs-keyword\">return</span> a + b;<br>&#125;<br><br><span class=\"hljs-comment\">// 下一行eslint所有规则都失效（下一行不进行eslint检查）</span><br><span class=\"hljs-comment\">// eslint-disable-next-line</span><br><span class=\"hljs-built_in\">console</span>.log(add(<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>));<br></code></pre></td></tr></table></figure>\n\n<p>现在再运行 webpack 就不会有任何警告了</p>\n<h3 id=\"babel处理js兼容性\"><a href=\"#babel处理js兼容性\" class=\"headerlink\" title=\"babel处理js兼容性\"></a>babel处理js兼容性</h3><p>&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;当我们使用 ES6 语法来写代码时，我们在谷歌浏览器打开完全没有问题，但是使用IE打开就会报错，比如箭头函数，在IE下是不识别的，这时我们就需要用到 babel 了，来将 ES6 甚至更高级的语法转换成浏览器识别的语法。我们需要下载 <code>babel-loader</code> <code>@babel/core</code> <code>@babel/preset-env</code></p>\n<p>&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;在 webpack 中，按照以上的方法处理后，确实 IE 能识别像箭头函数这样的语法了，但是像更高级的语法 promise 却还是无法识别，这时我们需要做全部兼容性处理，用到 <code>@babel/polyfill</code> ，下载完成后，只需在代码中用 <code>import &#39;@babel/polyfill&#39;</code>引入即可，我们再打开浏览器看一下，确实可以识别了 promise。</p>\n<p>&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;虽然现在所有的语法都识别了，但现在还是有一个弊端，之前我们打的包可能也就几十KB，可是现在打出来的包需要几百KB，一下子打了好多，别着急，这时候我们就可以用按需加载了，只需要加载我们需要做兼容性处理的部分就好了，我们需要下载一个 <code>core-js</code>，webpack具体配置如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> &#123; resolve &#125; = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'path'</span>)<br><span class=\"hljs-keyword\">const</span> HtmlWebpackPlugin = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'html-webpack-plugin'</span>)<br><br><span class=\"hljs-built_in\">module</span>.exports = &#123;<br>    entry: <span class=\"hljs-string\">'./src/js/index.js'</span>,<br>    output: &#123;<br>        filename: <span class=\"hljs-string\">'js/built.js'</span>,<br>        path: resolve(__dirname, <span class=\"hljs-string\">'build'</span>)<br>    &#125;,<br>    <span class=\"hljs-built_in\">module</span>: &#123;<br>        rules: [<br>           <span class=\"hljs-comment\">/*</span><br><span class=\"hljs-comment\">            js兼容性处理：babel-loader @babel/core (需下载这两个)</span><br><span class=\"hljs-comment\">            1.基本兼容性处理 --&gt; @babel/preset-env （下载）</span><br><span class=\"hljs-comment\">              问题：只能转换基本语法，如promise高级语法不能转换</span><br><span class=\"hljs-comment\">            2.全部兼容性处理 --&gt; @babel/polyfill （下载）</span><br><span class=\"hljs-comment\">              问题：我只要解决部分兼容性问题，但是将所有兼容性代码全部引入，体积太大了~</span><br><span class=\"hljs-comment\">            3.需要做兼容性处理的就做：按需加载 --&gt; corejs (下载core-js)</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">           */</span><br>          &#123;<br>              test: <span class=\"hljs-regexp\">/\\.js$/</span>,<br>              exclude: <span class=\"hljs-regexp\">/node_modules/</span>,<br>              loader: <span class=\"hljs-string\">'babel-loader'</span>, <br>              options: &#123;<br>                  <span class=\"hljs-comment\">// 预设：指示babel做怎么样的兼容性处理</span><br>                <span class=\"hljs-comment\">// presets: ['@babel/preset-env']</span><br>                presets: [<br>                    <span class=\"hljs-string\">'@babel/preset-env'</span>,<br>                    &#123;<br>                        <span class=\"hljs-comment\">// 按需加载</span><br>                        useBuiltIns: <span class=\"hljs-string\">'usage'</span>,<br>                        corejs: &#123;<br>                            version: <span class=\"hljs-number\">3</span><br>                        &#125;,<br>                        <span class=\"hljs-comment\">// 指定兼容性做到哪个版本的浏览器</span><br>                        targets: &#123;<br>                            chrome: <span class=\"hljs-string\">'60'</span>,<br>                            firefox: <span class=\"hljs-string\">'60'</span>,<br>                            ie: <span class=\"hljs-string\">'9'</span>,<br>                            safari: <span class=\"hljs-string\">'10'</span>,<br>                            edge: <span class=\"hljs-string\">'17'</span><br>                        &#125;<br>                    &#125;<br>                ]<br>              &#125;<br>          &#125;<br>        ]<br>    &#125;,<br>    plugins: [<br>        <span class=\"hljs-keyword\">new</span> HtmlWebpackPlugin(&#123;<br>            template: <span class=\"hljs-string\">'./src/index.html'</span><br>        &#125;)<br>    ],<br>    mode: <span class=\"hljs-string\">'development'</span><br>&#125;<br></code></pre></td></tr></table></figure>\n<p>现在我们再回过头来看我们的包，比之前打出来的包要小很多，所以，平时我们开发时推荐使用1，3方法，不推荐全部兼容处理。</p>\n<h3 id=\"压缩js、html\"><a href=\"#压缩js、html\" class=\"headerlink\" title=\"压缩js、html\"></a>压缩js、html</h3><p>&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;js 的压缩很简单，只需要将<code>mode</code>设置为 <code>production</code>即可，因为 webpack 会默认将生产环境的 js 代码进行压缩，而 html 的压缩需要在 webpack 中进行简单的配置一下即可。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> &#123; resolve &#125; = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'path'</span>)<br><span class=\"hljs-keyword\">const</span> HtmlWebpackPlugin = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'html-webpack-plugin'</span>)<br><br><span class=\"hljs-built_in\">module</span>.exports = &#123;<br>    entry: <span class=\"hljs-string\">'./src/js/index.js'</span>,<br>    output: &#123;<br>        filename: <span class=\"hljs-string\">'js/built.js'</span>,<br>        path: resolve(__dirname, <span class=\"hljs-string\">'build'</span>)<br>    &#125;,<br>    plugins: [<br>        <span class=\"hljs-keyword\">new</span> HtmlWebpackPlugin(&#123;<br>            template: <span class=\"hljs-string\">'./src/index.html'</span>,<br>            <span class=\"hljs-comment\">// 压缩html</span><br>            minify: &#123;<br>                <span class=\"hljs-comment\">// 移除空格</span><br>                collapseWhitespace: <span class=\"hljs-literal\">true</span>,<br>                <span class=\"hljs-comment\">// 移除注释</span><br>                removeComments: <span class=\"hljs-literal\">true</span><br>            &#125;<br>        &#125;)<br>    ],<br>    <span class=\"hljs-comment\">// 生产环境下会自动压缩js代码</span><br>    mode: <span class=\"hljs-string\">'production'</span><br>&#125;<br></code></pre></td></tr></table></figure>\n<h3 id=\"开发环境的配置\"><a href=\"#开发环境的配置\" class=\"headerlink\" title=\"开发环境的配置\"></a>开发环境的配置</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> &#123;resolve&#125; = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'path'</span>)<br><span class=\"hljs-keyword\">const</span> MiniCssExtractPlugin = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'mini-css-extract-plugin'</span>)<br><span class=\"hljs-keyword\">const</span> OptimizeCssAssetsWebpackPlugin = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'optimize-css-assets-webpack-plugin'</span>)<br><span class=\"hljs-keyword\">const</span> HtmlWebpackPlugin = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'html-webpack-plugin'</span>)<br><br><span class=\"hljs-comment\">// 定义nodejs的环境变量：绝决定使用browserslist的哪个环境</span><br>process.env.NODE_ENV = <span class=\"hljs-string\">'production'</span><br><br><span class=\"hljs-comment\">// 复用loader</span><br><span class=\"hljs-keyword\">const</span> commonCssLoader =  [<br>    MiniCssExtractPlugin.loader,<br>    <span class=\"hljs-string\">'css-loader'</span>,<br>    &#123;<br>        <span class=\"hljs-comment\">// 还需要在package.json中定义browserslist</span><br>        loader: <span class=\"hljs-string\">'postcss-loader'</span>,<br>        options: &#123;<br>            ident: <span class=\"hljs-string\">'postcss'</span>,<br>            plugins: <span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> [<br>                <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'postcss-preset-env'</span>)()<br>            ]<br>        &#125;<br>    &#125;<br>]<br><br><span class=\"hljs-built_in\">module</span>.exports = &#123;<br>    entry: <span class=\"hljs-string\">'./src/js/index.js'</span>,<br>    output: &#123;<br>        filename: <span class=\"hljs-string\">'js/built.js'</span>,<br>        path: resolve(__dirname,<span class=\"hljs-string\">'build'</span>)<br>    &#125;,<br>    <span class=\"hljs-built_in\">module</span>: &#123;<br>        rules: [<br>            &#123;<br>                test: <span class=\"hljs-regexp\">/\\.css$/</span>,<br>                use: [...commonCssLoader]<br>            &#125;,<br>            &#123;<br>                test: <span class=\"hljs-regexp\">/\\.less$/</span>,<br>                use: [<br>                    ...commonCssLoader,<br>                    <span class=\"hljs-string\">'less-loader'</span><br>                ]<br>            &#125;,<br>            <span class=\"hljs-comment\">// js语法检查</span><br>            <span class=\"hljs-comment\">/* 正常来讲： 一个文件只能被一个Loader处理。</span><br><span class=\"hljs-comment\">               当一个文件要被多个loader处理，那么一定要指定loader的执行先后顺序：</span><br><span class=\"hljs-comment\">                  先执行eslint，再执行babel</span><br><span class=\"hljs-comment\">            */</span><br>            &#123;<br>                <span class=\"hljs-comment\">// 在package.json中eslintConfig --&gt; airbnb</span><br>                test: <span class=\"hljs-regexp\">/\\.js$/</span>,<br>                exclude: <span class=\"hljs-regexp\">/node_module/</span>,<br>                <span class=\"hljs-comment\">// 优先执行</span><br>                enforce: <span class=\"hljs-string\">'pre'</span>,<br>                loader: <span class=\"hljs-string\">'eslint-loader'</span>,<br>                options: &#123;<br>                    fix: <span class=\"hljs-literal\">true</span><br>                &#125;<br>            &#125;,<br>            <span class=\"hljs-comment\">// js兼容性处理</span><br>            &#123;<br>                <span class=\"hljs-comment\">// 在package.json中eslintConfig --&gt; airbnb</span><br>                test: <span class=\"hljs-regexp\">/\\.js$/</span>,<br>                exclude: <span class=\"hljs-regexp\">/node_module/</span>,<br>                loader: <span class=\"hljs-string\">'babel-loader'</span>,<br>                options: &#123;<br>                    presets: [<br>                        <span class=\"hljs-string\">'@babel/preset-env'</span>,<br>                        &#123;<br>                            useBuiltIns: <span class=\"hljs-string\">'usage'</span>,<br>                            corejs: &#123;<span class=\"hljs-attr\">version</span>: <span class=\"hljs-number\">3</span>&#125;,<br>                            targets: &#123;<br>                                chrome: <span class=\"hljs-string\">'60'</span>,<br>                                firefox: <span class=\"hljs-string\">'50'</span><br>                            &#125;<br>                        &#125;<br>                    ]<br>                &#125;<br>            &#125;,<br>            &#123;<br>                test: <span class=\"hljs-regexp\">/\\.(gif|jpg|png)/</span>,<br>                loader: <span class=\"hljs-string\">'url-loader'</span>,<br>                options: &#123;<br>                    limit: <span class=\"hljs-number\">8</span> * <span class=\"hljs-number\">1024</span>,<br>                    name: <span class=\"hljs-string\">'[hash:10].[ext]'</span>,<br>                    outputPath: <span class=\"hljs-string\">'imgs'</span>,<br>                    esModule: <span class=\"hljs-literal\">false</span><br>                &#125;<br>            &#125;,<br>            <span class=\"hljs-comment\">// 解析html中的图片</span><br>            &#123;<br>                test: <span class=\"hljs-regexp\">/\\.html$/</span>,<br>                loader: <span class=\"hljs-string\">'html-loader'</span><br>            &#125;,<br>            <span class=\"hljs-comment\">// 其他所有的文件处理</span><br>            &#123;<br>                exclude: <span class=\"hljs-regexp\">/\\.(js|css|html|less|jpg|png|gif)/</span>,<br>                loader: <span class=\"hljs-string\">'file-loader'</span>,<br>                options: &#123;<br>                    outputPath: <span class=\"hljs-string\">'media'</span><br>                &#125;<br>            &#125;<br>        ]<br>    &#125;,<br>    plugins: [<br>        <span class=\"hljs-keyword\">new</span> MiniCssExtractPlugin(&#123;<br>            filename: <span class=\"hljs-string\">'css/built.css'</span><br>        &#125;),<br>        <span class=\"hljs-comment\">// 压缩css</span><br>        <span class=\"hljs-keyword\">new</span> OptimizeCssAssetsWebpackPlugin(),<br>        <span class=\"hljs-keyword\">new</span> HtmlWebpackPlugin(&#123;<br>            template: <span class=\"hljs-string\">'./src/index.html'</span>,<br>            minify: &#123;<br>                collapseWhitespace: <span class=\"hljs-literal\">true</span>,<br>                removeComments: <span class=\"hljs-literal\">true</span><br>            &#125;<br>        &#125;)<br><br>    ],<br>    mode: <span class=\"hljs-string\">'production'</span><br>&#125;<br></code></pre></td></tr></table></figure>"},{"title":"webpack04","date":"2020-06-07T17:43:01.000Z","_content":"### webpack开发环境的性能优化\n&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;开发环境下的优化可以分为两方面：优化开发环境下打包构建速度、优化代码调试。\n\n- 优化打包构建速度（HMR）\n\n    HMR 即 hot module replacement 热模块替换 / 模块热替换，它的作用是，一个模块发生变化，只会重新打包这一个模块，而不是打包所有模块，可以极大的提升构建速度。只需要在 devServer 中配置 ``` hot: true```即可。\n\n    对于css 来说，style-loader 已经内部实现了这一个功能；而 js 是默认不能使用 HMR 这个功能的，需要修改 js 代码，添加支持HMR功能的代码，但是要注意的是，HMR 对于 js 来说只能处理非入口 js 文件的其他文件；html 也是默认不能使用 HMR 这个功能，但是 html 也不需要做这个功能，因为我们只有一个 index.html文件，所以一旦更新了，势必要所有的模块都要重新打包，但是 HMR 会导致另一个问题，就是 html 不能热更新了，想要解决这个问题就要修改我们的入口，将html文件引入。\n\n    webpack配置\n    ```js\n    /*\n    HMR：hot module replacement 热模块替换 / 模块热替换\n        作用：一个模块发生变化，只会重新打包这一个模块（而不是打包所有模块）\n        极大提升构建速度\n\n        样式文件：可以使用HMR功能，因为style-loader内部实现了\n        js文件：默认不能使用HMR功能 --> 需要修改js代码，添加支持HMR功能的代码\n        注意：HMR功能对于js来说只能处理非入口js文件的其他文件\n        html文件：默认不能使用HMR功能。同时会导致问题：html文件不能热更新了(不需要做HMR功能)\n        解决：修改entry入口，将Html文件引入\n    */\n\n\n    const { resolve } = require('path')\n    const HtmlWebpackPlugin = require('html-webpack-plugin')\n\n    module.exports = {\n        entry: ['./src/js/index.js', './src/index.html'],\n        output: {\n            filename: 'js/built.js',\n            path: resolve(__dirname,'build')\n        },\n        module: {\n            rules: [\n                {\n                    test: /\\.css$/,\n                    use: ['style-loader','css-loader']\n                },\n                {\n                    test: /\\.less$/,\n                    use: ['style-loader','css-loader','less-loader']\n                },\n                {\n                    test: /\\.(jpg|png|gif)$/,\n                    loader: 'url-loader',\n                    options: {\n                        limit: 8 * 1024,\n                        esModule: false,\n                        name: '[hash:10].[ext]',\n                        outputPath: 'imgs'\n                    }\n                },\n                {\n                    exclude: /\\.(html|js|css|less|jpg|png|gif)/,\n                    loader: 'file-loader',\n                    options: {\n                        name: '[hash:10].[ext]',\n                        outputPath: 'media'\n                    }\n                },\n                {\n                    test: /\\.html$/,\n                    loader: 'html-loader'\n                }\n            ]\n        },\n        plugins: [\n            new HtmlWebpackPlugin({\n                template: \"./src/index.html\"\n            })\n        ],\n        mode: 'development',\n        devServer: {\n            contentBase: resolve(__dirname,'build'),\n            compress: true,\n            port: 3000,\n            open: true,\n            // 开启HMR功能\n            // 当修改了webpack配置，新配置要想生效，必须重启webpack服务\n            hot: true\n        }\n    }\n    ```\n    index.js中的代码\n    ```js\n        import '../css/iconfont.css'\n        import '../css/index.less'\n        import print from './print'\n\n        console.log('js被重新加载了')\n\n        print()\n\n        function add(x,y){\n            return x+y\n        }\n        console.log(add(1,2))\n\n        if(module.hot){\n            // 一旦module.hot为true,说明开启了HMR功能 --> 让HMR工能生效\n            module.hot.accept('./print.js', function(){\n                // 方法会监听print.js文件的变化，一旦发生变化，其他模块不会重新打包构建，\n                // 会执行后面的回调函数\n                print()\n            })\n        }\n    ```\n\n- source-map\n\n    source-map 一种提供源代码到构建后代码映射技术（如果构建后代码出错了，通过映射可以追踪源代码错误），它的组合方式为``` [inline-|hidden-|eval-][nosources-][cheap-[module-]]source-map```，在 devtool 中设置即可\n    ```js\n    const { resolve } = require('path')\n    const HtmlWebpackPlugin = require('html-webpack-plugin')\n\n    module.exports = {\n        entry: ['./src/js/index.js', './src/index.html'],\n        output: {\n            filename: 'js/built.js',\n            path: resolve(__dirname,'build')\n        },\n        module: {\n            rules: [\n                {\n                    test: /\\.css$/,\n                    use: ['style-loader','css-loader']\n                },\n                {\n                    test: /\\.less$/,\n                    use: ['style-loader','css-loader','less-loader']\n                },\n                {\n                    test: /\\.(jpg|png|gif)$/,\n                    loader: 'url-loader',\n                    options: {\n                    limit: 8 * 1024,\n                    esModule: false,\n                    name: '[hash:10].[ext]',\n                    outputPath: 'imgs'\n                    }\n                },\n                {\n                    exclude: /\\.(html|js|css|less|jpg|png|gif)/,\n                    loader: 'file-loader',\n                    options: {\n                    name: '[hash:10].[ext]',\n                    outputPath: 'media'\n                    }\n                },\n                {\n                    test: /\\.html$/,\n                    loader: 'html-loader'\n                }\n            ]\n        },\n        plugins: [\n            new HtmlWebpackPlugin({\n                template: \"./src/index.html\"\n            })\n        ],\n        mode: 'development',\n        devServer: {\n            contentBase: resolve(__dirname,'build'),\n            compress: true,\n            port: 3000,\n            open: true,\n            hot: true\n        },\n        devtool: 'inline-source-map'\n    }\n    /*\n    source-map: 一种提供源代码到构建后代码映射技术(如果构建后代码出错了，通过映射可以追踪源代码错误)\n\n    [inline-|hidden-|eval-][nosources-][cheap-[module-]]source-map\n    \n    source-map：外部\n        错误代码的准确信息 和 源代码的错误位置\n    inline-source-map：内联\n        只生成一个内联source-map\n        错误代码的准确信息 和 源代码的错误位置\n    hidden-source-map：外部\n        错误代码错误原因，但是没有错误位置\n        不能追踪源代码错误，只能提示到构建后代码的错误位置\n    eval-source-map：内联\n        每一个文件都生成对应的source-map，都在eval\n        错误代码的准确信息 和 源代码的错误位置\n    nosources-source-map：外部\n        错误代码的准确信息，但是没有任何源代码信息\n    cheap-source-map：外部\n        错误代码的准确信息 和 源代码的错误位置\n        只能精确到行\n    cheap-module-source-map：外部\n        错误代码的准确信息 和 源代码的错误位置\n        module会将loader的source map加入\n\n    内联和外部的区别：1.外部生成了文件，内联没有。2.内联构建速度更快\n\n    开发环境：速度快，调试更友好\n        速度快（eval>inline>cheap>...）\n        eval-cheap-source-map\n        eval-source-map\n        调试更友好\n        source-map\n        cheap-module-source-map\n        cheap-source-map\n        --> eval-source-map / eval-cheap-module-source-map\n    生产环境：源代码要不要隐藏，调试要不要更友好\n        内联会让代码体积变大，所以在生产环境下不用内联\n        nosources-source-map 全部隐藏\n        hidden-source-map 只隐藏源代码，会提示构建后代码错误信息\n        --> source-map / cheap-module-source-map\n\n    */\n    ```\n\n- oneOf 提升构建速度\n\n    正常情况下，我们文件匹配 loader，会把所有的 loader 配置都走一遍，这样会大大降低我们的构建速度，所以我们这时候可以选 oneOf，一旦匹配到就不会继续向下匹配，但是有的文件需要匹配多个 loader，我们可以把其它的 loader 提取出来就可以了\n\n    ```js\n    const {resolve} = require('path')\n    const MiniCssExtractPlugin = require('mini-css-extract-plugin')\n    const OptimizeCssAssetsWebpackPlugin = require('optimize-css-assets-webpack-plugin')\n    const HtmlWebpackPlugin = require('html-webpack-plugin')\n\n    process.env.NODE_ENV = 'production'\n\n    // 复用loader\n    const commonCssLoader =  [\n        MiniCssExtractPlugin.loader,\n        'css-loader',\n        {\n            loader: 'postcss-loader',\n            options: {\n                ident: 'postcss',\n                plugins: () => [\n                    require('postcss-preset-env')()\n                ]\n            }\n        }\n    ]\n\n    module.exports = {\n        entry: './src/js/index.js',\n        output: {\n            filename: 'js/built.js',\n            path: resolve(__dirname,'build')\n        },\n        module: {\n            rules: [\n                {\n                    test: /\\.js$/,\n                    exclude: /node_module/,\n                    enforce: 'pre',\n                    loader: 'eslint-loader',\n                    options: {\n                        fix: true\n                    }\n                },\n                {\n                    // 以下loader只会匹配一个\n                    // 注意：不能有两个配置处理同一类型文件\n                    // 提升构建速度，让我们这个文件以后不会反复的被多个loader都去过一遍\n                    oneOf: [\n                        {\n                            test: /\\.css$/,\n                            use: [...commonCssLoader]\n                        },\n                        {\n                            test: /\\.less$/,\n                            use: [\n                                ...commonCssLoader,\n                                'less-loader'\n                            ]\n                        },\n                        {\n                            test: /\\.js$/,\n                            exclude: /node_module/,\n                            loader: 'babel-loader',\n                            options: {\n                                presets: [\n                                    '@babel/preset-env',\n                                    {\n                                        useBuiltIns: 'usage',\n                                        corejs: {version: 3},\n                                        targets: {\n                                            chrome: '60',\n                                            firefox: '50'\n                                        }\n                                    }\n                                ]\n                            }\n                        },\n                        {\n                            test: /\\.(gif|jpg|png)/,\n                            loader: 'url-loader',\n                            options: {\n                                limit: 8 * 1024,\n                                name: '[hash:10].[ext]',\n                                outputPath: 'imgs',\n                                esModule: false\n                            }\n                        },\n                        {\n                            test: /\\.html$/,\n                            loader: 'html-loader'\n                        },\n                        {\n                            exclude: /\\.(js|css|html|less|jpg|png|gif)/,\n                            loader: 'file-loader',\n                            options: {\n                                outputPath: 'media'\n                            }\n                        }\n                    ]\n                }\n            ]\n        },\n        plugins: [\n            new MiniCssExtractPlugin({\n                filename: 'css/built.css'\n            }),\n            new OptimizeCssAssetsWebpackPlugin(),\n            new HtmlWebpackPlugin({\n                template: './src/index.html',\n                minify: {\n                    collapseWhitespace: true,\n                    removeComments: true\n                }\n            })\n\n        ],\n        mode: 'production'\n    }\n    ```","source":"_posts/webpack04.md","raw":"---\ntitle: webpack04\ndate: 2020-06-08 01:43:01\ntags: webpack\ncategories:\n- 前端构建工具\n---\n### webpack开发环境的性能优化\n&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;开发环境下的优化可以分为两方面：优化开发环境下打包构建速度、优化代码调试。\n\n- 优化打包构建速度（HMR）\n\n    HMR 即 hot module replacement 热模块替换 / 模块热替换，它的作用是，一个模块发生变化，只会重新打包这一个模块，而不是打包所有模块，可以极大的提升构建速度。只需要在 devServer 中配置 ``` hot: true```即可。\n\n    对于css 来说，style-loader 已经内部实现了这一个功能；而 js 是默认不能使用 HMR 这个功能的，需要修改 js 代码，添加支持HMR功能的代码，但是要注意的是，HMR 对于 js 来说只能处理非入口 js 文件的其他文件；html 也是默认不能使用 HMR 这个功能，但是 html 也不需要做这个功能，因为我们只有一个 index.html文件，所以一旦更新了，势必要所有的模块都要重新打包，但是 HMR 会导致另一个问题，就是 html 不能热更新了，想要解决这个问题就要修改我们的入口，将html文件引入。\n\n    webpack配置\n    ```js\n    /*\n    HMR：hot module replacement 热模块替换 / 模块热替换\n        作用：一个模块发生变化，只会重新打包这一个模块（而不是打包所有模块）\n        极大提升构建速度\n\n        样式文件：可以使用HMR功能，因为style-loader内部实现了\n        js文件：默认不能使用HMR功能 --> 需要修改js代码，添加支持HMR功能的代码\n        注意：HMR功能对于js来说只能处理非入口js文件的其他文件\n        html文件：默认不能使用HMR功能。同时会导致问题：html文件不能热更新了(不需要做HMR功能)\n        解决：修改entry入口，将Html文件引入\n    */\n\n\n    const { resolve } = require('path')\n    const HtmlWebpackPlugin = require('html-webpack-plugin')\n\n    module.exports = {\n        entry: ['./src/js/index.js', './src/index.html'],\n        output: {\n            filename: 'js/built.js',\n            path: resolve(__dirname,'build')\n        },\n        module: {\n            rules: [\n                {\n                    test: /\\.css$/,\n                    use: ['style-loader','css-loader']\n                },\n                {\n                    test: /\\.less$/,\n                    use: ['style-loader','css-loader','less-loader']\n                },\n                {\n                    test: /\\.(jpg|png|gif)$/,\n                    loader: 'url-loader',\n                    options: {\n                        limit: 8 * 1024,\n                        esModule: false,\n                        name: '[hash:10].[ext]',\n                        outputPath: 'imgs'\n                    }\n                },\n                {\n                    exclude: /\\.(html|js|css|less|jpg|png|gif)/,\n                    loader: 'file-loader',\n                    options: {\n                        name: '[hash:10].[ext]',\n                        outputPath: 'media'\n                    }\n                },\n                {\n                    test: /\\.html$/,\n                    loader: 'html-loader'\n                }\n            ]\n        },\n        plugins: [\n            new HtmlWebpackPlugin({\n                template: \"./src/index.html\"\n            })\n        ],\n        mode: 'development',\n        devServer: {\n            contentBase: resolve(__dirname,'build'),\n            compress: true,\n            port: 3000,\n            open: true,\n            // 开启HMR功能\n            // 当修改了webpack配置，新配置要想生效，必须重启webpack服务\n            hot: true\n        }\n    }\n    ```\n    index.js中的代码\n    ```js\n        import '../css/iconfont.css'\n        import '../css/index.less'\n        import print from './print'\n\n        console.log('js被重新加载了')\n\n        print()\n\n        function add(x,y){\n            return x+y\n        }\n        console.log(add(1,2))\n\n        if(module.hot){\n            // 一旦module.hot为true,说明开启了HMR功能 --> 让HMR工能生效\n            module.hot.accept('./print.js', function(){\n                // 方法会监听print.js文件的变化，一旦发生变化，其他模块不会重新打包构建，\n                // 会执行后面的回调函数\n                print()\n            })\n        }\n    ```\n\n- source-map\n\n    source-map 一种提供源代码到构建后代码映射技术（如果构建后代码出错了，通过映射可以追踪源代码错误），它的组合方式为``` [inline-|hidden-|eval-][nosources-][cheap-[module-]]source-map```，在 devtool 中设置即可\n    ```js\n    const { resolve } = require('path')\n    const HtmlWebpackPlugin = require('html-webpack-plugin')\n\n    module.exports = {\n        entry: ['./src/js/index.js', './src/index.html'],\n        output: {\n            filename: 'js/built.js',\n            path: resolve(__dirname,'build')\n        },\n        module: {\n            rules: [\n                {\n                    test: /\\.css$/,\n                    use: ['style-loader','css-loader']\n                },\n                {\n                    test: /\\.less$/,\n                    use: ['style-loader','css-loader','less-loader']\n                },\n                {\n                    test: /\\.(jpg|png|gif)$/,\n                    loader: 'url-loader',\n                    options: {\n                    limit: 8 * 1024,\n                    esModule: false,\n                    name: '[hash:10].[ext]',\n                    outputPath: 'imgs'\n                    }\n                },\n                {\n                    exclude: /\\.(html|js|css|less|jpg|png|gif)/,\n                    loader: 'file-loader',\n                    options: {\n                    name: '[hash:10].[ext]',\n                    outputPath: 'media'\n                    }\n                },\n                {\n                    test: /\\.html$/,\n                    loader: 'html-loader'\n                }\n            ]\n        },\n        plugins: [\n            new HtmlWebpackPlugin({\n                template: \"./src/index.html\"\n            })\n        ],\n        mode: 'development',\n        devServer: {\n            contentBase: resolve(__dirname,'build'),\n            compress: true,\n            port: 3000,\n            open: true,\n            hot: true\n        },\n        devtool: 'inline-source-map'\n    }\n    /*\n    source-map: 一种提供源代码到构建后代码映射技术(如果构建后代码出错了，通过映射可以追踪源代码错误)\n\n    [inline-|hidden-|eval-][nosources-][cheap-[module-]]source-map\n    \n    source-map：外部\n        错误代码的准确信息 和 源代码的错误位置\n    inline-source-map：内联\n        只生成一个内联source-map\n        错误代码的准确信息 和 源代码的错误位置\n    hidden-source-map：外部\n        错误代码错误原因，但是没有错误位置\n        不能追踪源代码错误，只能提示到构建后代码的错误位置\n    eval-source-map：内联\n        每一个文件都生成对应的source-map，都在eval\n        错误代码的准确信息 和 源代码的错误位置\n    nosources-source-map：外部\n        错误代码的准确信息，但是没有任何源代码信息\n    cheap-source-map：外部\n        错误代码的准确信息 和 源代码的错误位置\n        只能精确到行\n    cheap-module-source-map：外部\n        错误代码的准确信息 和 源代码的错误位置\n        module会将loader的source map加入\n\n    内联和外部的区别：1.外部生成了文件，内联没有。2.内联构建速度更快\n\n    开发环境：速度快，调试更友好\n        速度快（eval>inline>cheap>...）\n        eval-cheap-source-map\n        eval-source-map\n        调试更友好\n        source-map\n        cheap-module-source-map\n        cheap-source-map\n        --> eval-source-map / eval-cheap-module-source-map\n    生产环境：源代码要不要隐藏，调试要不要更友好\n        内联会让代码体积变大，所以在生产环境下不用内联\n        nosources-source-map 全部隐藏\n        hidden-source-map 只隐藏源代码，会提示构建后代码错误信息\n        --> source-map / cheap-module-source-map\n\n    */\n    ```\n\n- oneOf 提升构建速度\n\n    正常情况下，我们文件匹配 loader，会把所有的 loader 配置都走一遍，这样会大大降低我们的构建速度，所以我们这时候可以选 oneOf，一旦匹配到就不会继续向下匹配，但是有的文件需要匹配多个 loader，我们可以把其它的 loader 提取出来就可以了\n\n    ```js\n    const {resolve} = require('path')\n    const MiniCssExtractPlugin = require('mini-css-extract-plugin')\n    const OptimizeCssAssetsWebpackPlugin = require('optimize-css-assets-webpack-plugin')\n    const HtmlWebpackPlugin = require('html-webpack-plugin')\n\n    process.env.NODE_ENV = 'production'\n\n    // 复用loader\n    const commonCssLoader =  [\n        MiniCssExtractPlugin.loader,\n        'css-loader',\n        {\n            loader: 'postcss-loader',\n            options: {\n                ident: 'postcss',\n                plugins: () => [\n                    require('postcss-preset-env')()\n                ]\n            }\n        }\n    ]\n\n    module.exports = {\n        entry: './src/js/index.js',\n        output: {\n            filename: 'js/built.js',\n            path: resolve(__dirname,'build')\n        },\n        module: {\n            rules: [\n                {\n                    test: /\\.js$/,\n                    exclude: /node_module/,\n                    enforce: 'pre',\n                    loader: 'eslint-loader',\n                    options: {\n                        fix: true\n                    }\n                },\n                {\n                    // 以下loader只会匹配一个\n                    // 注意：不能有两个配置处理同一类型文件\n                    // 提升构建速度，让我们这个文件以后不会反复的被多个loader都去过一遍\n                    oneOf: [\n                        {\n                            test: /\\.css$/,\n                            use: [...commonCssLoader]\n                        },\n                        {\n                            test: /\\.less$/,\n                            use: [\n                                ...commonCssLoader,\n                                'less-loader'\n                            ]\n                        },\n                        {\n                            test: /\\.js$/,\n                            exclude: /node_module/,\n                            loader: 'babel-loader',\n                            options: {\n                                presets: [\n                                    '@babel/preset-env',\n                                    {\n                                        useBuiltIns: 'usage',\n                                        corejs: {version: 3},\n                                        targets: {\n                                            chrome: '60',\n                                            firefox: '50'\n                                        }\n                                    }\n                                ]\n                            }\n                        },\n                        {\n                            test: /\\.(gif|jpg|png)/,\n                            loader: 'url-loader',\n                            options: {\n                                limit: 8 * 1024,\n                                name: '[hash:10].[ext]',\n                                outputPath: 'imgs',\n                                esModule: false\n                            }\n                        },\n                        {\n                            test: /\\.html$/,\n                            loader: 'html-loader'\n                        },\n                        {\n                            exclude: /\\.(js|css|html|less|jpg|png|gif)/,\n                            loader: 'file-loader',\n                            options: {\n                                outputPath: 'media'\n                            }\n                        }\n                    ]\n                }\n            ]\n        },\n        plugins: [\n            new MiniCssExtractPlugin({\n                filename: 'css/built.css'\n            }),\n            new OptimizeCssAssetsWebpackPlugin(),\n            new HtmlWebpackPlugin({\n                template: './src/index.html',\n                minify: {\n                    collapseWhitespace: true,\n                    removeComments: true\n                }\n            })\n\n        ],\n        mode: 'production'\n    }\n    ```","slug":"webpack04","published":1,"updated":"2020-08-17T12:15:00.091Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckfl1j03e001nm4ol2wg03ybb","content":"<h3 id=\"webpack开发环境的性能优化\"><a href=\"#webpack开发环境的性能优化\" class=\"headerlink\" title=\"webpack开发环境的性能优化\"></a>webpack开发环境的性能优化</h3><p>&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;开发环境下的优化可以分为两方面：优化开发环境下打包构建速度、优化代码调试。</p>\n<ul>\n<li><p>优化打包构建速度（HMR）</p>\n<p>  HMR 即 hot module replacement 热模块替换 / 模块热替换，它的作用是，一个模块发生变化，只会重新打包这一个模块，而不是打包所有模块，可以极大的提升构建速度。只需要在 devServer 中配置 <code>hot: true</code>即可。</p>\n<p>  对于css 来说，style-loader 已经内部实现了这一个功能；而 js 是默认不能使用 HMR 这个功能的，需要修改 js 代码，添加支持HMR功能的代码，但是要注意的是，HMR 对于 js 来说只能处理非入口 js 文件的其他文件；html 也是默认不能使用 HMR 这个功能，但是 html 也不需要做这个功能，因为我们只有一个 index.html文件，所以一旦更新了，势必要所有的模块都要重新打包，但是 HMR 会导致另一个问题，就是 html 不能热更新了，想要解决这个问题就要修改我们的入口，将html文件引入。</p>\n<p>  webpack配置</p>\n  <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">/*</span><br><span class=\"hljs-comment\">HMR：hot module replacement 热模块替换 / 模块热替换</span><br><span class=\"hljs-comment\">    作用：一个模块发生变化，只会重新打包这一个模块（而不是打包所有模块）</span><br><span class=\"hljs-comment\">    极大提升构建速度</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">    样式文件：可以使用HMR功能，因为style-loader内部实现了</span><br><span class=\"hljs-comment\">    js文件：默认不能使用HMR功能 --&gt; 需要修改js代码，添加支持HMR功能的代码</span><br><span class=\"hljs-comment\">    注意：HMR功能对于js来说只能处理非入口js文件的其他文件</span><br><span class=\"hljs-comment\">    html文件：默认不能使用HMR功能。同时会导致问题：html文件不能热更新了(不需要做HMR功能)</span><br><span class=\"hljs-comment\">    解决：修改entry入口，将Html文件引入</span><br><span class=\"hljs-comment\">*/</span><br><br><br><span class=\"hljs-keyword\">const</span> &#123; resolve &#125; = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'path'</span>)<br><span class=\"hljs-keyword\">const</span> HtmlWebpackPlugin = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'html-webpack-plugin'</span>)<br><br><span class=\"hljs-built_in\">module</span>.exports = &#123;<br>    entry: [<span class=\"hljs-string\">'./src/js/index.js'</span>, <span class=\"hljs-string\">'./src/index.html'</span>],<br>    output: &#123;<br>        filename: <span class=\"hljs-string\">'js/built.js'</span>,<br>        path: resolve(__dirname,<span class=\"hljs-string\">'build'</span>)<br>    &#125;,<br>    <span class=\"hljs-built_in\">module</span>: &#123;<br>        rules: [<br>            &#123;<br>                test: <span class=\"hljs-regexp\">/\\.css$/</span>,<br>                use: [<span class=\"hljs-string\">'style-loader'</span>,<span class=\"hljs-string\">'css-loader'</span>]<br>            &#125;,<br>            &#123;<br>                test: <span class=\"hljs-regexp\">/\\.less$/</span>,<br>                use: [<span class=\"hljs-string\">'style-loader'</span>,<span class=\"hljs-string\">'css-loader'</span>,<span class=\"hljs-string\">'less-loader'</span>]<br>            &#125;,<br>            &#123;<br>                test: <span class=\"hljs-regexp\">/\\.(jpg|png|gif)$/</span>,<br>                loader: <span class=\"hljs-string\">'url-loader'</span>,<br>                options: &#123;<br>                    limit: <span class=\"hljs-number\">8</span> * <span class=\"hljs-number\">1024</span>,<br>                    esModule: <span class=\"hljs-literal\">false</span>,<br>                    name: <span class=\"hljs-string\">'[hash:10].[ext]'</span>,<br>                    outputPath: <span class=\"hljs-string\">'imgs'</span><br>                &#125;<br>            &#125;,<br>            &#123;<br>                exclude: <span class=\"hljs-regexp\">/\\.(html|js|css|less|jpg|png|gif)/</span>,<br>                loader: <span class=\"hljs-string\">'file-loader'</span>,<br>                options: &#123;<br>                    name: <span class=\"hljs-string\">'[hash:10].[ext]'</span>,<br>                    outputPath: <span class=\"hljs-string\">'media'</span><br>                &#125;<br>            &#125;,<br>            &#123;<br>                test: <span class=\"hljs-regexp\">/\\.html$/</span>,<br>                loader: <span class=\"hljs-string\">'html-loader'</span><br>            &#125;<br>        ]<br>    &#125;,<br>    plugins: [<br>        <span class=\"hljs-keyword\">new</span> HtmlWebpackPlugin(&#123;<br>            template: <span class=\"hljs-string\">\"./src/index.html\"</span><br>        &#125;)<br>    ],<br>    mode: <span class=\"hljs-string\">'development'</span>,<br>    devServer: &#123;<br>        contentBase: resolve(__dirname,<span class=\"hljs-string\">'build'</span>),<br>        compress: <span class=\"hljs-literal\">true</span>,<br>        port: <span class=\"hljs-number\">3000</span>,<br>        open: <span class=\"hljs-literal\">true</span>,<br>        <span class=\"hljs-comment\">// 开启HMR功能</span><br>        <span class=\"hljs-comment\">// 当修改了webpack配置，新配置要想生效，必须重启webpack服务</span><br>        hot: <span class=\"hljs-literal\">true</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>  index.js中的代码</p>\n  <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">'../css/iconfont.css'</span><br><span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">'../css/index.less'</span><br><span class=\"hljs-keyword\">import</span> print <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./print'</span><br><br><span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'js被重新加载了'</span>)<br><br>print()<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">add</span>(<span class=\"hljs-params\">x,y</span>)</span>&#123;<br>    <span class=\"hljs-keyword\">return</span> x+y<br>&#125;<br><span class=\"hljs-built_in\">console</span>.log(add(<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>))<br><br><span class=\"hljs-keyword\">if</span>(<span class=\"hljs-built_in\">module</span>.hot)&#123;<br>    <span class=\"hljs-comment\">// 一旦module.hot为true,说明开启了HMR功能 --&gt; 让HMR工能生效</span><br>    <span class=\"hljs-built_in\">module</span>.hot.accept(<span class=\"hljs-string\">'./print.js'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;<br>        <span class=\"hljs-comment\">// 方法会监听print.js文件的变化，一旦发生变化，其他模块不会重新打包构建，</span><br>        <span class=\"hljs-comment\">// 会执行后面的回调函数</span><br>        print()<br>    &#125;)<br>&#125;<br></code></pre></td></tr></table></figure>\n</li>\n<li><p>source-map</p>\n<p>  source-map 一种提供源代码到构建后代码映射技术（如果构建后代码出错了，通过映射可以追踪源代码错误），它的组合方式为<code>[inline-|hidden-|eval-][nosources-][cheap-[module-]]source-map</code>，在 devtool 中设置即可</p>\n  <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> &#123; resolve &#125; = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'path'</span>)<br><span class=\"hljs-keyword\">const</span> HtmlWebpackPlugin = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'html-webpack-plugin'</span>)<br><br><span class=\"hljs-built_in\">module</span>.exports = &#123;<br>    entry: [<span class=\"hljs-string\">'./src/js/index.js'</span>, <span class=\"hljs-string\">'./src/index.html'</span>],<br>    output: &#123;<br>        filename: <span class=\"hljs-string\">'js/built.js'</span>,<br>        path: resolve(__dirname,<span class=\"hljs-string\">'build'</span>)<br>    &#125;,<br>    <span class=\"hljs-built_in\">module</span>: &#123;<br>        rules: [<br>            &#123;<br>                test: <span class=\"hljs-regexp\">/\\.css$/</span>,<br>                use: [<span class=\"hljs-string\">'style-loader'</span>,<span class=\"hljs-string\">'css-loader'</span>]<br>            &#125;,<br>            &#123;<br>                test: <span class=\"hljs-regexp\">/\\.less$/</span>,<br>                use: [<span class=\"hljs-string\">'style-loader'</span>,<span class=\"hljs-string\">'css-loader'</span>,<span class=\"hljs-string\">'less-loader'</span>]<br>            &#125;,<br>            &#123;<br>                test: <span class=\"hljs-regexp\">/\\.(jpg|png|gif)$/</span>,<br>                loader: <span class=\"hljs-string\">'url-loader'</span>,<br>                options: &#123;<br>                limit: <span class=\"hljs-number\">8</span> * <span class=\"hljs-number\">1024</span>,<br>                esModule: <span class=\"hljs-literal\">false</span>,<br>                name: <span class=\"hljs-string\">'[hash:10].[ext]'</span>,<br>                outputPath: <span class=\"hljs-string\">'imgs'</span><br>                &#125;<br>            &#125;,<br>            &#123;<br>                exclude: <span class=\"hljs-regexp\">/\\.(html|js|css|less|jpg|png|gif)/</span>,<br>                loader: <span class=\"hljs-string\">'file-loader'</span>,<br>                options: &#123;<br>                name: <span class=\"hljs-string\">'[hash:10].[ext]'</span>,<br>                outputPath: <span class=\"hljs-string\">'media'</span><br>                &#125;<br>            &#125;,<br>            &#123;<br>                test: <span class=\"hljs-regexp\">/\\.html$/</span>,<br>                loader: <span class=\"hljs-string\">'html-loader'</span><br>            &#125;<br>        ]<br>    &#125;,<br>    plugins: [<br>        <span class=\"hljs-keyword\">new</span> HtmlWebpackPlugin(&#123;<br>            template: <span class=\"hljs-string\">\"./src/index.html\"</span><br>        &#125;)<br>    ],<br>    mode: <span class=\"hljs-string\">'development'</span>,<br>    devServer: &#123;<br>        contentBase: resolve(__dirname,<span class=\"hljs-string\">'build'</span>),<br>        compress: <span class=\"hljs-literal\">true</span>,<br>        port: <span class=\"hljs-number\">3000</span>,<br>        open: <span class=\"hljs-literal\">true</span>,<br>        hot: <span class=\"hljs-literal\">true</span><br>    &#125;,<br>    devtool: <span class=\"hljs-string\">'inline-source-map'</span><br>&#125;<br><span class=\"hljs-comment\">/*</span><br><span class=\"hljs-comment\">source-map: 一种提供源代码到构建后代码映射技术(如果构建后代码出错了，通过映射可以追踪源代码错误)</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">[inline-|hidden-|eval-][nosources-][cheap-[module-]]source-map</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">source-map：外部</span><br><span class=\"hljs-comment\">    错误代码的准确信息 和 源代码的错误位置</span><br><span class=\"hljs-comment\">inline-source-map：内联</span><br><span class=\"hljs-comment\">    只生成一个内联source-map</span><br><span class=\"hljs-comment\">    错误代码的准确信息 和 源代码的错误位置</span><br><span class=\"hljs-comment\">hidden-source-map：外部</span><br><span class=\"hljs-comment\">    错误代码错误原因，但是没有错误位置</span><br><span class=\"hljs-comment\">    不能追踪源代码错误，只能提示到构建后代码的错误位置</span><br><span class=\"hljs-comment\">eval-source-map：内联</span><br><span class=\"hljs-comment\">    每一个文件都生成对应的source-map，都在eval</span><br><span class=\"hljs-comment\">    错误代码的准确信息 和 源代码的错误位置</span><br><span class=\"hljs-comment\">nosources-source-map：外部</span><br><span class=\"hljs-comment\">    错误代码的准确信息，但是没有任何源代码信息</span><br><span class=\"hljs-comment\">cheap-source-map：外部</span><br><span class=\"hljs-comment\">    错误代码的准确信息 和 源代码的错误位置</span><br><span class=\"hljs-comment\">    只能精确到行</span><br><span class=\"hljs-comment\">cheap-module-source-map：外部</span><br><span class=\"hljs-comment\">    错误代码的准确信息 和 源代码的错误位置</span><br><span class=\"hljs-comment\">    module会将loader的source map加入</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">内联和外部的区别：1.外部生成了文件，内联没有。2.内联构建速度更快</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">开发环境：速度快，调试更友好</span><br><span class=\"hljs-comment\">    速度快（eval&gt;inline&gt;cheap&gt;...）</span><br><span class=\"hljs-comment\">    eval-cheap-source-map</span><br><span class=\"hljs-comment\">    eval-source-map</span><br><span class=\"hljs-comment\">    调试更友好</span><br><span class=\"hljs-comment\">    source-map</span><br><span class=\"hljs-comment\">    cheap-module-source-map</span><br><span class=\"hljs-comment\">    cheap-source-map</span><br><span class=\"hljs-comment\">    --&gt; eval-source-map / eval-cheap-module-source-map</span><br><span class=\"hljs-comment\">生产环境：源代码要不要隐藏，调试要不要更友好</span><br><span class=\"hljs-comment\">    内联会让代码体积变大，所以在生产环境下不用内联</span><br><span class=\"hljs-comment\">    nosources-source-map 全部隐藏</span><br><span class=\"hljs-comment\">    hidden-source-map 只隐藏源代码，会提示构建后代码错误信息</span><br><span class=\"hljs-comment\">    --&gt; source-map / cheap-module-source-map</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">*/</span><br></code></pre></td></tr></table></figure>\n</li>\n<li><p>oneOf 提升构建速度</p>\n<p>  正常情况下，我们文件匹配 loader，会把所有的 loader 配置都走一遍，这样会大大降低我们的构建速度，所以我们这时候可以选 oneOf，一旦匹配到就不会继续向下匹配，但是有的文件需要匹配多个 loader，我们可以把其它的 loader 提取出来就可以了</p>\n  <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> &#123;resolve&#125; = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'path'</span>)<br><span class=\"hljs-keyword\">const</span> MiniCssExtractPlugin = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'mini-css-extract-plugin'</span>)<br><span class=\"hljs-keyword\">const</span> OptimizeCssAssetsWebpackPlugin = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'optimize-css-assets-webpack-plugin'</span>)<br><span class=\"hljs-keyword\">const</span> HtmlWebpackPlugin = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'html-webpack-plugin'</span>)<br><br>process.env.NODE_ENV = <span class=\"hljs-string\">'production'</span><br><br><span class=\"hljs-comment\">// 复用loader</span><br><span class=\"hljs-keyword\">const</span> commonCssLoader =  [<br>    MiniCssExtractPlugin.loader,<br>    <span class=\"hljs-string\">'css-loader'</span>,<br>    &#123;<br>        loader: <span class=\"hljs-string\">'postcss-loader'</span>,<br>        options: &#123;<br>            ident: <span class=\"hljs-string\">'postcss'</span>,<br>            plugins: <span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> [<br>                <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'postcss-preset-env'</span>)()<br>            ]<br>        &#125;<br>    &#125;<br>]<br><br><span class=\"hljs-built_in\">module</span>.exports = &#123;<br>    entry: <span class=\"hljs-string\">'./src/js/index.js'</span>,<br>    output: &#123;<br>        filename: <span class=\"hljs-string\">'js/built.js'</span>,<br>        path: resolve(__dirname,<span class=\"hljs-string\">'build'</span>)<br>    &#125;,<br>    <span class=\"hljs-built_in\">module</span>: &#123;<br>        rules: [<br>            &#123;<br>                test: <span class=\"hljs-regexp\">/\\.js$/</span>,<br>                exclude: <span class=\"hljs-regexp\">/node_module/</span>,<br>                enforce: <span class=\"hljs-string\">'pre'</span>,<br>                loader: <span class=\"hljs-string\">'eslint-loader'</span>,<br>                options: &#123;<br>                    fix: <span class=\"hljs-literal\">true</span><br>                &#125;<br>            &#125;,<br>            &#123;<br>                <span class=\"hljs-comment\">// 以下loader只会匹配一个</span><br>                <span class=\"hljs-comment\">// 注意：不能有两个配置处理同一类型文件</span><br>                <span class=\"hljs-comment\">// 提升构建速度，让我们这个文件以后不会反复的被多个loader都去过一遍</span><br>                oneOf: [<br>                    &#123;<br>                        test: <span class=\"hljs-regexp\">/\\.css$/</span>,<br>                        use: [...commonCssLoader]<br>                    &#125;,<br>                    &#123;<br>                        test: <span class=\"hljs-regexp\">/\\.less$/</span>,<br>                        use: [<br>                            ...commonCssLoader,<br>                            <span class=\"hljs-string\">'less-loader'</span><br>                        ]<br>                    &#125;,<br>                    &#123;<br>                        test: <span class=\"hljs-regexp\">/\\.js$/</span>,<br>                        exclude: <span class=\"hljs-regexp\">/node_module/</span>,<br>                        loader: <span class=\"hljs-string\">'babel-loader'</span>,<br>                        options: &#123;<br>                            presets: [<br>                                <span class=\"hljs-string\">'@babel/preset-env'</span>,<br>                                &#123;<br>                                    useBuiltIns: <span class=\"hljs-string\">'usage'</span>,<br>                                    corejs: &#123;<span class=\"hljs-attr\">version</span>: <span class=\"hljs-number\">3</span>&#125;,<br>                                    targets: &#123;<br>                                        chrome: <span class=\"hljs-string\">'60'</span>,<br>                                        firefox: <span class=\"hljs-string\">'50'</span><br>                                    &#125;<br>                                &#125;<br>                            ]<br>                        &#125;<br>                    &#125;,<br>                    &#123;<br>                        test: <span class=\"hljs-regexp\">/\\.(gif|jpg|png)/</span>,<br>                        loader: <span class=\"hljs-string\">'url-loader'</span>,<br>                        options: &#123;<br>                            limit: <span class=\"hljs-number\">8</span> * <span class=\"hljs-number\">1024</span>,<br>                            name: <span class=\"hljs-string\">'[hash:10].[ext]'</span>,<br>                            outputPath: <span class=\"hljs-string\">'imgs'</span>,<br>                            esModule: <span class=\"hljs-literal\">false</span><br>                        &#125;<br>                    &#125;,<br>                    &#123;<br>                        test: <span class=\"hljs-regexp\">/\\.html$/</span>,<br>                        loader: <span class=\"hljs-string\">'html-loader'</span><br>                    &#125;,<br>                    &#123;<br>                        exclude: <span class=\"hljs-regexp\">/\\.(js|css|html|less|jpg|png|gif)/</span>,<br>                        loader: <span class=\"hljs-string\">'file-loader'</span>,<br>                        options: &#123;<br>                            outputPath: <span class=\"hljs-string\">'media'</span><br>                        &#125;<br>                    &#125;<br>                ]<br>            &#125;<br>        ]<br>    &#125;,<br>    plugins: [<br>        <span class=\"hljs-keyword\">new</span> MiniCssExtractPlugin(&#123;<br>            filename: <span class=\"hljs-string\">'css/built.css'</span><br>        &#125;),<br>        <span class=\"hljs-keyword\">new</span> OptimizeCssAssetsWebpackPlugin(),<br>        <span class=\"hljs-keyword\">new</span> HtmlWebpackPlugin(&#123;<br>            template: <span class=\"hljs-string\">'./src/index.html'</span>,<br>            minify: &#123;<br>                collapseWhitespace: <span class=\"hljs-literal\">true</span>,<br>                removeComments: <span class=\"hljs-literal\">true</span><br>            &#125;<br>        &#125;)<br><br>    ],<br>    mode: <span class=\"hljs-string\">'production'</span><br>&#125;<br></code></pre></td></tr></table></figure></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"webpack开发环境的性能优化\"><a href=\"#webpack开发环境的性能优化\" class=\"headerlink\" title=\"webpack开发环境的性能优化\"></a>webpack开发环境的性能优化</h3><p>&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;开发环境下的优化可以分为两方面：优化开发环境下打包构建速度、优化代码调试。</p>\n<ul>\n<li><p>优化打包构建速度（HMR）</p>\n<p>  HMR 即 hot module replacement 热模块替换 / 模块热替换，它的作用是，一个模块发生变化，只会重新打包这一个模块，而不是打包所有模块，可以极大的提升构建速度。只需要在 devServer 中配置 <code>hot: true</code>即可。</p>\n<p>  对于css 来说，style-loader 已经内部实现了这一个功能；而 js 是默认不能使用 HMR 这个功能的，需要修改 js 代码，添加支持HMR功能的代码，但是要注意的是，HMR 对于 js 来说只能处理非入口 js 文件的其他文件；html 也是默认不能使用 HMR 这个功能，但是 html 也不需要做这个功能，因为我们只有一个 index.html文件，所以一旦更新了，势必要所有的模块都要重新打包，但是 HMR 会导致另一个问题，就是 html 不能热更新了，想要解决这个问题就要修改我们的入口，将html文件引入。</p>\n<p>  webpack配置</p>\n  <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">/*</span><br><span class=\"hljs-comment\">HMR：hot module replacement 热模块替换 / 模块热替换</span><br><span class=\"hljs-comment\">    作用：一个模块发生变化，只会重新打包这一个模块（而不是打包所有模块）</span><br><span class=\"hljs-comment\">    极大提升构建速度</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">    样式文件：可以使用HMR功能，因为style-loader内部实现了</span><br><span class=\"hljs-comment\">    js文件：默认不能使用HMR功能 --&gt; 需要修改js代码，添加支持HMR功能的代码</span><br><span class=\"hljs-comment\">    注意：HMR功能对于js来说只能处理非入口js文件的其他文件</span><br><span class=\"hljs-comment\">    html文件：默认不能使用HMR功能。同时会导致问题：html文件不能热更新了(不需要做HMR功能)</span><br><span class=\"hljs-comment\">    解决：修改entry入口，将Html文件引入</span><br><span class=\"hljs-comment\">*/</span><br><br><br><span class=\"hljs-keyword\">const</span> &#123; resolve &#125; = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'path'</span>)<br><span class=\"hljs-keyword\">const</span> HtmlWebpackPlugin = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'html-webpack-plugin'</span>)<br><br><span class=\"hljs-built_in\">module</span>.exports = &#123;<br>    entry: [<span class=\"hljs-string\">'./src/js/index.js'</span>, <span class=\"hljs-string\">'./src/index.html'</span>],<br>    output: &#123;<br>        filename: <span class=\"hljs-string\">'js/built.js'</span>,<br>        path: resolve(__dirname,<span class=\"hljs-string\">'build'</span>)<br>    &#125;,<br>    <span class=\"hljs-built_in\">module</span>: &#123;<br>        rules: [<br>            &#123;<br>                test: <span class=\"hljs-regexp\">/\\.css$/</span>,<br>                use: [<span class=\"hljs-string\">'style-loader'</span>,<span class=\"hljs-string\">'css-loader'</span>]<br>            &#125;,<br>            &#123;<br>                test: <span class=\"hljs-regexp\">/\\.less$/</span>,<br>                use: [<span class=\"hljs-string\">'style-loader'</span>,<span class=\"hljs-string\">'css-loader'</span>,<span class=\"hljs-string\">'less-loader'</span>]<br>            &#125;,<br>            &#123;<br>                test: <span class=\"hljs-regexp\">/\\.(jpg|png|gif)$/</span>,<br>                loader: <span class=\"hljs-string\">'url-loader'</span>,<br>                options: &#123;<br>                    limit: <span class=\"hljs-number\">8</span> * <span class=\"hljs-number\">1024</span>,<br>                    esModule: <span class=\"hljs-literal\">false</span>,<br>                    name: <span class=\"hljs-string\">'[hash:10].[ext]'</span>,<br>                    outputPath: <span class=\"hljs-string\">'imgs'</span><br>                &#125;<br>            &#125;,<br>            &#123;<br>                exclude: <span class=\"hljs-regexp\">/\\.(html|js|css|less|jpg|png|gif)/</span>,<br>                loader: <span class=\"hljs-string\">'file-loader'</span>,<br>                options: &#123;<br>                    name: <span class=\"hljs-string\">'[hash:10].[ext]'</span>,<br>                    outputPath: <span class=\"hljs-string\">'media'</span><br>                &#125;<br>            &#125;,<br>            &#123;<br>                test: <span class=\"hljs-regexp\">/\\.html$/</span>,<br>                loader: <span class=\"hljs-string\">'html-loader'</span><br>            &#125;<br>        ]<br>    &#125;,<br>    plugins: [<br>        <span class=\"hljs-keyword\">new</span> HtmlWebpackPlugin(&#123;<br>            template: <span class=\"hljs-string\">\"./src/index.html\"</span><br>        &#125;)<br>    ],<br>    mode: <span class=\"hljs-string\">'development'</span>,<br>    devServer: &#123;<br>        contentBase: resolve(__dirname,<span class=\"hljs-string\">'build'</span>),<br>        compress: <span class=\"hljs-literal\">true</span>,<br>        port: <span class=\"hljs-number\">3000</span>,<br>        open: <span class=\"hljs-literal\">true</span>,<br>        <span class=\"hljs-comment\">// 开启HMR功能</span><br>        <span class=\"hljs-comment\">// 当修改了webpack配置，新配置要想生效，必须重启webpack服务</span><br>        hot: <span class=\"hljs-literal\">true</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>  index.js中的代码</p>\n  <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">'../css/iconfont.css'</span><br><span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">'../css/index.less'</span><br><span class=\"hljs-keyword\">import</span> print <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./print'</span><br><br><span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'js被重新加载了'</span>)<br><br>print()<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">add</span>(<span class=\"hljs-params\">x,y</span>)</span>&#123;<br>    <span class=\"hljs-keyword\">return</span> x+y<br>&#125;<br><span class=\"hljs-built_in\">console</span>.log(add(<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>))<br><br><span class=\"hljs-keyword\">if</span>(<span class=\"hljs-built_in\">module</span>.hot)&#123;<br>    <span class=\"hljs-comment\">// 一旦module.hot为true,说明开启了HMR功能 --&gt; 让HMR工能生效</span><br>    <span class=\"hljs-built_in\">module</span>.hot.accept(<span class=\"hljs-string\">'./print.js'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;<br>        <span class=\"hljs-comment\">// 方法会监听print.js文件的变化，一旦发生变化，其他模块不会重新打包构建，</span><br>        <span class=\"hljs-comment\">// 会执行后面的回调函数</span><br>        print()<br>    &#125;)<br>&#125;<br></code></pre></td></tr></table></figure>\n</li>\n<li><p>source-map</p>\n<p>  source-map 一种提供源代码到构建后代码映射技术（如果构建后代码出错了，通过映射可以追踪源代码错误），它的组合方式为<code>[inline-|hidden-|eval-][nosources-][cheap-[module-]]source-map</code>，在 devtool 中设置即可</p>\n  <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> &#123; resolve &#125; = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'path'</span>)<br><span class=\"hljs-keyword\">const</span> HtmlWebpackPlugin = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'html-webpack-plugin'</span>)<br><br><span class=\"hljs-built_in\">module</span>.exports = &#123;<br>    entry: [<span class=\"hljs-string\">'./src/js/index.js'</span>, <span class=\"hljs-string\">'./src/index.html'</span>],<br>    output: &#123;<br>        filename: <span class=\"hljs-string\">'js/built.js'</span>,<br>        path: resolve(__dirname,<span class=\"hljs-string\">'build'</span>)<br>    &#125;,<br>    <span class=\"hljs-built_in\">module</span>: &#123;<br>        rules: [<br>            &#123;<br>                test: <span class=\"hljs-regexp\">/\\.css$/</span>,<br>                use: [<span class=\"hljs-string\">'style-loader'</span>,<span class=\"hljs-string\">'css-loader'</span>]<br>            &#125;,<br>            &#123;<br>                test: <span class=\"hljs-regexp\">/\\.less$/</span>,<br>                use: [<span class=\"hljs-string\">'style-loader'</span>,<span class=\"hljs-string\">'css-loader'</span>,<span class=\"hljs-string\">'less-loader'</span>]<br>            &#125;,<br>            &#123;<br>                test: <span class=\"hljs-regexp\">/\\.(jpg|png|gif)$/</span>,<br>                loader: <span class=\"hljs-string\">'url-loader'</span>,<br>                options: &#123;<br>                limit: <span class=\"hljs-number\">8</span> * <span class=\"hljs-number\">1024</span>,<br>                esModule: <span class=\"hljs-literal\">false</span>,<br>                name: <span class=\"hljs-string\">'[hash:10].[ext]'</span>,<br>                outputPath: <span class=\"hljs-string\">'imgs'</span><br>                &#125;<br>            &#125;,<br>            &#123;<br>                exclude: <span class=\"hljs-regexp\">/\\.(html|js|css|less|jpg|png|gif)/</span>,<br>                loader: <span class=\"hljs-string\">'file-loader'</span>,<br>                options: &#123;<br>                name: <span class=\"hljs-string\">'[hash:10].[ext]'</span>,<br>                outputPath: <span class=\"hljs-string\">'media'</span><br>                &#125;<br>            &#125;,<br>            &#123;<br>                test: <span class=\"hljs-regexp\">/\\.html$/</span>,<br>                loader: <span class=\"hljs-string\">'html-loader'</span><br>            &#125;<br>        ]<br>    &#125;,<br>    plugins: [<br>        <span class=\"hljs-keyword\">new</span> HtmlWebpackPlugin(&#123;<br>            template: <span class=\"hljs-string\">\"./src/index.html\"</span><br>        &#125;)<br>    ],<br>    mode: <span class=\"hljs-string\">'development'</span>,<br>    devServer: &#123;<br>        contentBase: resolve(__dirname,<span class=\"hljs-string\">'build'</span>),<br>        compress: <span class=\"hljs-literal\">true</span>,<br>        port: <span class=\"hljs-number\">3000</span>,<br>        open: <span class=\"hljs-literal\">true</span>,<br>        hot: <span class=\"hljs-literal\">true</span><br>    &#125;,<br>    devtool: <span class=\"hljs-string\">'inline-source-map'</span><br>&#125;<br><span class=\"hljs-comment\">/*</span><br><span class=\"hljs-comment\">source-map: 一种提供源代码到构建后代码映射技术(如果构建后代码出错了，通过映射可以追踪源代码错误)</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">[inline-|hidden-|eval-][nosources-][cheap-[module-]]source-map</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">source-map：外部</span><br><span class=\"hljs-comment\">    错误代码的准确信息 和 源代码的错误位置</span><br><span class=\"hljs-comment\">inline-source-map：内联</span><br><span class=\"hljs-comment\">    只生成一个内联source-map</span><br><span class=\"hljs-comment\">    错误代码的准确信息 和 源代码的错误位置</span><br><span class=\"hljs-comment\">hidden-source-map：外部</span><br><span class=\"hljs-comment\">    错误代码错误原因，但是没有错误位置</span><br><span class=\"hljs-comment\">    不能追踪源代码错误，只能提示到构建后代码的错误位置</span><br><span class=\"hljs-comment\">eval-source-map：内联</span><br><span class=\"hljs-comment\">    每一个文件都生成对应的source-map，都在eval</span><br><span class=\"hljs-comment\">    错误代码的准确信息 和 源代码的错误位置</span><br><span class=\"hljs-comment\">nosources-source-map：外部</span><br><span class=\"hljs-comment\">    错误代码的准确信息，但是没有任何源代码信息</span><br><span class=\"hljs-comment\">cheap-source-map：外部</span><br><span class=\"hljs-comment\">    错误代码的准确信息 和 源代码的错误位置</span><br><span class=\"hljs-comment\">    只能精确到行</span><br><span class=\"hljs-comment\">cheap-module-source-map：外部</span><br><span class=\"hljs-comment\">    错误代码的准确信息 和 源代码的错误位置</span><br><span class=\"hljs-comment\">    module会将loader的source map加入</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">内联和外部的区别：1.外部生成了文件，内联没有。2.内联构建速度更快</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">开发环境：速度快，调试更友好</span><br><span class=\"hljs-comment\">    速度快（eval&gt;inline&gt;cheap&gt;...）</span><br><span class=\"hljs-comment\">    eval-cheap-source-map</span><br><span class=\"hljs-comment\">    eval-source-map</span><br><span class=\"hljs-comment\">    调试更友好</span><br><span class=\"hljs-comment\">    source-map</span><br><span class=\"hljs-comment\">    cheap-module-source-map</span><br><span class=\"hljs-comment\">    cheap-source-map</span><br><span class=\"hljs-comment\">    --&gt; eval-source-map / eval-cheap-module-source-map</span><br><span class=\"hljs-comment\">生产环境：源代码要不要隐藏，调试要不要更友好</span><br><span class=\"hljs-comment\">    内联会让代码体积变大，所以在生产环境下不用内联</span><br><span class=\"hljs-comment\">    nosources-source-map 全部隐藏</span><br><span class=\"hljs-comment\">    hidden-source-map 只隐藏源代码，会提示构建后代码错误信息</span><br><span class=\"hljs-comment\">    --&gt; source-map / cheap-module-source-map</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">*/</span><br></code></pre></td></tr></table></figure>\n</li>\n<li><p>oneOf 提升构建速度</p>\n<p>  正常情况下，我们文件匹配 loader，会把所有的 loader 配置都走一遍，这样会大大降低我们的构建速度，所以我们这时候可以选 oneOf，一旦匹配到就不会继续向下匹配，但是有的文件需要匹配多个 loader，我们可以把其它的 loader 提取出来就可以了</p>\n  <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> &#123;resolve&#125; = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'path'</span>)<br><span class=\"hljs-keyword\">const</span> MiniCssExtractPlugin = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'mini-css-extract-plugin'</span>)<br><span class=\"hljs-keyword\">const</span> OptimizeCssAssetsWebpackPlugin = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'optimize-css-assets-webpack-plugin'</span>)<br><span class=\"hljs-keyword\">const</span> HtmlWebpackPlugin = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'html-webpack-plugin'</span>)<br><br>process.env.NODE_ENV = <span class=\"hljs-string\">'production'</span><br><br><span class=\"hljs-comment\">// 复用loader</span><br><span class=\"hljs-keyword\">const</span> commonCssLoader =  [<br>    MiniCssExtractPlugin.loader,<br>    <span class=\"hljs-string\">'css-loader'</span>,<br>    &#123;<br>        loader: <span class=\"hljs-string\">'postcss-loader'</span>,<br>        options: &#123;<br>            ident: <span class=\"hljs-string\">'postcss'</span>,<br>            plugins: <span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> [<br>                <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'postcss-preset-env'</span>)()<br>            ]<br>        &#125;<br>    &#125;<br>]<br><br><span class=\"hljs-built_in\">module</span>.exports = &#123;<br>    entry: <span class=\"hljs-string\">'./src/js/index.js'</span>,<br>    output: &#123;<br>        filename: <span class=\"hljs-string\">'js/built.js'</span>,<br>        path: resolve(__dirname,<span class=\"hljs-string\">'build'</span>)<br>    &#125;,<br>    <span class=\"hljs-built_in\">module</span>: &#123;<br>        rules: [<br>            &#123;<br>                test: <span class=\"hljs-regexp\">/\\.js$/</span>,<br>                exclude: <span class=\"hljs-regexp\">/node_module/</span>,<br>                enforce: <span class=\"hljs-string\">'pre'</span>,<br>                loader: <span class=\"hljs-string\">'eslint-loader'</span>,<br>                options: &#123;<br>                    fix: <span class=\"hljs-literal\">true</span><br>                &#125;<br>            &#125;,<br>            &#123;<br>                <span class=\"hljs-comment\">// 以下loader只会匹配一个</span><br>                <span class=\"hljs-comment\">// 注意：不能有两个配置处理同一类型文件</span><br>                <span class=\"hljs-comment\">// 提升构建速度，让我们这个文件以后不会反复的被多个loader都去过一遍</span><br>                oneOf: [<br>                    &#123;<br>                        test: <span class=\"hljs-regexp\">/\\.css$/</span>,<br>                        use: [...commonCssLoader]<br>                    &#125;,<br>                    &#123;<br>                        test: <span class=\"hljs-regexp\">/\\.less$/</span>,<br>                        use: [<br>                            ...commonCssLoader,<br>                            <span class=\"hljs-string\">'less-loader'</span><br>                        ]<br>                    &#125;,<br>                    &#123;<br>                        test: <span class=\"hljs-regexp\">/\\.js$/</span>,<br>                        exclude: <span class=\"hljs-regexp\">/node_module/</span>,<br>                        loader: <span class=\"hljs-string\">'babel-loader'</span>,<br>                        options: &#123;<br>                            presets: [<br>                                <span class=\"hljs-string\">'@babel/preset-env'</span>,<br>                                &#123;<br>                                    useBuiltIns: <span class=\"hljs-string\">'usage'</span>,<br>                                    corejs: &#123;<span class=\"hljs-attr\">version</span>: <span class=\"hljs-number\">3</span>&#125;,<br>                                    targets: &#123;<br>                                        chrome: <span class=\"hljs-string\">'60'</span>,<br>                                        firefox: <span class=\"hljs-string\">'50'</span><br>                                    &#125;<br>                                &#125;<br>                            ]<br>                        &#125;<br>                    &#125;,<br>                    &#123;<br>                        test: <span class=\"hljs-regexp\">/\\.(gif|jpg|png)/</span>,<br>                        loader: <span class=\"hljs-string\">'url-loader'</span>,<br>                        options: &#123;<br>                            limit: <span class=\"hljs-number\">8</span> * <span class=\"hljs-number\">1024</span>,<br>                            name: <span class=\"hljs-string\">'[hash:10].[ext]'</span>,<br>                            outputPath: <span class=\"hljs-string\">'imgs'</span>,<br>                            esModule: <span class=\"hljs-literal\">false</span><br>                        &#125;<br>                    &#125;,<br>                    &#123;<br>                        test: <span class=\"hljs-regexp\">/\\.html$/</span>,<br>                        loader: <span class=\"hljs-string\">'html-loader'</span><br>                    &#125;,<br>                    &#123;<br>                        exclude: <span class=\"hljs-regexp\">/\\.(js|css|html|less|jpg|png|gif)/</span>,<br>                        loader: <span class=\"hljs-string\">'file-loader'</span>,<br>                        options: &#123;<br>                            outputPath: <span class=\"hljs-string\">'media'</span><br>                        &#125;<br>                    &#125;<br>                ]<br>            &#125;<br>        ]<br>    &#125;,<br>    plugins: [<br>        <span class=\"hljs-keyword\">new</span> MiniCssExtractPlugin(&#123;<br>            filename: <span class=\"hljs-string\">'css/built.css'</span><br>        &#125;),<br>        <span class=\"hljs-keyword\">new</span> OptimizeCssAssetsWebpackPlugin(),<br>        <span class=\"hljs-keyword\">new</span> HtmlWebpackPlugin(&#123;<br>            template: <span class=\"hljs-string\">'./src/index.html'</span>,<br>            minify: &#123;<br>                collapseWhitespace: <span class=\"hljs-literal\">true</span>,<br>                removeComments: <span class=\"hljs-literal\">true</span><br>            &#125;<br>        &#125;)<br><br>    ],<br>    mode: <span class=\"hljs-string\">'production'</span><br>&#125;<br></code></pre></td></tr></table></figure></li>\n</ul>\n"},{"title":"检测数据类型.md","date":"2020-09-28T13:00:30.000Z","_content":"&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;在我们平时开发的过程中经常会需要检测数据类型，那么JS中检测数据类型的方式有几种呢，它们之间都有什么区别呢，下面就让我们深入的研究一下吧！\n\n### typeof\n\ntypeof对于原始数据类型来说除了null以外，其它的都能正确检测出来。\n\n```js\nconsole.log(typeof 11n) // \"bigint\"\nconsole.log(typeof 11) // \"bigint\"\nconsole.log(typeof '') // \"string\"\nconsole.log(typeof undefined) // \"undefined\"\nconsole.log(typeof true) // \"boolean\"\nconsole.log(typeof Symbol()) // \"symbol\"\nconsole.log(typeof null) // \"object\"\n```\n- 用 typeof 检测数据类型，结果都会放在字符串中返回来。\n\n- 通过上面的一些例子我们发现， typeof 检测 null 时返回的是 \"object\" 数据类型，这与我们所预期的结果不太一样。而这是JS历史遗留的问题，我们只要记住用 type 检测原始数据类型会存在这个坑就可以了。\n\n下面我们来看看用 typeof 检测引用数据类型\n\n```js\nconsole.log(typeof []) // \"object\"\nconsole.log(typeof {}) // \"object\"\nconsole.log(typeof console.log) // \"function\"\n```\n从上面的几个例子我们可以看出来 typeof 检测引用数据类型，除了函数以外，其它的都会返回 \"object\"\n\n所以 typeof 并不能准确的判断变量是什么数据类型，但是根据我们实际开发情况也可以选择使用。\n\n### instanceof\n\ninstanceof 的内部机制是通过原型链来进行判断的。用来检测某一个实例是否属于某个类。\n\n```js\nfunction Person(){}\nconst person = new Person()\nperson instanceof Person // true\nperson instanceof Object // true\n\nconst str = 'Hello world'\nstr instanceof String // false\n\nconst str1 = new String('hello world')\nstr1 instanceof String // true\n```\n- 通过 instanceof 检测数据类型会返回一个 Boole 值\n\n- 只要在当前实例的原型链上，我们用其检测出来的结果都为true\n\n- 不能用来检测和处理字面量方式创建出来的基本数据类型值\n\n用 instance 检测也不是那么完美，同样我们也可以根据开发需要来进行选择。\n\n### constructor\n\nconstructor 是利用构造函数来检测数据类型的，但是对于 null 和 undefined 是检测不出来的。\n\n```js\nconst str = ''\nstr.constructor === String // true\n\nconst num = 2\nnum.constructor === Number // true\n\nnull.constructor === Null // Uncaught TypeError: Cannot read property 'constructor' of null\n\nconst obj = {}\nobj.constructor === Object // true\n```\n- constructor 和 instanceof 的功能差不多\n\n- constructor 可以处理基本类型的检测\n\n### Object.prototype.toString.call()\n\n```js\nObject.prototype.toString.call('') // \"[object String]\"\nObject.prototype.toString.call({}) // \"[object Object]\"\nObject.prototype.toString.call(123) // \"[object Number]\"\nObject.prototype.toString.call(null) // \"[object Null]\"\nObject.prototype.toString.call(undefined) // \"[object Undefined]\"\nObject.prototype.toString.call(console.log) // \"[object Function]\"\n```\n- 这是到目前为止检测数据类型最准确的一种方式\n\n- 检测结果的第一个 object 代表当前实例是对象数据类型的（这个是固定死的），第二个值是我们所要检测的数据类型。\n\n&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;以上4种就是项目中我们可能会用到的检测数据类型的方法。","source":"_posts/检测数据类型-md.md","raw":"---\ntitle: 检测数据类型.md\ndate: 2020-09-28 21:00:30\ntags: JS\ncategories:\n- JS基础\n---\n&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;在我们平时开发的过程中经常会需要检测数据类型，那么JS中检测数据类型的方式有几种呢，它们之间都有什么区别呢，下面就让我们深入的研究一下吧！\n\n### typeof\n\ntypeof对于原始数据类型来说除了null以外，其它的都能正确检测出来。\n\n```js\nconsole.log(typeof 11n) // \"bigint\"\nconsole.log(typeof 11) // \"bigint\"\nconsole.log(typeof '') // \"string\"\nconsole.log(typeof undefined) // \"undefined\"\nconsole.log(typeof true) // \"boolean\"\nconsole.log(typeof Symbol()) // \"symbol\"\nconsole.log(typeof null) // \"object\"\n```\n- 用 typeof 检测数据类型，结果都会放在字符串中返回来。\n\n- 通过上面的一些例子我们发现， typeof 检测 null 时返回的是 \"object\" 数据类型，这与我们所预期的结果不太一样。而这是JS历史遗留的问题，我们只要记住用 type 检测原始数据类型会存在这个坑就可以了。\n\n下面我们来看看用 typeof 检测引用数据类型\n\n```js\nconsole.log(typeof []) // \"object\"\nconsole.log(typeof {}) // \"object\"\nconsole.log(typeof console.log) // \"function\"\n```\n从上面的几个例子我们可以看出来 typeof 检测引用数据类型，除了函数以外，其它的都会返回 \"object\"\n\n所以 typeof 并不能准确的判断变量是什么数据类型，但是根据我们实际开发情况也可以选择使用。\n\n### instanceof\n\ninstanceof 的内部机制是通过原型链来进行判断的。用来检测某一个实例是否属于某个类。\n\n```js\nfunction Person(){}\nconst person = new Person()\nperson instanceof Person // true\nperson instanceof Object // true\n\nconst str = 'Hello world'\nstr instanceof String // false\n\nconst str1 = new String('hello world')\nstr1 instanceof String // true\n```\n- 通过 instanceof 检测数据类型会返回一个 Boole 值\n\n- 只要在当前实例的原型链上，我们用其检测出来的结果都为true\n\n- 不能用来检测和处理字面量方式创建出来的基本数据类型值\n\n用 instance 检测也不是那么完美，同样我们也可以根据开发需要来进行选择。\n\n### constructor\n\nconstructor 是利用构造函数来检测数据类型的，但是对于 null 和 undefined 是检测不出来的。\n\n```js\nconst str = ''\nstr.constructor === String // true\n\nconst num = 2\nnum.constructor === Number // true\n\nnull.constructor === Null // Uncaught TypeError: Cannot read property 'constructor' of null\n\nconst obj = {}\nobj.constructor === Object // true\n```\n- constructor 和 instanceof 的功能差不多\n\n- constructor 可以处理基本类型的检测\n\n### Object.prototype.toString.call()\n\n```js\nObject.prototype.toString.call('') // \"[object String]\"\nObject.prototype.toString.call({}) // \"[object Object]\"\nObject.prototype.toString.call(123) // \"[object Number]\"\nObject.prototype.toString.call(null) // \"[object Null]\"\nObject.prototype.toString.call(undefined) // \"[object Undefined]\"\nObject.prototype.toString.call(console.log) // \"[object Function]\"\n```\n- 这是到目前为止检测数据类型最准确的一种方式\n\n- 检测结果的第一个 object 代表当前实例是对象数据类型的（这个是固定死的），第二个值是我们所要检测的数据类型。\n\n&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;以上4种就是项目中我们可能会用到的检测数据类型的方法。","slug":"检测数据类型-md","published":1,"updated":"2020-09-29T03:22:50.878Z","_id":"ckfmjl20u0000seolbpa3a6nf","comments":1,"layout":"post","photos":[],"link":"","content":"<p>&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;在我们平时开发的过程中经常会需要检测数据类型，那么JS中检测数据类型的方式有几种呢，它们之间都有什么区别呢，下面就让我们深入的研究一下吧！</p>\n<h3 id=\"typeof\"><a href=\"#typeof\" class=\"headerlink\" title=\"typeof\"></a>typeof</h3><p>typeof对于原始数据类型来说除了null以外，其它的都能正确检测出来。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-keyword\">typeof</span> <span class=\"hljs-number\">11n</span>) <span class=\"hljs-comment\">// \"bigint\"</span><br><span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-keyword\">typeof</span> <span class=\"hljs-number\">11</span>) <span class=\"hljs-comment\">// \"bigint\"</span><br><span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-keyword\">typeof</span> <span class=\"hljs-string\">''</span>) <span class=\"hljs-comment\">// \"string\"</span><br><span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-keyword\">typeof</span> <span class=\"hljs-literal\">undefined</span>) <span class=\"hljs-comment\">// \"undefined\"</span><br><span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-keyword\">typeof</span> <span class=\"hljs-literal\">true</span>) <span class=\"hljs-comment\">// \"boolean\"</span><br><span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-keyword\">typeof</span> <span class=\"hljs-built_in\">Symbol</span>()) <span class=\"hljs-comment\">// \"symbol\"</span><br><span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-keyword\">typeof</span> <span class=\"hljs-literal\">null</span>) <span class=\"hljs-comment\">// \"object\"</span><br></code></pre></td></tr></table></figure>\n<ul>\n<li><p>用 typeof 检测数据类型，结果都会放在字符串中返回来。</p>\n</li>\n<li><p>通过上面的一些例子我们发现， typeof 检测 null 时返回的是 “object” 数据类型，这与我们所预期的结果不太一样。而这是JS历史遗留的问题，我们只要记住用 type 检测原始数据类型会存在这个坑就可以了。</p>\n</li>\n</ul>\n<p>下面我们来看看用 typeof 检测引用数据类型</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-keyword\">typeof</span> []) <span class=\"hljs-comment\">// \"object\"</span><br><span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-keyword\">typeof</span> &#123;&#125;) <span class=\"hljs-comment\">// \"object\"</span><br><span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-keyword\">typeof</span> <span class=\"hljs-built_in\">console</span>.log) <span class=\"hljs-comment\">// \"function\"</span><br></code></pre></td></tr></table></figure>\n<p>从上面的几个例子我们可以看出来 typeof 检测引用数据类型，除了函数以外，其它的都会返回 “object”</p>\n<p>所以 typeof 并不能准确的判断变量是什么数据类型，但是根据我们实际开发情况也可以选择使用。</p>\n<h3 id=\"instanceof\"><a href=\"#instanceof\" class=\"headerlink\" title=\"instanceof\"></a>instanceof</h3><p>instanceof 的内部机制是通过原型链来进行判断的。用来检测某一个实例是否属于某个类。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">Person</span>(<span class=\"hljs-params\"></span>)</span>&#123;&#125;<br><span class=\"hljs-keyword\">const</span> person = <span class=\"hljs-keyword\">new</span> Person()<br>person <span class=\"hljs-keyword\">instanceof</span> Person <span class=\"hljs-comment\">// true</span><br>person <span class=\"hljs-keyword\">instanceof</span> <span class=\"hljs-built_in\">Object</span> <span class=\"hljs-comment\">// true</span><br><br><span class=\"hljs-keyword\">const</span> str = <span class=\"hljs-string\">'Hello world'</span><br>str <span class=\"hljs-keyword\">instanceof</span> <span class=\"hljs-built_in\">String</span> <span class=\"hljs-comment\">// false</span><br><br><span class=\"hljs-keyword\">const</span> str1 = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">String</span>(<span class=\"hljs-string\">'hello world'</span>)<br>str1 <span class=\"hljs-keyword\">instanceof</span> <span class=\"hljs-built_in\">String</span> <span class=\"hljs-comment\">// true</span><br></code></pre></td></tr></table></figure>\n<ul>\n<li><p>通过 instanceof 检测数据类型会返回一个 Boole 值</p>\n</li>\n<li><p>只要在当前实例的原型链上，我们用其检测出来的结果都为true</p>\n</li>\n<li><p>不能用来检测和处理字面量方式创建出来的基本数据类型值</p>\n</li>\n</ul>\n<p>用 instance 检测也不是那么完美，同样我们也可以根据开发需要来进行选择。</p>\n<h3 id=\"constructor-NaN\"><a href=\"#constructor-NaN\" class=\"headerlink\" title=\"constructor\"></a>constructor</h3><p>constructor 是利用构造函数来检测数据类型的，但是对于 null 和 undefined 是检测不出来的。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> str = <span class=\"hljs-string\">''</span><br>str.constructor === <span class=\"hljs-built_in\">String</span> <span class=\"hljs-comment\">// true</span><br><br><span class=\"hljs-keyword\">const</span> num = <span class=\"hljs-number\">2</span><br>num.constructor === <span class=\"hljs-built_in\">Number</span> <span class=\"hljs-comment\">// true</span><br><br><span class=\"hljs-literal\">null</span>.constructor === Null <span class=\"hljs-comment\">// Uncaught TypeError: Cannot read property 'constructor' of null</span><br><br><span class=\"hljs-keyword\">const</span> obj = &#123;&#125;<br>obj.constructor === <span class=\"hljs-built_in\">Object</span> <span class=\"hljs-comment\">// true</span><br></code></pre></td></tr></table></figure>\n<ul>\n<li><p>constructor 和 instanceof 的功能差不多</p>\n</li>\n<li><p>constructor 可以处理基本类型的检测</p>\n</li>\n</ul>\n<h3 id=\"Object-prototype-toString-call\"><a href=\"#Object-prototype-toString-call\" class=\"headerlink\" title=\"Object.prototype.toString.call()\"></a>Object.prototype.toString.call()</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-built_in\">Object</span>.prototype.toString.call(<span class=\"hljs-string\">''</span>) <span class=\"hljs-comment\">// \"[object String]\"</span><br><span class=\"hljs-built_in\">Object</span>.prototype.toString.call(&#123;&#125;) <span class=\"hljs-comment\">// \"[object Object]\"</span><br><span class=\"hljs-built_in\">Object</span>.prototype.toString.call(<span class=\"hljs-number\">123</span>) <span class=\"hljs-comment\">// \"[object Number]\"</span><br><span class=\"hljs-built_in\">Object</span>.prototype.toString.call(<span class=\"hljs-literal\">null</span>) <span class=\"hljs-comment\">// \"[object Null]\"</span><br><span class=\"hljs-built_in\">Object</span>.prototype.toString.call(<span class=\"hljs-literal\">undefined</span>) <span class=\"hljs-comment\">// \"[object Undefined]\"</span><br><span class=\"hljs-built_in\">Object</span>.prototype.toString.call(<span class=\"hljs-built_in\">console</span>.log) <span class=\"hljs-comment\">// \"[object Function]\"</span><br></code></pre></td></tr></table></figure>\n<ul>\n<li><p>这是到目前为止检测数据类型最准确的一种方式</p>\n</li>\n<li><p>检测结果的第一个 object 代表当前实例是对象数据类型的（这个是固定死的），第二个值是我们所要检测的数据类型。</p>\n</li>\n</ul>\n<p>&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;以上4种就是项目中我们可能会用到的检测数据类型的方法。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;在我们平时开发的过程中经常会需要检测数据类型，那么JS中检测数据类型的方式有几种呢，它们之间都有什么区别呢，下面就让我们深入的研究一下吧！</p>\n<h3 id=\"typeof\"><a href=\"#typeof\" class=\"headerlink\" title=\"typeof\"></a>typeof</h3><p>typeof对于原始数据类型来说除了null以外，其它的都能正确检测出来。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-keyword\">typeof</span> <span class=\"hljs-number\">11n</span>) <span class=\"hljs-comment\">// \"bigint\"</span><br><span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-keyword\">typeof</span> <span class=\"hljs-number\">11</span>) <span class=\"hljs-comment\">// \"bigint\"</span><br><span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-keyword\">typeof</span> <span class=\"hljs-string\">''</span>) <span class=\"hljs-comment\">// \"string\"</span><br><span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-keyword\">typeof</span> <span class=\"hljs-literal\">undefined</span>) <span class=\"hljs-comment\">// \"undefined\"</span><br><span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-keyword\">typeof</span> <span class=\"hljs-literal\">true</span>) <span class=\"hljs-comment\">// \"boolean\"</span><br><span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-keyword\">typeof</span> <span class=\"hljs-built_in\">Symbol</span>()) <span class=\"hljs-comment\">// \"symbol\"</span><br><span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-keyword\">typeof</span> <span class=\"hljs-literal\">null</span>) <span class=\"hljs-comment\">// \"object\"</span><br></code></pre></td></tr></table></figure>\n<ul>\n<li><p>用 typeof 检测数据类型，结果都会放在字符串中返回来。</p>\n</li>\n<li><p>通过上面的一些例子我们发现， typeof 检测 null 时返回的是 “object” 数据类型，这与我们所预期的结果不太一样。而这是JS历史遗留的问题，我们只要记住用 type 检测原始数据类型会存在这个坑就可以了。</p>\n</li>\n</ul>\n<p>下面我们来看看用 typeof 检测引用数据类型</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-keyword\">typeof</span> []) <span class=\"hljs-comment\">// \"object\"</span><br><span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-keyword\">typeof</span> &#123;&#125;) <span class=\"hljs-comment\">// \"object\"</span><br><span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-keyword\">typeof</span> <span class=\"hljs-built_in\">console</span>.log) <span class=\"hljs-comment\">// \"function\"</span><br></code></pre></td></tr></table></figure>\n<p>从上面的几个例子我们可以看出来 typeof 检测引用数据类型，除了函数以外，其它的都会返回 “object”</p>\n<p>所以 typeof 并不能准确的判断变量是什么数据类型，但是根据我们实际开发情况也可以选择使用。</p>\n<h3 id=\"instanceof\"><a href=\"#instanceof\" class=\"headerlink\" title=\"instanceof\"></a>instanceof</h3><p>instanceof 的内部机制是通过原型链来进行判断的。用来检测某一个实例是否属于某个类。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">Person</span>(<span class=\"hljs-params\"></span>)</span>&#123;&#125;<br><span class=\"hljs-keyword\">const</span> person = <span class=\"hljs-keyword\">new</span> Person()<br>person <span class=\"hljs-keyword\">instanceof</span> Person <span class=\"hljs-comment\">// true</span><br>person <span class=\"hljs-keyword\">instanceof</span> <span class=\"hljs-built_in\">Object</span> <span class=\"hljs-comment\">// true</span><br><br><span class=\"hljs-keyword\">const</span> str = <span class=\"hljs-string\">'Hello world'</span><br>str <span class=\"hljs-keyword\">instanceof</span> <span class=\"hljs-built_in\">String</span> <span class=\"hljs-comment\">// false</span><br><br><span class=\"hljs-keyword\">const</span> str1 = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">String</span>(<span class=\"hljs-string\">'hello world'</span>)<br>str1 <span class=\"hljs-keyword\">instanceof</span> <span class=\"hljs-built_in\">String</span> <span class=\"hljs-comment\">// true</span><br></code></pre></td></tr></table></figure>\n<ul>\n<li><p>通过 instanceof 检测数据类型会返回一个 Boole 值</p>\n</li>\n<li><p>只要在当前实例的原型链上，我们用其检测出来的结果都为true</p>\n</li>\n<li><p>不能用来检测和处理字面量方式创建出来的基本数据类型值</p>\n</li>\n</ul>\n<p>用 instance 检测也不是那么完美，同样我们也可以根据开发需要来进行选择。</p>\n<h3 id=\"constructor-NaN\"><a href=\"#constructor-NaN\" class=\"headerlink\" title=\"constructor\"></a>constructor</h3><p>constructor 是利用构造函数来检测数据类型的，但是对于 null 和 undefined 是检测不出来的。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> str = <span class=\"hljs-string\">''</span><br>str.constructor === <span class=\"hljs-built_in\">String</span> <span class=\"hljs-comment\">// true</span><br><br><span class=\"hljs-keyword\">const</span> num = <span class=\"hljs-number\">2</span><br>num.constructor === <span class=\"hljs-built_in\">Number</span> <span class=\"hljs-comment\">// true</span><br><br><span class=\"hljs-literal\">null</span>.constructor === Null <span class=\"hljs-comment\">// Uncaught TypeError: Cannot read property 'constructor' of null</span><br><br><span class=\"hljs-keyword\">const</span> obj = &#123;&#125;<br>obj.constructor === <span class=\"hljs-built_in\">Object</span> <span class=\"hljs-comment\">// true</span><br></code></pre></td></tr></table></figure>\n<ul>\n<li><p>constructor 和 instanceof 的功能差不多</p>\n</li>\n<li><p>constructor 可以处理基本类型的检测</p>\n</li>\n</ul>\n<h3 id=\"Object-prototype-toString-call\"><a href=\"#Object-prototype-toString-call\" class=\"headerlink\" title=\"Object.prototype.toString.call()\"></a>Object.prototype.toString.call()</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-built_in\">Object</span>.prototype.toString.call(<span class=\"hljs-string\">''</span>) <span class=\"hljs-comment\">// \"[object String]\"</span><br><span class=\"hljs-built_in\">Object</span>.prototype.toString.call(&#123;&#125;) <span class=\"hljs-comment\">// \"[object Object]\"</span><br><span class=\"hljs-built_in\">Object</span>.prototype.toString.call(<span class=\"hljs-number\">123</span>) <span class=\"hljs-comment\">// \"[object Number]\"</span><br><span class=\"hljs-built_in\">Object</span>.prototype.toString.call(<span class=\"hljs-literal\">null</span>) <span class=\"hljs-comment\">// \"[object Null]\"</span><br><span class=\"hljs-built_in\">Object</span>.prototype.toString.call(<span class=\"hljs-literal\">undefined</span>) <span class=\"hljs-comment\">// \"[object Undefined]\"</span><br><span class=\"hljs-built_in\">Object</span>.prototype.toString.call(<span class=\"hljs-built_in\">console</span>.log) <span class=\"hljs-comment\">// \"[object Function]\"</span><br></code></pre></td></tr></table></figure>\n<ul>\n<li><p>这是到目前为止检测数据类型最准确的一种方式</p>\n</li>\n<li><p>检测结果的第一个 object 代表当前实例是对象数据类型的（这个是固定死的），第二个值是我们所要检测的数据类型。</p>\n</li>\n</ul>\n<p>&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;以上4种就是项目中我们可能会用到的检测数据类型的方法。</p>\n"},{"title":"深浅拷贝","date":"2020-09-29T09:28:44.000Z","_content":"&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;在我们开发过程中，会遇到这样一个问题，我们想要复制一个对象给另一个变量，但是如果单纯的变量赋值，那么我们修改原来的对象的属性值会导致新赋值的这个对象属性值也跟着改变，这是因为引用类型赋值存储的是引用地址，这两个变量其实引用的同一个指针地址，所以修改对象的属性值，两个变量里的属性都会跟着改变。下面就让我们看看深浅拷贝如何解决这类问题。\n```js\nlet user = {\n  name: 'John',\n  age: 20\n}\nlet person = user\nuser.name = 'Lucy'\nconsole.log(person.name) // Lucy\n```\n\n### 浅拷贝\n\n```js\nlet user = {\n  name: 'John',\n  age: 20\n}\nlet clone = {}\nfor(let key in user){\n  clone[key] = user[key]\n}\nclone.name = 'Lucy'\nconsole.log(user.name) // John\n```\n\n```js\nlet user = {\n  name: 'John',\n  age: 20\n}\nlet person = Object.assign({}, user)\nuser.name = 'Lucy'\nconsole.log(person.name) // John\n```\n\n我们发现，利用 Object.assign() 还有循环我们可以解决对象里面的属性共享的问题。\n\n```js\nlet user = {\n  name: 'John',\n  age: 20,\n  likeSports: ['swimming', 'basketBall'],\n  child: {\n    name: 'mini',\n    age: 2,\n    sex: 'girl'\n  }\n}\nlet person = Object.assign({}, user)\nuser.likeSports.push('shopping')\nuser.child.age = 3\nconsole.log(person.likeSports) // [\"swimming\", \"basketBall\", \"shopping\"]\nconsole.log(person.child.age) // 3\n```\n当对象属性值为引用类型时，我们改变其值，还是会存在属性值共享的问题。\n这种只解决了一层拷贝的问题就是浅拷贝。\n\n### 深拷贝\n\n深拷贝就可以解决多层引用类型的拷贝，我们可以用 JSON.parse(JSON.stringify(object)) 来解决\n\n```js\nlet user = {\n  name: 'John',\n  child: {\n    name: 'mini',\n    age: 2\n  }\n}\nlet person = JSON.parse(JSON.stringify(user))\nuser.child.age = 3\nconsole.log(person.child.age) // 2\n```\n可是，这个方法也是不完美的，它有局限性\n\n- 会忽略 undefined 和 Symbol\n- 不能序列化函数\n- 不能解决循环引用对象\n\n```js\nlet obj = {\n  a: 1,\n  b: {\n    c: 2,\n    d: 3\n  }\n}\nobj.c = obj.b\nobj.e = obj.a\nobj.b.c = obj.c\nobj.b.d = obj.b\nobj.b.e = obj.b.c\nlet newObj = JSON.parse(JSON.stringify(obj))\nconsole.log(newObj)\n\n// VM3724:13 Uncaught TypeError: Converting circular structure to JSON\n//     --> starting at object with constructor 'Object'\n//     --- property 'c' closes the circle\n//     at JSON.stringify (<anonymous>)\n//     at <anonymous>:13:30\n```\n如果这样循环引用，就会报错。\n\n在遇到 Symbol、undefined 的时候，该对象也不能正常的序列化\n\n```js\nlet user = {\n  name: 'Lucy',\n  age: Symbol(20),\n  like: function(){},\n  sex: undefined\n}\nlet person = JSON.parse(JSON.stringify(user))\nconsole.log(person) // {name: \"Lucy\"}\n```\n\n上面这段代码最后我们只拷贝过来 name 属性，其它的都被忽略了\n\n### 实现一个简单的深拷贝\n\n```js\nfunction deepClone(obj){\n  function isObject(o){\n    return ((typeof o == 'object' || typeof o == 'function') && o !== null)\n  }\n  if(!isObject(obj)){\n    throw new Error('不是一个对象')\n  }\n  let isArray = Array.isArray(obj)\n  let newObj = isArray? [...obj] : {...obj}\n  Reflect.ownKeys(newObj).forEach(key => {\n    newObj[key] = isObject(obj[key])? deepClone(obj[key]) : obj[key]\n  })\n  return newObj\n}\n\nlet user = {\n  name: 'Lucy',\n  age: 20,\n  child: {\n    name: 'mini',\n    likeFood: ['banana', 'apple'],\n    sex: Symbol('girl'),\n    can: function(){},\n    hobby: undefined\n  }\n}\n\nlet person = deepClone(user)\n\nuser.child.likeFood.push('pear')\nconsole.log(person.child.likeFood) // [\"banana\", \"apple\"]\n```","source":"_posts/深浅拷贝.md","raw":"---\ntitle: 深浅拷贝\ndate: 2020-09-29 17:28:44\ntags: JS\ncategories:\n- JS基础\n---\n&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;在我们开发过程中，会遇到这样一个问题，我们想要复制一个对象给另一个变量，但是如果单纯的变量赋值，那么我们修改原来的对象的属性值会导致新赋值的这个对象属性值也跟着改变，这是因为引用类型赋值存储的是引用地址，这两个变量其实引用的同一个指针地址，所以修改对象的属性值，两个变量里的属性都会跟着改变。下面就让我们看看深浅拷贝如何解决这类问题。\n```js\nlet user = {\n  name: 'John',\n  age: 20\n}\nlet person = user\nuser.name = 'Lucy'\nconsole.log(person.name) // Lucy\n```\n\n### 浅拷贝\n\n```js\nlet user = {\n  name: 'John',\n  age: 20\n}\nlet clone = {}\nfor(let key in user){\n  clone[key] = user[key]\n}\nclone.name = 'Lucy'\nconsole.log(user.name) // John\n```\n\n```js\nlet user = {\n  name: 'John',\n  age: 20\n}\nlet person = Object.assign({}, user)\nuser.name = 'Lucy'\nconsole.log(person.name) // John\n```\n\n我们发现，利用 Object.assign() 还有循环我们可以解决对象里面的属性共享的问题。\n\n```js\nlet user = {\n  name: 'John',\n  age: 20,\n  likeSports: ['swimming', 'basketBall'],\n  child: {\n    name: 'mini',\n    age: 2,\n    sex: 'girl'\n  }\n}\nlet person = Object.assign({}, user)\nuser.likeSports.push('shopping')\nuser.child.age = 3\nconsole.log(person.likeSports) // [\"swimming\", \"basketBall\", \"shopping\"]\nconsole.log(person.child.age) // 3\n```\n当对象属性值为引用类型时，我们改变其值，还是会存在属性值共享的问题。\n这种只解决了一层拷贝的问题就是浅拷贝。\n\n### 深拷贝\n\n深拷贝就可以解决多层引用类型的拷贝，我们可以用 JSON.parse(JSON.stringify(object)) 来解决\n\n```js\nlet user = {\n  name: 'John',\n  child: {\n    name: 'mini',\n    age: 2\n  }\n}\nlet person = JSON.parse(JSON.stringify(user))\nuser.child.age = 3\nconsole.log(person.child.age) // 2\n```\n可是，这个方法也是不完美的，它有局限性\n\n- 会忽略 undefined 和 Symbol\n- 不能序列化函数\n- 不能解决循环引用对象\n\n```js\nlet obj = {\n  a: 1,\n  b: {\n    c: 2,\n    d: 3\n  }\n}\nobj.c = obj.b\nobj.e = obj.a\nobj.b.c = obj.c\nobj.b.d = obj.b\nobj.b.e = obj.b.c\nlet newObj = JSON.parse(JSON.stringify(obj))\nconsole.log(newObj)\n\n// VM3724:13 Uncaught TypeError: Converting circular structure to JSON\n//     --> starting at object with constructor 'Object'\n//     --- property 'c' closes the circle\n//     at JSON.stringify (<anonymous>)\n//     at <anonymous>:13:30\n```\n如果这样循环引用，就会报错。\n\n在遇到 Symbol、undefined 的时候，该对象也不能正常的序列化\n\n```js\nlet user = {\n  name: 'Lucy',\n  age: Symbol(20),\n  like: function(){},\n  sex: undefined\n}\nlet person = JSON.parse(JSON.stringify(user))\nconsole.log(person) // {name: \"Lucy\"}\n```\n\n上面这段代码最后我们只拷贝过来 name 属性，其它的都被忽略了\n\n### 实现一个简单的深拷贝\n\n```js\nfunction deepClone(obj){\n  function isObject(o){\n    return ((typeof o == 'object' || typeof o == 'function') && o !== null)\n  }\n  if(!isObject(obj)){\n    throw new Error('不是一个对象')\n  }\n  let isArray = Array.isArray(obj)\n  let newObj = isArray? [...obj] : {...obj}\n  Reflect.ownKeys(newObj).forEach(key => {\n    newObj[key] = isObject(obj[key])? deepClone(obj[key]) : obj[key]\n  })\n  return newObj\n}\n\nlet user = {\n  name: 'Lucy',\n  age: 20,\n  child: {\n    name: 'mini',\n    likeFood: ['banana', 'apple'],\n    sex: Symbol('girl'),\n    can: function(){},\n    hobby: undefined\n  }\n}\n\nlet person = deepClone(user)\n\nuser.child.likeFood.push('pear')\nconsole.log(person.child.likeFood) // [\"banana\", \"apple\"]\n```","slug":"深浅拷贝","published":1,"updated":"2020-09-29T13:38:40.676Z","_id":"ckfnrdmx00000gyolcmesblv9","comments":1,"layout":"post","photos":[],"link":"","content":"<p>&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;在我们开发过程中，会遇到这样一个问题，我们想要复制一个对象给另一个变量，但是如果单纯的变量赋值，那么我们修改原来的对象的属性值会导致新赋值的这个对象属性值也跟着改变，这是因为引用类型赋值存储的是引用地址，这两个变量其实引用的同一个指针地址，所以修改对象的属性值，两个变量里的属性都会跟着改变。下面就让我们看看深浅拷贝如何解决这类问题。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">let</span> user = &#123;<br>  name: <span class=\"hljs-string\">'John'</span>,<br>  age: <span class=\"hljs-number\">20</span><br>&#125;<br><span class=\"hljs-keyword\">let</span> person = user<br>user.name = <span class=\"hljs-string\">'Lucy'</span><br><span class=\"hljs-built_in\">console</span>.log(person.name) <span class=\"hljs-comment\">// Lucy</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"浅拷贝\"><a href=\"#浅拷贝\" class=\"headerlink\" title=\"浅拷贝\"></a>浅拷贝</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">let</span> user = &#123;<br>  name: <span class=\"hljs-string\">'John'</span>,<br>  age: <span class=\"hljs-number\">20</span><br>&#125;<br><span class=\"hljs-keyword\">let</span> clone = &#123;&#125;<br><span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> key <span class=\"hljs-keyword\">in</span> user)&#123;<br>  clone[key] = user[key]<br>&#125;<br>clone.name = <span class=\"hljs-string\">'Lucy'</span><br><span class=\"hljs-built_in\">console</span>.log(user.name) <span class=\"hljs-comment\">// John</span><br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">let</span> user = &#123;<br>  name: <span class=\"hljs-string\">'John'</span>,<br>  age: <span class=\"hljs-number\">20</span><br>&#125;<br><span class=\"hljs-keyword\">let</span> person = <span class=\"hljs-built_in\">Object</span>.assign(&#123;&#125;, user)<br>user.name = <span class=\"hljs-string\">'Lucy'</span><br><span class=\"hljs-built_in\">console</span>.log(person.name) <span class=\"hljs-comment\">// John</span><br></code></pre></td></tr></table></figure>\n\n<p>我们发现，利用 Object.assign() 还有循环我们可以解决对象里面的属性共享的问题。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">let</span> user = &#123;<br>  name: <span class=\"hljs-string\">'John'</span>,<br>  age: <span class=\"hljs-number\">20</span>,<br>  likeSports: [<span class=\"hljs-string\">'swimming'</span>, <span class=\"hljs-string\">'basketBall'</span>],<br>  child: &#123;<br>    name: <span class=\"hljs-string\">'mini'</span>,<br>    age: <span class=\"hljs-number\">2</span>,<br>    sex: <span class=\"hljs-string\">'girl'</span><br>  &#125;<br>&#125;<br><span class=\"hljs-keyword\">let</span> person = <span class=\"hljs-built_in\">Object</span>.assign(&#123;&#125;, user)<br>user.likeSports.push(<span class=\"hljs-string\">'shopping'</span>)<br>user.child.age = <span class=\"hljs-number\">3</span><br><span class=\"hljs-built_in\">console</span>.log(person.likeSports) <span class=\"hljs-comment\">// [\"swimming\", \"basketBall\", \"shopping\"]</span><br><span class=\"hljs-built_in\">console</span>.log(person.child.age) <span class=\"hljs-comment\">// 3</span><br></code></pre></td></tr></table></figure>\n<p>当对象属性值为引用类型时，我们改变其值，还是会存在属性值共享的问题。<br>这种只解决了一层拷贝的问题就是浅拷贝。</p>\n<h3 id=\"深拷贝\"><a href=\"#深拷贝\" class=\"headerlink\" title=\"深拷贝\"></a>深拷贝</h3><p>深拷贝就可以解决多层引用类型的拷贝，我们可以用 JSON.parse(JSON.stringify(object)) 来解决</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">let</span> user = &#123;<br>  name: <span class=\"hljs-string\">'John'</span>,<br>  child: &#123;<br>    name: <span class=\"hljs-string\">'mini'</span>,<br>    age: <span class=\"hljs-number\">2</span><br>  &#125;<br>&#125;<br><span class=\"hljs-keyword\">let</span> person = <span class=\"hljs-built_in\">JSON</span>.parse(<span class=\"hljs-built_in\">JSON</span>.stringify(user))<br>user.child.age = <span class=\"hljs-number\">3</span><br><span class=\"hljs-built_in\">console</span>.log(person.child.age) <span class=\"hljs-comment\">// 2</span><br></code></pre></td></tr></table></figure>\n<p>可是，这个方法也是不完美的，它有局限性</p>\n<ul>\n<li>会忽略 undefined 和 Symbol</li>\n<li>不能序列化函数</li>\n<li>不能解决循环引用对象</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">let</span> obj = &#123;<br>  a: <span class=\"hljs-number\">1</span>,<br>  b: &#123;<br>    c: <span class=\"hljs-number\">2</span>,<br>    d: <span class=\"hljs-number\">3</span><br>  &#125;<br>&#125;<br>obj.c = obj.b<br>obj.e = obj.a<br>obj.b.c = obj.c<br>obj.b.d = obj.b<br>obj.b.e = obj.b.c<br><span class=\"hljs-keyword\">let</span> newObj = <span class=\"hljs-built_in\">JSON</span>.parse(<span class=\"hljs-built_in\">JSON</span>.stringify(obj))<br><span class=\"hljs-built_in\">console</span>.log(newObj)<br><br><span class=\"hljs-comment\">// VM3724:13 Uncaught TypeError: Converting circular structure to JSON</span><br><span class=\"hljs-comment\">//     --&gt; starting at object with constructor 'Object'</span><br><span class=\"hljs-comment\">//     --- property 'c' closes the circle</span><br><span class=\"hljs-comment\">//     at JSON.stringify (&lt;anonymous&gt;)</span><br><span class=\"hljs-comment\">//     at &lt;anonymous&gt;:13:30</span><br></code></pre></td></tr></table></figure>\n<p>如果这样循环引用，就会报错。</p>\n<p>在遇到 Symbol、undefined 的时候，该对象也不能正常的序列化</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">let</span> user = &#123;<br>  name: <span class=\"hljs-string\">'Lucy'</span>,<br>  age: <span class=\"hljs-built_in\">Symbol</span>(<span class=\"hljs-number\">20</span>),<br>  like: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;&#125;,<br>  sex: <span class=\"hljs-literal\">undefined</span><br>&#125;<br><span class=\"hljs-keyword\">let</span> person = <span class=\"hljs-built_in\">JSON</span>.parse(<span class=\"hljs-built_in\">JSON</span>.stringify(user))<br><span class=\"hljs-built_in\">console</span>.log(person) <span class=\"hljs-comment\">// &#123;name: \"Lucy\"&#125;</span><br></code></pre></td></tr></table></figure>\n\n<p>上面这段代码最后我们只拷贝过来 name 属性，其它的都被忽略了</p>\n<h3 id=\"实现一个简单的深拷贝\"><a href=\"#实现一个简单的深拷贝\" class=\"headerlink\" title=\"实现一个简单的深拷贝\"></a>实现一个简单的深拷贝</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">deepClone</span>(<span class=\"hljs-params\">obj</span>)</span>&#123;<br>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">isObject</span>(<span class=\"hljs-params\">o</span>)</span>&#123;<br>    <span class=\"hljs-keyword\">return</span> ((<span class=\"hljs-keyword\">typeof</span> o == <span class=\"hljs-string\">'object'</span> || <span class=\"hljs-keyword\">typeof</span> o == <span class=\"hljs-string\">'function'</span>) &amp;&amp; o !== <span class=\"hljs-literal\">null</span>)<br>  &#125;<br>  <span class=\"hljs-keyword\">if</span>(!isObject(obj))&#123;<br>    <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Error</span>(<span class=\"hljs-string\">'不是一个对象'</span>)<br>  &#125;<br>  <span class=\"hljs-keyword\">let</span> isArray = <span class=\"hljs-built_in\">Array</span>.isArray(obj)<br>  <span class=\"hljs-keyword\">let</span> newObj = isArray? [...obj] : &#123;...obj&#125;<br>  <span class=\"hljs-built_in\">Reflect</span>.ownKeys(newObj).forEach(<span class=\"hljs-function\"><span class=\"hljs-params\">key</span> =&gt;</span> &#123;<br>    newObj[key] = isObject(obj[key])? deepClone(obj[key]) : obj[key]<br>  &#125;)<br>  <span class=\"hljs-keyword\">return</span> newObj<br>&#125;<br><br><span class=\"hljs-keyword\">let</span> user = &#123;<br>  name: <span class=\"hljs-string\">'Lucy'</span>,<br>  age: <span class=\"hljs-number\">20</span>,<br>  child: &#123;<br>    name: <span class=\"hljs-string\">'mini'</span>,<br>    likeFood: [<span class=\"hljs-string\">'banana'</span>, <span class=\"hljs-string\">'apple'</span>],<br>    sex: <span class=\"hljs-built_in\">Symbol</span>(<span class=\"hljs-string\">'girl'</span>),<br>    can: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;&#125;,<br>    hobby: <span class=\"hljs-literal\">undefined</span><br>  &#125;<br>&#125;<br><br><span class=\"hljs-keyword\">let</span> person = deepClone(user)<br><br>user.child.likeFood.push(<span class=\"hljs-string\">'pear'</span>)<br><span class=\"hljs-built_in\">console</span>.log(person.child.likeFood) <span class=\"hljs-comment\">// [\"banana\", \"apple\"]</span><br></code></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<p>&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;在我们开发过程中，会遇到这样一个问题，我们想要复制一个对象给另一个变量，但是如果单纯的变量赋值，那么我们修改原来的对象的属性值会导致新赋值的这个对象属性值也跟着改变，这是因为引用类型赋值存储的是引用地址，这两个变量其实引用的同一个指针地址，所以修改对象的属性值，两个变量里的属性都会跟着改变。下面就让我们看看深浅拷贝如何解决这类问题。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">let</span> user = &#123;<br>  name: <span class=\"hljs-string\">'John'</span>,<br>  age: <span class=\"hljs-number\">20</span><br>&#125;<br><span class=\"hljs-keyword\">let</span> person = user<br>user.name = <span class=\"hljs-string\">'Lucy'</span><br><span class=\"hljs-built_in\">console</span>.log(person.name) <span class=\"hljs-comment\">// Lucy</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"浅拷贝\"><a href=\"#浅拷贝\" class=\"headerlink\" title=\"浅拷贝\"></a>浅拷贝</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">let</span> user = &#123;<br>  name: <span class=\"hljs-string\">'John'</span>,<br>  age: <span class=\"hljs-number\">20</span><br>&#125;<br><span class=\"hljs-keyword\">let</span> clone = &#123;&#125;<br><span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> key <span class=\"hljs-keyword\">in</span> user)&#123;<br>  clone[key] = user[key]<br>&#125;<br>clone.name = <span class=\"hljs-string\">'Lucy'</span><br><span class=\"hljs-built_in\">console</span>.log(user.name) <span class=\"hljs-comment\">// John</span><br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">let</span> user = &#123;<br>  name: <span class=\"hljs-string\">'John'</span>,<br>  age: <span class=\"hljs-number\">20</span><br>&#125;<br><span class=\"hljs-keyword\">let</span> person = <span class=\"hljs-built_in\">Object</span>.assign(&#123;&#125;, user)<br>user.name = <span class=\"hljs-string\">'Lucy'</span><br><span class=\"hljs-built_in\">console</span>.log(person.name) <span class=\"hljs-comment\">// John</span><br></code></pre></td></tr></table></figure>\n\n<p>我们发现，利用 Object.assign() 还有循环我们可以解决对象里面的属性共享的问题。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">let</span> user = &#123;<br>  name: <span class=\"hljs-string\">'John'</span>,<br>  age: <span class=\"hljs-number\">20</span>,<br>  likeSports: [<span class=\"hljs-string\">'swimming'</span>, <span class=\"hljs-string\">'basketBall'</span>],<br>  child: &#123;<br>    name: <span class=\"hljs-string\">'mini'</span>,<br>    age: <span class=\"hljs-number\">2</span>,<br>    sex: <span class=\"hljs-string\">'girl'</span><br>  &#125;<br>&#125;<br><span class=\"hljs-keyword\">let</span> person = <span class=\"hljs-built_in\">Object</span>.assign(&#123;&#125;, user)<br>user.likeSports.push(<span class=\"hljs-string\">'shopping'</span>)<br>user.child.age = <span class=\"hljs-number\">3</span><br><span class=\"hljs-built_in\">console</span>.log(person.likeSports) <span class=\"hljs-comment\">// [\"swimming\", \"basketBall\", \"shopping\"]</span><br><span class=\"hljs-built_in\">console</span>.log(person.child.age) <span class=\"hljs-comment\">// 3</span><br></code></pre></td></tr></table></figure>\n<p>当对象属性值为引用类型时，我们改变其值，还是会存在属性值共享的问题。<br>这种只解决了一层拷贝的问题就是浅拷贝。</p>\n<h3 id=\"深拷贝\"><a href=\"#深拷贝\" class=\"headerlink\" title=\"深拷贝\"></a>深拷贝</h3><p>深拷贝就可以解决多层引用类型的拷贝，我们可以用 JSON.parse(JSON.stringify(object)) 来解决</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">let</span> user = &#123;<br>  name: <span class=\"hljs-string\">'John'</span>,<br>  child: &#123;<br>    name: <span class=\"hljs-string\">'mini'</span>,<br>    age: <span class=\"hljs-number\">2</span><br>  &#125;<br>&#125;<br><span class=\"hljs-keyword\">let</span> person = <span class=\"hljs-built_in\">JSON</span>.parse(<span class=\"hljs-built_in\">JSON</span>.stringify(user))<br>user.child.age = <span class=\"hljs-number\">3</span><br><span class=\"hljs-built_in\">console</span>.log(person.child.age) <span class=\"hljs-comment\">// 2</span><br></code></pre></td></tr></table></figure>\n<p>可是，这个方法也是不完美的，它有局限性</p>\n<ul>\n<li>会忽略 undefined 和 Symbol</li>\n<li>不能序列化函数</li>\n<li>不能解决循环引用对象</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">let</span> obj = &#123;<br>  a: <span class=\"hljs-number\">1</span>,<br>  b: &#123;<br>    c: <span class=\"hljs-number\">2</span>,<br>    d: <span class=\"hljs-number\">3</span><br>  &#125;<br>&#125;<br>obj.c = obj.b<br>obj.e = obj.a<br>obj.b.c = obj.c<br>obj.b.d = obj.b<br>obj.b.e = obj.b.c<br><span class=\"hljs-keyword\">let</span> newObj = <span class=\"hljs-built_in\">JSON</span>.parse(<span class=\"hljs-built_in\">JSON</span>.stringify(obj))<br><span class=\"hljs-built_in\">console</span>.log(newObj)<br><br><span class=\"hljs-comment\">// VM3724:13 Uncaught TypeError: Converting circular structure to JSON</span><br><span class=\"hljs-comment\">//     --&gt; starting at object with constructor 'Object'</span><br><span class=\"hljs-comment\">//     --- property 'c' closes the circle</span><br><span class=\"hljs-comment\">//     at JSON.stringify (&lt;anonymous&gt;)</span><br><span class=\"hljs-comment\">//     at &lt;anonymous&gt;:13:30</span><br></code></pre></td></tr></table></figure>\n<p>如果这样循环引用，就会报错。</p>\n<p>在遇到 Symbol、undefined 的时候，该对象也不能正常的序列化</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">let</span> user = &#123;<br>  name: <span class=\"hljs-string\">'Lucy'</span>,<br>  age: <span class=\"hljs-built_in\">Symbol</span>(<span class=\"hljs-number\">20</span>),<br>  like: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;&#125;,<br>  sex: <span class=\"hljs-literal\">undefined</span><br>&#125;<br><span class=\"hljs-keyword\">let</span> person = <span class=\"hljs-built_in\">JSON</span>.parse(<span class=\"hljs-built_in\">JSON</span>.stringify(user))<br><span class=\"hljs-built_in\">console</span>.log(person) <span class=\"hljs-comment\">// &#123;name: \"Lucy\"&#125;</span><br></code></pre></td></tr></table></figure>\n\n<p>上面这段代码最后我们只拷贝过来 name 属性，其它的都被忽略了</p>\n<h3 id=\"实现一个简单的深拷贝\"><a href=\"#实现一个简单的深拷贝\" class=\"headerlink\" title=\"实现一个简单的深拷贝\"></a>实现一个简单的深拷贝</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">deepClone</span>(<span class=\"hljs-params\">obj</span>)</span>&#123;<br>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">isObject</span>(<span class=\"hljs-params\">o</span>)</span>&#123;<br>    <span class=\"hljs-keyword\">return</span> ((<span class=\"hljs-keyword\">typeof</span> o == <span class=\"hljs-string\">'object'</span> || <span class=\"hljs-keyword\">typeof</span> o == <span class=\"hljs-string\">'function'</span>) &amp;&amp; o !== <span class=\"hljs-literal\">null</span>)<br>  &#125;<br>  <span class=\"hljs-keyword\">if</span>(!isObject(obj))&#123;<br>    <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Error</span>(<span class=\"hljs-string\">'不是一个对象'</span>)<br>  &#125;<br>  <span class=\"hljs-keyword\">let</span> isArray = <span class=\"hljs-built_in\">Array</span>.isArray(obj)<br>  <span class=\"hljs-keyword\">let</span> newObj = isArray? [...obj] : &#123;...obj&#125;<br>  <span class=\"hljs-built_in\">Reflect</span>.ownKeys(newObj).forEach(<span class=\"hljs-function\"><span class=\"hljs-params\">key</span> =&gt;</span> &#123;<br>    newObj[key] = isObject(obj[key])? deepClone(obj[key]) : obj[key]<br>  &#125;)<br>  <span class=\"hljs-keyword\">return</span> newObj<br>&#125;<br><br><span class=\"hljs-keyword\">let</span> user = &#123;<br>  name: <span class=\"hljs-string\">'Lucy'</span>,<br>  age: <span class=\"hljs-number\">20</span>,<br>  child: &#123;<br>    name: <span class=\"hljs-string\">'mini'</span>,<br>    likeFood: [<span class=\"hljs-string\">'banana'</span>, <span class=\"hljs-string\">'apple'</span>],<br>    sex: <span class=\"hljs-built_in\">Symbol</span>(<span class=\"hljs-string\">'girl'</span>),<br>    can: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;&#125;,<br>    hobby: <span class=\"hljs-literal\">undefined</span><br>  &#125;<br>&#125;<br><br><span class=\"hljs-keyword\">let</span> person = deepClone(user)<br><br>user.child.likeFood.push(<span class=\"hljs-string\">'pear'</span>)<br><span class=\"hljs-built_in\">console</span>.log(person.child.likeFood) <span class=\"hljs-comment\">// [\"banana\", \"apple\"]</span><br></code></pre></td></tr></table></figure>"},{"title":"深入理解promise","date":"2020-11-04T08:13:48.000Z","_content":"### 背景\n\n&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;由于 JS 是单线程执行的，这就导致我们有些处理不得不使用异步执行的方式，比如请求数据啦，浏览器的一些方法啦等等。这就会导致一种场景存在，如果我们接下来的逻辑需要依赖异步执行后的结果怎么办？在过去，我们通常会用回调函数的方法来解决，就像下面这个例子\n```js\nrequest.onreadystatechange = function () {\n    if (request.readyState === 4) {\n        if (request.status === 200) {\n            return success(request.responseText);\n        } else {\n            return fail(request.status);\n        }\n    }\n}\n```\n&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;假如我们有多个请求都是依赖关系，那么就会导致一个回调函数内嵌套另一个回调函数，这样的代码看起来真的不是很好理解，也不利于后期代码的维护😖。\n```js\n// 类似这样，回调地狱，想想都可怕\najax(url, () => {\n    // 处理逻辑\n    ajax(url1, () => {\n        // 处理逻辑\n        ajax(url2, () => {\n            // 处理逻辑\n        })\n    })\n})\n```\n&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;为了解决这个问题，Promise 就诞生了👏🏻👏🏻👏🏻，它是 ES6 中的语法，有了它我们就再也不用写这种恶心的回调地狱式代码。\n\n### 初识Promise\n\n&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;promise 翻译成中文是允诺，许诺的意思，我们可以理解为允诺在未来的某一个时刻会有一个确切的答复，并且这个允诺有三种状态，分别是：\n- 等待中（pending）\n- 完成了（resolved）\n- 拒绝了（rejected）\n\n一旦从等待状态转变为其它状态就不能再改变了。\n```js\nnew Promise((resolve, reject) => {\n  resolve('success')\n  reject('fail') // 无效，已经变成 resolved 状态\n})\n```\nPromise 构造函数内部的代码是立即执行的。\n```js\nnew Promise((resolve) => {\n  console.log('start')\n  resolve('success')\n})\nconsole.log('end')\n\n// start  end\n```\nPromise 实现了链式调用，每次调用 then 之后都会返回一个全新的 Promise，在 then 中如果使用了 return , return 中的值就会被 Promise.resolve() 包裹。\n```js\nnew Promise((resolve) => {\n  resolve('success')\n}).then(res => {\n  console.log(res)\n  return '111'\n}).then(res => {\n  console.log(res)\n})\n// success    111\n```\n下面让我们来看看 Promise 如何解决回调地狱的问题吧。\n```js\najax(url)\n  .then(res => {\n      console.log(res)\n      return ajax(url1)\n  }).then(res => {\n      console.log(res)\n      return ajax(url2)\n  }).then(res => console.log(res))\n```\n&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp; 现在，你是否对 Promise 有一个大体的了解了呢，Promise 还有其它一些好用的 API，在这里我就不一一的详述啦，大家可以去看一下 MDN 官方的[文档](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise)，或者也可以看一下[廖雪峰的博客](https://www.liaoxuefeng.com/wiki/1022910821149312/1023024413276544)进行深入的了解。最后附上一张官方的图片，这张图将 Promise 解释的淋漓尽致。\n![](./promise/promise.png)\n\n### 进阶Promise\n&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;当然，有追求的我们怎能单单的仅限于如何使用的层面呢🙄，接下来我们就要大展身手实现一个盗版的 Promise😏。\n```js\nconst promise = new Promise((resolve, reject) => {\n  resolve('success')\n})\npromise.then((res)=>{\n  console.log(res)\n},(err)=> {\n  console.log(err)\n})\n```\n上面的这段代码是我们正常的一个 promise 调用。\n- 我们先创建了一个 Promise 实例。\n\n- 给这个实例传进了一个函数数据类型的参数，这个函数参数是同步的，会直接运行，并且这个函数也接收了两个函数作为参数，分别代表 成功时候执行的回调 和 失败的时候执行的回调。\n\n- 我们在构造函数中执行了这个成功的回调，并且传进了一个字符串作为参数\n\n- 之后呢我们调用了 then，这个 then 方法接收了两个函数数据类型的参数，一个代表成功的回调，一个代表失败的回调，我们会根据调用了 resolve 还是 reject 来执行对应的回调。\n\n- 在这里呢，我们执行了 resolve 回调，并传进了一个参数，我们将这个参数成功的打印出来啦。\n\n- 结束。。。\n\n到现在我们一步步分析完了，废话不多说，我们来一步步的实现吧💪🏻。\n\n首先我们来创建一个 Mypromise 构造函数\n```js\nclass Mypromise{\n  constructor(){}\n}\n```\n哈哈，创建好啦，没错，就是这么简单。\n现在我们按照步骤，应该给这个构造函数传参，还是一个函数数据类型的参数，并且要直接运行。\n```js\nclass Mypromise{\n  constructor(excution){\n    excution(resolve, reject)\n  }\n}\n```\n此时，我们发现这里的 resolve 和 reject 这两个函数参数并没有定义，所以我们要定义一下，并且还要定义三种状态的常量，初始化的状态为pending。\n```js\nconst PENDING = 'pending'\nconst RESOLVE = 'resolve'\nconst REJECT = 'reject'\nclass Mypromise{\n  status = PENDING\n  result = undefined\n  reason = undefined\n  constructor(excution){\n    const resolve = (result) => {\n      if(this.status = PENDING){\n        this.status = RESOLVE\n        this.result = result\n      }\n    }\n    const reject = (reason) => {\n      if(this.status = PENDING){\n        this.status = REJECT\n        this.reason = reason\n      }\n    }\n    excution(resolve, reject)\n  }\n}\n```\n在这一步我们还顺便把 成功 和 失败 的回调函数传参给实现了，相当于```result('success')```。因为 Promise 只有在状态为 pending 时才会改变状态，执行 resolve 和 reject 回调时我们的状态会改变，并且将参数存起来。\n\n之后我们就要开始实现 then 函数啦，接收两个函数数据类型的参数，判断状态不为 pending 时，分别执行对应的函数。\n```js\nconst PENDING = 'pending'\nconst RESOLVE = 'resolve'\nconst REJECT = 'reject'\nclass Mypromise{\n  status = PENDING\n  result = undefined\n  reason = undefined\n  constructor(excution){\n    const resolve = (result) => {\n      if(this.status === PENDING){\n        this.status = RESOLVE\n        this.result = result\n      }\n    }\n    const reject = (reason) => {\n      if(this.status === PENDING){\n        this.status = REJECT\n        this.reason = reason\n      }\n    }\n    excution(resolve, reject)\n  }\n  then(onResolved, onRejected){\n    if(this.status === RESOLVE){\n      onResolved(this.result)\n    }\n    if(this.status === REJECT){\n      onRejected(this.reason)\n    }\n  }\n}\n```\n现在，让我们来试一下我们初见雏形的 promise 吧\n```js\nconst promise = new Mypromise((resolve, reject) => {\n    resolve('success')\n})\npromise.then(res => {\n    console.log(res)\n}, err => {})\n\n// success\n```\n没问题，到目前为止，我么已经实现了一个基本的 promise 啦，哈哈哈，激动不😎，来，我们继续发现问题，解决问题。\n\n看一下这个例子\n```js\nconst promise = new Promise((resolve, reject) => {\n  resolve('success')\n})\npromise.then(res => {\n  console.log(res)\n})\nconsole.log('end')\n// end success\n```\n```js\nconst promise = new Mypromise((resolve, reject) => {\n  resolve('success')\n})\npromise.then(res => {\n  console.log(res)\n})\nconsole.log('end')\n// success end\n```\n细心的同学会发现，我们盗版 Mypromise 得到结果的顺序和正版的结果顺序不太一样诶，让我们来分析一下。\n\n看过文档的同学应该已经知道了，因为then方法是异步执行的，而我们现在实现的是同步的，所以会从上到下正常输出，那么我们来解决这个问题吧。\n\n```js\nconst PENDING = 'pending'\nconst RESOLVE = 'resolve'\nconst REJECT = 'reject'\nclass Mypromise{\n  status = PENDING\n  result = undefined\n  reason = undefined\n  constructor(excution){\n    const resolve = (result) => {\n      if(this.status === PENDING){\n        this.status = RESOLVE\n        this.result = result\n      }\n    }\n    const reject = (reason) => {\n      if(this.status === PENDING){\n        this.status = REJECT\n        this.reason = reason\n      }\n    }\n    excution(resolve, reject)\n  }\n  then(onResolved, onRejected){\n    if(this.status === RESOLVE){\n      setTimeout(() => {\n        onResolved(this.result)\n      }, 0)\n    }\n    if(this.status === REJECT){\n      setTimeout(() => {\n        onRejected(this.reason)\n      }, 0)\n    }\n  }\n}\n```\n我们用 setTimeout 将其包裹一下，这不就变成异步了么，来，再让我们试试\n```js\nconst promise = new Mypromise((resolve, reject) => {\n  resolve('success')\n})\npromise.then(res => {\n  console.log(res)\n})\nconsole.log('end')\n// end  success\n```\nOK! No problem，我们解决了这个问题。\n\n开始切换下一个场景\n\n```js\nconst promise = new Mypromise((resolve, reject) => {\n  setTimeout(() => {\n    resolve('success')\n  },1000)\n})\npromise.then(res => {\n  console.log(res)\n}, err => {})\n```\n嗯？纳尼，怎么什么都没有输出呀，不是应该在1s之后输出 success 么，和我们想的不一样，好吧，让我们来康康我们实现的代码，分析一下。。。。\n\n我们发现，在我们执行 then 方法时，此时的状态还是 pending，因为在我们创建实例的时候写了一个异步的方法，所以在没有执行这个方法前，状态都不会改变，一直是pending，而我们实现的 then 方法并没有判断状态为 pending 时的处理逻辑，所以什么都不会打印出来。\n\n那我们整理一下思路，这时我们可能需要一个订阅者模式，在状态改变时，我们再判断执行哪个回调。\n```js\nconst PENDING = 'pending'\nconst RESOLVE = 'resolve'\nconst REJECT = 'reject'\nclass Mypromise {\n  status = PENDING\n  result = undefined\n  reason = undefined\n  onResolvedArr = []\n  onRejectedArr = []\n  constructor(excution){\n    const resolve = (result) => {\n      if(this.status === PENDING){\n        this.status = RESOLVE\n        this.result = result\n        this.onResolvedArr.map(fn => fn())\n      }\n    }\n    const reject = (reason) => {\n      if(this.status === PENDING){\n        this.status = REJECT\n        this.reason = reason\n        this.onRejectedArr.map(fn => fn())\n      }\n    }\n    excution(resolve, reject)\n  }\n  then(onResolved, onRejected){\n    if(this.status === RESOLVE){\n      setTimeout(() => {\n        onResolved(this.result)\n      }, 0)\n    }\n    if(this.status === REJECT){\n      setTimeout(() => {\n        onRejected(this.reason)\n      }, 0)\n    }\n    if(this.status === PENDING){\n      this.onResolvedArr.push(() => {\n        onResolved(this.result)\n      })\n      this.onRejectedArr.push(() => {\n        onRejected(this.reason)\n      })\n    }\n  }\n}\n```\n我们增加两个数组 onResolved 和 onRejected ，在then方法中判断状态为 pending 时（为 pending 代表构造函数方法内是异步的），将事件分别添加到这两个数组中，等待状态改变时执行\n```js\nconst promise = new Mypromise((resolve, reject) => {\n  setTimeout(() => {\n    resolve('success')\n  },1000)\n})\npromise.then(res => {\n  console.log(res)\n}, err => {})\n\n// 过了1s后  success\n```\n官方的版本最大的优势就是在于 .then 的链式调用，就像这样\n```js\nconst promise = new Promise((resolve, reject) => {\n  resolve('success')\n})\npromise.then(res => {\n  console.log(res)\n  return '11111'\n}).then(res => {\n  console.log(res)\n})\n\n// success   11111\n```\n然鹅~~我们并不支持，因为我们的 then 方法是没有返回值的，返回是 undefined，所以我们可以让 then 返回一个 Mypromise 对象，这样我们就可以继续调用 then 方法了，我们看一下 then 方法的改写\n```js\nthen(onResolved, onRejected){\n  const newPromise = new Mypromise((resolve, reject) => {\n    if(this.status === RESOLVE){\n      setTimeout(() => {\n        onResolved(this.result)\n      }, 0)\n    }\n    if(this.status === REJECT){\n      setTimeout(() => {\n        onRejected(this.reason)\n      }, 0)\n    }\n    if(this.status === PENDING){\n      this.onResolvedArr.push(() => {\n        onResolved(this.result)\n      })\n      this.onRejectedArr.push(() => {\n        onRejected(this.reason)\n      })\n    }\n  })\n  return newPromise\n}\n```\n这样我们虽然在写 .then 的链式调用不会报错了，但是，resolve 和 reject 一直都没有执行，我们需要一个函数来解决这个问题。\n```js\nconst PENDING = 'pending'\nconst RESOLVE = 'resolve'\nconst REJECT = 'reject'\nconst handlePromise = (result, newPromise, resolve, reject) => {\n  if(result === newPromise){ // 如果直接将 then 的返回值返回没有任何意义\n    throw new Error('can not return oneself')\n  }\n  if((typeof result === 'object' && result !== null) || typeof result === 'function'){ // 判断是否为一个promise构造函数，或者其实例\n    const then  = result.then // 是否具有 then 方法\n    if(typeof then === 'function'){ // 确定是一个 promise 类型的值\n      then.call( // 执行这个then方法，并传参\n        result,\n        r => {\n          handlePromise(r, newPromise, resolve, reject) // 直到不是一个promise的值\n        },\n        e => {\n          reject(e) // 失败直接reject就可以了\n        })\n    }else{\n      resolve(then) // 没有 then 方法，那就不会用链式调用，直接作为参数即可\n    }\n  }else{\n    resolve(result) // 是一个类似 '123' 这样的常量，直接作为参数即可\n  }\n}\nclass Mypromise {\n  status = PENDING\n  result = undefined\n  reason = undefined\n  onResolvedArr = []\n  onRejectedArr = []\n  constructor(excution){\n    const resolve = (result) => {\n      if(this.status === PENDING){\n        this.status = RESOLVE\n        this.result = result\n        this.onResolvedArr.map(fn => fn())\n      }\n    }\n    const reject = (reason) => {\n      if(this.status === PENDING){\n        this.status = REJECT\n        this.reason = reason\n        this.onRejectedArr.map(fn => fn())\n      }\n    }\n    excution(resolve, reject)\n  }\n  then(onResolved, onRejected){\n    const newPromise = new Mypromise((resolve, reject) => {\n      if(this.status === RESOLVE){\n        setTimeout(() => {\n          const result = onResolved(this.result) // result 接收执行后的结果\n          handlePromise(result, newPromise, resolve, reject) // 执行这个方法，将结果，和调用then返回的promise对象，成功函数以及失败函数作为参数传进去。\n        }, 0)\n      }\n      if(this.status === REJECT){\n        setTimeout(() => {\n          const result = onRejected(this.reason) // 同理\n          handlePromise(result, newPromise, resolve, reject) // 同理\n        }, 0)\n      }\n      if(this.status === PENDING){\n        this.onResolvedArr.push(() => {\n          const result = onResolved(this.result) // 同理\n          handlePromise(result, newPromise, resolve, reject) // 同理\n        })\n        this.onRejectedArr.push(() => {\n          const result = onRejected(this.reason) // 同理\n          handlePromise(result, newPromise, resolve, reject) // 同理\n        })\n      }\n    }\n    return newPromise\n  }\n}\n```\n- 我们先用一个常量 result 来接收第一次调用 then 的返回值\n\n- 定义一个方法 handlePromise，给这个方法传入 result newPromise resolve reject\n\n- 在方法中我们判断一下 result 和 newPromise 是否相等，在原生的 Promise 中是不可以将自身返回的，这样没有什么意义，所以我们判断两者若相等，就会报错\n\n- 继续判断一下这个 result 是否为一个 promise 类型的值，也就是是否为一个对象或者函数\n\n- 如果上一步判断为 true，那么我们继续判断是否有 then 这个方法；如果上一步判断为false，说明这个 result 是一个常量，那我们就直接执行 ```resolve(result)```，并将参数传进去。(处理假如 result 为 {then: '123'} )\n\n- 当我们确定 result 是一个 promise 时，我们就继续回调 handlePromise，直到它是一个确切的值，而不是 promise。\n\n到目前为止，我们的 promise 经完成大部分了，还需处理异常情况，我们用 try...catch... 来捕获各个阶段的错误\n\n```js\nconst PENDING = 'pending'\nconst RESOLVE = 'resolve'\nconst REJECT = 'reject'\nconst handlePromise = (result, newPromise, resolve, reject) => {\n  if(result === newPromise){\n    throw new Error('can not return oneself')\n  }\n  if((typeof result === 'object' && result !== null) || typeof result === 'function'){\n    let lock = false\n    try{\n      const then  = result.then\n      if(typeof then === 'function'){\n        then.call(\n          result,\n          r => {\n            if (lock) return\n            handlePromise(r, newPromise, resolve, reject)\n            lock = true\n          },\n          e => {\n            if (lock) return\n            reject(e)\n            lock = true\n          })\n      }else{\n        resolve(then)\n      }\n    }catch(error){\n      reject(error)\n    }\n  }else{\n    resolve(result)\n  }\n}\nclass Mypromise {\n  status = PENDING\n  result = undefined\n  reason = undefined\n  onResolvedArr = []\n  onRejectedArr = []\n  constructor(excution){\n    const resolve = (result) => {\n      if(this.status === PENDING){\n        this.status = RESOLVE\n        this.result = result\n        this.onResolvedArr.map(fn => fn())\n      }\n    }\n    const reject = (reason) => {\n      if(this.status === PENDING){\n        this.status = REJECT\n        this.reason = reason\n        this.onRejectedArr.map(fn => fn())\n      }\n    }\n    try{\n      excution(resolve, reject)\n    }catch(error){\n      reject(error)\n    }\n  }\n  then(onResolved, onRejected){\n    const newPromise = new Mypromise((resolve, reject) => {\n      if(this.status === RESOLVE){\n        setTimeout(() => {\n          try{\n            const result = onResolved(this.result)\n            handlePromise(result, newPromise, resolve, reject)\n          }catch(error){\n            reject(error)\n          }\n        }, 0)\n      }\n      if(this.status === REJECT){\n        setTimeout(() => {\n          try{\n            const result = onRejected(this.reason)\n            handlePromise(result, newPromise, resolve, reject)\n          }catch(error){\n            reject(error)\n          }  \n        }, 0)\n      }\n      if(this.status === PENDING){\n        this.onResolvedArr.push(() => {\n          try{\n            const result = onResolved(this.result)\n            handlePromise(result, newPromise, resolve, reject)\n          }catch(error){\n            reject(error)\n          }\n        })\n        this.onRejectedArr.push(() => {\n          try{\n            const result = onRejected(this.reason)\n            handlePromise(result, newPromise, resolve, reject)\n          }catch(error){\n            reject(error)\n          }\n        })\n      }\n    }\n    return newPromise\n  }\n}\n```\n之后我们再实现一个catch方法\n```js\nconst PENDING = 'pending'\nconst RESOLVE = 'resolve'\nconst REJECT = 'reject'\nconst handlePromise = (result, newPromise, resolve, reject) => {\n  if(result === newPromise){\n    throw new Error('can not return oneself')\n  }\n  if((typeof result === 'object' && result !== null) || typeof result === 'function'){\n    let lock = false\n    try{\n      const then  = result.then\n      if(typeof then === 'function'){\n        then.call(\n          result,\n          r => {\n            if (lock) return\n            handlePromise(r, newPromise, resolve, reject)\n            lock = true\n          },\n          e => {\n            if (lock) return\n            reject(e)\n            lock = true\n          })\n      }else{\n        resolve(then)\n      }\n    }catch(error){\n      reject(error)\n    }\n  }else{\n    resolve(result)\n  }\n}\nclass Mypromise {\n  status = PENDING\n  result = undefined\n  reason = undefined\n  onResolvedArr = []\n  onRejectedArr = []\n  constructor(excution){\n    const resolve = (result) => {\n      if(this.status === PENDING){\n        this.status = RESOLVE\n        this.result = result\n        this.onResolvedArr.map(fn => fn())\n      }\n    }\n    const reject = (reason) => {\n      if(this.status === PENDING){\n        this.status = REJECT\n        this.reason = reason\n        this.onRejectedArr.map(fn => fn())\n      }\n    }\n    try{\n      excution(resolve, reject)\n    }catch(error){\n      reject(error)\n    }\n  }\n  then(onResolved, onRejected){\n    onResolved = typeof onResolved === 'function'? onResolved : data => data\n    onRejected = typeof onRejected === 'function'? onRejected : err => {\n      throw new Error(err)\n    }\n    const newPromise = new Mypromise((resolve, reject) => {\n      if(this.status === RESOLVE){\n        setTimeout(() => {\n          try{\n            const result = onResolved(this.result)\n            handlePromise(result, newPromise, resolve, reject)\n          }catch(error){\n            reject(error)\n          }\n        }, 0)\n      }\n      if(this.status === REJECT){\n        setTimeout(() => {\n          try{\n            const result = onRejected(this.reason)\n            handlePromise(result, newPromise, resolve, reject)\n          }catch(error){\n            reject(error)\n          }  \n        }, 0)\n      }\n      if(this.status === PENDING){\n        this.onResolvedArr.push(() => {\n          try{\n            const result = onResolved(this.result)\n            handlePromise(result, newPromise, resolve, reject)\n          }catch(error){\n            reject(error)\n          }\n        })\n        this.onRejectedArr.push(() => {\n          try{\n            const result = onRejected(this.reason)\n            handlePromise(result, newPromise, resolve, reject)\n          }catch(error){\n            reject(error)\n          }\n        })\n      }\n    })\n    return newPromise\n  }\n  catch(onRejected){\n    return this.then(undefined, onRejected)\n  }\n}\n```\ncatch 方法我们可以基于 then 方法来实现，第一个参数传 Undefined，但是这时我们还要在 then 方法中处理一下传参不是函数的情况\n\n现在让我们来测试一下\n```js\nconst promise = new Mypromise((resolve, reject) => {\n  setTimeout(() => {\n    resolve('啦啦啦')\n  }, 1000)\n})\npromise.then(res => {\n  console.log(res)\n  return '1111'\n}, err => {}).then(res => {\n  console.log(res)\n}, err => {})\nconsole.log(1234)\n\n// 1234   \"啦啦啦\"     \"1111\"\n```\n木有问题\n\n### 总结\n\n到目前为止，我们的代码就全部实现了，虽然代码量有点多，但是只要我们一步一步分析，其实也不是很难。\n","source":"_posts/promise.md","raw":"---\ntitle: 深入理解promise\ndate: 2020-11-04 16:13:48\ntags: JS\ncategories:\n- JS基础\n---\n### 背景\n\n&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;由于 JS 是单线程执行的，这就导致我们有些处理不得不使用异步执行的方式，比如请求数据啦，浏览器的一些方法啦等等。这就会导致一种场景存在，如果我们接下来的逻辑需要依赖异步执行后的结果怎么办？在过去，我们通常会用回调函数的方法来解决，就像下面这个例子\n```js\nrequest.onreadystatechange = function () {\n    if (request.readyState === 4) {\n        if (request.status === 200) {\n            return success(request.responseText);\n        } else {\n            return fail(request.status);\n        }\n    }\n}\n```\n&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;假如我们有多个请求都是依赖关系，那么就会导致一个回调函数内嵌套另一个回调函数，这样的代码看起来真的不是很好理解，也不利于后期代码的维护😖。\n```js\n// 类似这样，回调地狱，想想都可怕\najax(url, () => {\n    // 处理逻辑\n    ajax(url1, () => {\n        // 处理逻辑\n        ajax(url2, () => {\n            // 处理逻辑\n        })\n    })\n})\n```\n&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;为了解决这个问题，Promise 就诞生了👏🏻👏🏻👏🏻，它是 ES6 中的语法，有了它我们就再也不用写这种恶心的回调地狱式代码。\n\n### 初识Promise\n\n&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;promise 翻译成中文是允诺，许诺的意思，我们可以理解为允诺在未来的某一个时刻会有一个确切的答复，并且这个允诺有三种状态，分别是：\n- 等待中（pending）\n- 完成了（resolved）\n- 拒绝了（rejected）\n\n一旦从等待状态转变为其它状态就不能再改变了。\n```js\nnew Promise((resolve, reject) => {\n  resolve('success')\n  reject('fail') // 无效，已经变成 resolved 状态\n})\n```\nPromise 构造函数内部的代码是立即执行的。\n```js\nnew Promise((resolve) => {\n  console.log('start')\n  resolve('success')\n})\nconsole.log('end')\n\n// start  end\n```\nPromise 实现了链式调用，每次调用 then 之后都会返回一个全新的 Promise，在 then 中如果使用了 return , return 中的值就会被 Promise.resolve() 包裹。\n```js\nnew Promise((resolve) => {\n  resolve('success')\n}).then(res => {\n  console.log(res)\n  return '111'\n}).then(res => {\n  console.log(res)\n})\n// success    111\n```\n下面让我们来看看 Promise 如何解决回调地狱的问题吧。\n```js\najax(url)\n  .then(res => {\n      console.log(res)\n      return ajax(url1)\n  }).then(res => {\n      console.log(res)\n      return ajax(url2)\n  }).then(res => console.log(res))\n```\n&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp; 现在，你是否对 Promise 有一个大体的了解了呢，Promise 还有其它一些好用的 API，在这里我就不一一的详述啦，大家可以去看一下 MDN 官方的[文档](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise)，或者也可以看一下[廖雪峰的博客](https://www.liaoxuefeng.com/wiki/1022910821149312/1023024413276544)进行深入的了解。最后附上一张官方的图片，这张图将 Promise 解释的淋漓尽致。\n![](./promise/promise.png)\n\n### 进阶Promise\n&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;当然，有追求的我们怎能单单的仅限于如何使用的层面呢🙄，接下来我们就要大展身手实现一个盗版的 Promise😏。\n```js\nconst promise = new Promise((resolve, reject) => {\n  resolve('success')\n})\npromise.then((res)=>{\n  console.log(res)\n},(err)=> {\n  console.log(err)\n})\n```\n上面的这段代码是我们正常的一个 promise 调用。\n- 我们先创建了一个 Promise 实例。\n\n- 给这个实例传进了一个函数数据类型的参数，这个函数参数是同步的，会直接运行，并且这个函数也接收了两个函数作为参数，分别代表 成功时候执行的回调 和 失败的时候执行的回调。\n\n- 我们在构造函数中执行了这个成功的回调，并且传进了一个字符串作为参数\n\n- 之后呢我们调用了 then，这个 then 方法接收了两个函数数据类型的参数，一个代表成功的回调，一个代表失败的回调，我们会根据调用了 resolve 还是 reject 来执行对应的回调。\n\n- 在这里呢，我们执行了 resolve 回调，并传进了一个参数，我们将这个参数成功的打印出来啦。\n\n- 结束。。。\n\n到现在我们一步步分析完了，废话不多说，我们来一步步的实现吧💪🏻。\n\n首先我们来创建一个 Mypromise 构造函数\n```js\nclass Mypromise{\n  constructor(){}\n}\n```\n哈哈，创建好啦，没错，就是这么简单。\n现在我们按照步骤，应该给这个构造函数传参，还是一个函数数据类型的参数，并且要直接运行。\n```js\nclass Mypromise{\n  constructor(excution){\n    excution(resolve, reject)\n  }\n}\n```\n此时，我们发现这里的 resolve 和 reject 这两个函数参数并没有定义，所以我们要定义一下，并且还要定义三种状态的常量，初始化的状态为pending。\n```js\nconst PENDING = 'pending'\nconst RESOLVE = 'resolve'\nconst REJECT = 'reject'\nclass Mypromise{\n  status = PENDING\n  result = undefined\n  reason = undefined\n  constructor(excution){\n    const resolve = (result) => {\n      if(this.status = PENDING){\n        this.status = RESOLVE\n        this.result = result\n      }\n    }\n    const reject = (reason) => {\n      if(this.status = PENDING){\n        this.status = REJECT\n        this.reason = reason\n      }\n    }\n    excution(resolve, reject)\n  }\n}\n```\n在这一步我们还顺便把 成功 和 失败 的回调函数传参给实现了，相当于```result('success')```。因为 Promise 只有在状态为 pending 时才会改变状态，执行 resolve 和 reject 回调时我们的状态会改变，并且将参数存起来。\n\n之后我们就要开始实现 then 函数啦，接收两个函数数据类型的参数，判断状态不为 pending 时，分别执行对应的函数。\n```js\nconst PENDING = 'pending'\nconst RESOLVE = 'resolve'\nconst REJECT = 'reject'\nclass Mypromise{\n  status = PENDING\n  result = undefined\n  reason = undefined\n  constructor(excution){\n    const resolve = (result) => {\n      if(this.status === PENDING){\n        this.status = RESOLVE\n        this.result = result\n      }\n    }\n    const reject = (reason) => {\n      if(this.status === PENDING){\n        this.status = REJECT\n        this.reason = reason\n      }\n    }\n    excution(resolve, reject)\n  }\n  then(onResolved, onRejected){\n    if(this.status === RESOLVE){\n      onResolved(this.result)\n    }\n    if(this.status === REJECT){\n      onRejected(this.reason)\n    }\n  }\n}\n```\n现在，让我们来试一下我们初见雏形的 promise 吧\n```js\nconst promise = new Mypromise((resolve, reject) => {\n    resolve('success')\n})\npromise.then(res => {\n    console.log(res)\n}, err => {})\n\n// success\n```\n没问题，到目前为止，我么已经实现了一个基本的 promise 啦，哈哈哈，激动不😎，来，我们继续发现问题，解决问题。\n\n看一下这个例子\n```js\nconst promise = new Promise((resolve, reject) => {\n  resolve('success')\n})\npromise.then(res => {\n  console.log(res)\n})\nconsole.log('end')\n// end success\n```\n```js\nconst promise = new Mypromise((resolve, reject) => {\n  resolve('success')\n})\npromise.then(res => {\n  console.log(res)\n})\nconsole.log('end')\n// success end\n```\n细心的同学会发现，我们盗版 Mypromise 得到结果的顺序和正版的结果顺序不太一样诶，让我们来分析一下。\n\n看过文档的同学应该已经知道了，因为then方法是异步执行的，而我们现在实现的是同步的，所以会从上到下正常输出，那么我们来解决这个问题吧。\n\n```js\nconst PENDING = 'pending'\nconst RESOLVE = 'resolve'\nconst REJECT = 'reject'\nclass Mypromise{\n  status = PENDING\n  result = undefined\n  reason = undefined\n  constructor(excution){\n    const resolve = (result) => {\n      if(this.status === PENDING){\n        this.status = RESOLVE\n        this.result = result\n      }\n    }\n    const reject = (reason) => {\n      if(this.status === PENDING){\n        this.status = REJECT\n        this.reason = reason\n      }\n    }\n    excution(resolve, reject)\n  }\n  then(onResolved, onRejected){\n    if(this.status === RESOLVE){\n      setTimeout(() => {\n        onResolved(this.result)\n      }, 0)\n    }\n    if(this.status === REJECT){\n      setTimeout(() => {\n        onRejected(this.reason)\n      }, 0)\n    }\n  }\n}\n```\n我们用 setTimeout 将其包裹一下，这不就变成异步了么，来，再让我们试试\n```js\nconst promise = new Mypromise((resolve, reject) => {\n  resolve('success')\n})\npromise.then(res => {\n  console.log(res)\n})\nconsole.log('end')\n// end  success\n```\nOK! No problem，我们解决了这个问题。\n\n开始切换下一个场景\n\n```js\nconst promise = new Mypromise((resolve, reject) => {\n  setTimeout(() => {\n    resolve('success')\n  },1000)\n})\npromise.then(res => {\n  console.log(res)\n}, err => {})\n```\n嗯？纳尼，怎么什么都没有输出呀，不是应该在1s之后输出 success 么，和我们想的不一样，好吧，让我们来康康我们实现的代码，分析一下。。。。\n\n我们发现，在我们执行 then 方法时，此时的状态还是 pending，因为在我们创建实例的时候写了一个异步的方法，所以在没有执行这个方法前，状态都不会改变，一直是pending，而我们实现的 then 方法并没有判断状态为 pending 时的处理逻辑，所以什么都不会打印出来。\n\n那我们整理一下思路，这时我们可能需要一个订阅者模式，在状态改变时，我们再判断执行哪个回调。\n```js\nconst PENDING = 'pending'\nconst RESOLVE = 'resolve'\nconst REJECT = 'reject'\nclass Mypromise {\n  status = PENDING\n  result = undefined\n  reason = undefined\n  onResolvedArr = []\n  onRejectedArr = []\n  constructor(excution){\n    const resolve = (result) => {\n      if(this.status === PENDING){\n        this.status = RESOLVE\n        this.result = result\n        this.onResolvedArr.map(fn => fn())\n      }\n    }\n    const reject = (reason) => {\n      if(this.status === PENDING){\n        this.status = REJECT\n        this.reason = reason\n        this.onRejectedArr.map(fn => fn())\n      }\n    }\n    excution(resolve, reject)\n  }\n  then(onResolved, onRejected){\n    if(this.status === RESOLVE){\n      setTimeout(() => {\n        onResolved(this.result)\n      }, 0)\n    }\n    if(this.status === REJECT){\n      setTimeout(() => {\n        onRejected(this.reason)\n      }, 0)\n    }\n    if(this.status === PENDING){\n      this.onResolvedArr.push(() => {\n        onResolved(this.result)\n      })\n      this.onRejectedArr.push(() => {\n        onRejected(this.reason)\n      })\n    }\n  }\n}\n```\n我们增加两个数组 onResolved 和 onRejected ，在then方法中判断状态为 pending 时（为 pending 代表构造函数方法内是异步的），将事件分别添加到这两个数组中，等待状态改变时执行\n```js\nconst promise = new Mypromise((resolve, reject) => {\n  setTimeout(() => {\n    resolve('success')\n  },1000)\n})\npromise.then(res => {\n  console.log(res)\n}, err => {})\n\n// 过了1s后  success\n```\n官方的版本最大的优势就是在于 .then 的链式调用，就像这样\n```js\nconst promise = new Promise((resolve, reject) => {\n  resolve('success')\n})\npromise.then(res => {\n  console.log(res)\n  return '11111'\n}).then(res => {\n  console.log(res)\n})\n\n// success   11111\n```\n然鹅~~我们并不支持，因为我们的 then 方法是没有返回值的，返回是 undefined，所以我们可以让 then 返回一个 Mypromise 对象，这样我们就可以继续调用 then 方法了，我们看一下 then 方法的改写\n```js\nthen(onResolved, onRejected){\n  const newPromise = new Mypromise((resolve, reject) => {\n    if(this.status === RESOLVE){\n      setTimeout(() => {\n        onResolved(this.result)\n      }, 0)\n    }\n    if(this.status === REJECT){\n      setTimeout(() => {\n        onRejected(this.reason)\n      }, 0)\n    }\n    if(this.status === PENDING){\n      this.onResolvedArr.push(() => {\n        onResolved(this.result)\n      })\n      this.onRejectedArr.push(() => {\n        onRejected(this.reason)\n      })\n    }\n  })\n  return newPromise\n}\n```\n这样我们虽然在写 .then 的链式调用不会报错了，但是，resolve 和 reject 一直都没有执行，我们需要一个函数来解决这个问题。\n```js\nconst PENDING = 'pending'\nconst RESOLVE = 'resolve'\nconst REJECT = 'reject'\nconst handlePromise = (result, newPromise, resolve, reject) => {\n  if(result === newPromise){ // 如果直接将 then 的返回值返回没有任何意义\n    throw new Error('can not return oneself')\n  }\n  if((typeof result === 'object' && result !== null) || typeof result === 'function'){ // 判断是否为一个promise构造函数，或者其实例\n    const then  = result.then // 是否具有 then 方法\n    if(typeof then === 'function'){ // 确定是一个 promise 类型的值\n      then.call( // 执行这个then方法，并传参\n        result,\n        r => {\n          handlePromise(r, newPromise, resolve, reject) // 直到不是一个promise的值\n        },\n        e => {\n          reject(e) // 失败直接reject就可以了\n        })\n    }else{\n      resolve(then) // 没有 then 方法，那就不会用链式调用，直接作为参数即可\n    }\n  }else{\n    resolve(result) // 是一个类似 '123' 这样的常量，直接作为参数即可\n  }\n}\nclass Mypromise {\n  status = PENDING\n  result = undefined\n  reason = undefined\n  onResolvedArr = []\n  onRejectedArr = []\n  constructor(excution){\n    const resolve = (result) => {\n      if(this.status === PENDING){\n        this.status = RESOLVE\n        this.result = result\n        this.onResolvedArr.map(fn => fn())\n      }\n    }\n    const reject = (reason) => {\n      if(this.status === PENDING){\n        this.status = REJECT\n        this.reason = reason\n        this.onRejectedArr.map(fn => fn())\n      }\n    }\n    excution(resolve, reject)\n  }\n  then(onResolved, onRejected){\n    const newPromise = new Mypromise((resolve, reject) => {\n      if(this.status === RESOLVE){\n        setTimeout(() => {\n          const result = onResolved(this.result) // result 接收执行后的结果\n          handlePromise(result, newPromise, resolve, reject) // 执行这个方法，将结果，和调用then返回的promise对象，成功函数以及失败函数作为参数传进去。\n        }, 0)\n      }\n      if(this.status === REJECT){\n        setTimeout(() => {\n          const result = onRejected(this.reason) // 同理\n          handlePromise(result, newPromise, resolve, reject) // 同理\n        }, 0)\n      }\n      if(this.status === PENDING){\n        this.onResolvedArr.push(() => {\n          const result = onResolved(this.result) // 同理\n          handlePromise(result, newPromise, resolve, reject) // 同理\n        })\n        this.onRejectedArr.push(() => {\n          const result = onRejected(this.reason) // 同理\n          handlePromise(result, newPromise, resolve, reject) // 同理\n        })\n      }\n    }\n    return newPromise\n  }\n}\n```\n- 我们先用一个常量 result 来接收第一次调用 then 的返回值\n\n- 定义一个方法 handlePromise，给这个方法传入 result newPromise resolve reject\n\n- 在方法中我们判断一下 result 和 newPromise 是否相等，在原生的 Promise 中是不可以将自身返回的，这样没有什么意义，所以我们判断两者若相等，就会报错\n\n- 继续判断一下这个 result 是否为一个 promise 类型的值，也就是是否为一个对象或者函数\n\n- 如果上一步判断为 true，那么我们继续判断是否有 then 这个方法；如果上一步判断为false，说明这个 result 是一个常量，那我们就直接执行 ```resolve(result)```，并将参数传进去。(处理假如 result 为 {then: '123'} )\n\n- 当我们确定 result 是一个 promise 时，我们就继续回调 handlePromise，直到它是一个确切的值，而不是 promise。\n\n到目前为止，我们的 promise 经完成大部分了，还需处理异常情况，我们用 try...catch... 来捕获各个阶段的错误\n\n```js\nconst PENDING = 'pending'\nconst RESOLVE = 'resolve'\nconst REJECT = 'reject'\nconst handlePromise = (result, newPromise, resolve, reject) => {\n  if(result === newPromise){\n    throw new Error('can not return oneself')\n  }\n  if((typeof result === 'object' && result !== null) || typeof result === 'function'){\n    let lock = false\n    try{\n      const then  = result.then\n      if(typeof then === 'function'){\n        then.call(\n          result,\n          r => {\n            if (lock) return\n            handlePromise(r, newPromise, resolve, reject)\n            lock = true\n          },\n          e => {\n            if (lock) return\n            reject(e)\n            lock = true\n          })\n      }else{\n        resolve(then)\n      }\n    }catch(error){\n      reject(error)\n    }\n  }else{\n    resolve(result)\n  }\n}\nclass Mypromise {\n  status = PENDING\n  result = undefined\n  reason = undefined\n  onResolvedArr = []\n  onRejectedArr = []\n  constructor(excution){\n    const resolve = (result) => {\n      if(this.status === PENDING){\n        this.status = RESOLVE\n        this.result = result\n        this.onResolvedArr.map(fn => fn())\n      }\n    }\n    const reject = (reason) => {\n      if(this.status === PENDING){\n        this.status = REJECT\n        this.reason = reason\n        this.onRejectedArr.map(fn => fn())\n      }\n    }\n    try{\n      excution(resolve, reject)\n    }catch(error){\n      reject(error)\n    }\n  }\n  then(onResolved, onRejected){\n    const newPromise = new Mypromise((resolve, reject) => {\n      if(this.status === RESOLVE){\n        setTimeout(() => {\n          try{\n            const result = onResolved(this.result)\n            handlePromise(result, newPromise, resolve, reject)\n          }catch(error){\n            reject(error)\n          }\n        }, 0)\n      }\n      if(this.status === REJECT){\n        setTimeout(() => {\n          try{\n            const result = onRejected(this.reason)\n            handlePromise(result, newPromise, resolve, reject)\n          }catch(error){\n            reject(error)\n          }  \n        }, 0)\n      }\n      if(this.status === PENDING){\n        this.onResolvedArr.push(() => {\n          try{\n            const result = onResolved(this.result)\n            handlePromise(result, newPromise, resolve, reject)\n          }catch(error){\n            reject(error)\n          }\n        })\n        this.onRejectedArr.push(() => {\n          try{\n            const result = onRejected(this.reason)\n            handlePromise(result, newPromise, resolve, reject)\n          }catch(error){\n            reject(error)\n          }\n        })\n      }\n    }\n    return newPromise\n  }\n}\n```\n之后我们再实现一个catch方法\n```js\nconst PENDING = 'pending'\nconst RESOLVE = 'resolve'\nconst REJECT = 'reject'\nconst handlePromise = (result, newPromise, resolve, reject) => {\n  if(result === newPromise){\n    throw new Error('can not return oneself')\n  }\n  if((typeof result === 'object' && result !== null) || typeof result === 'function'){\n    let lock = false\n    try{\n      const then  = result.then\n      if(typeof then === 'function'){\n        then.call(\n          result,\n          r => {\n            if (lock) return\n            handlePromise(r, newPromise, resolve, reject)\n            lock = true\n          },\n          e => {\n            if (lock) return\n            reject(e)\n            lock = true\n          })\n      }else{\n        resolve(then)\n      }\n    }catch(error){\n      reject(error)\n    }\n  }else{\n    resolve(result)\n  }\n}\nclass Mypromise {\n  status = PENDING\n  result = undefined\n  reason = undefined\n  onResolvedArr = []\n  onRejectedArr = []\n  constructor(excution){\n    const resolve = (result) => {\n      if(this.status === PENDING){\n        this.status = RESOLVE\n        this.result = result\n        this.onResolvedArr.map(fn => fn())\n      }\n    }\n    const reject = (reason) => {\n      if(this.status === PENDING){\n        this.status = REJECT\n        this.reason = reason\n        this.onRejectedArr.map(fn => fn())\n      }\n    }\n    try{\n      excution(resolve, reject)\n    }catch(error){\n      reject(error)\n    }\n  }\n  then(onResolved, onRejected){\n    onResolved = typeof onResolved === 'function'? onResolved : data => data\n    onRejected = typeof onRejected === 'function'? onRejected : err => {\n      throw new Error(err)\n    }\n    const newPromise = new Mypromise((resolve, reject) => {\n      if(this.status === RESOLVE){\n        setTimeout(() => {\n          try{\n            const result = onResolved(this.result)\n            handlePromise(result, newPromise, resolve, reject)\n          }catch(error){\n            reject(error)\n          }\n        }, 0)\n      }\n      if(this.status === REJECT){\n        setTimeout(() => {\n          try{\n            const result = onRejected(this.reason)\n            handlePromise(result, newPromise, resolve, reject)\n          }catch(error){\n            reject(error)\n          }  \n        }, 0)\n      }\n      if(this.status === PENDING){\n        this.onResolvedArr.push(() => {\n          try{\n            const result = onResolved(this.result)\n            handlePromise(result, newPromise, resolve, reject)\n          }catch(error){\n            reject(error)\n          }\n        })\n        this.onRejectedArr.push(() => {\n          try{\n            const result = onRejected(this.reason)\n            handlePromise(result, newPromise, resolve, reject)\n          }catch(error){\n            reject(error)\n          }\n        })\n      }\n    })\n    return newPromise\n  }\n  catch(onRejected){\n    return this.then(undefined, onRejected)\n  }\n}\n```\ncatch 方法我们可以基于 then 方法来实现，第一个参数传 Undefined，但是这时我们还要在 then 方法中处理一下传参不是函数的情况\n\n现在让我们来测试一下\n```js\nconst promise = new Mypromise((resolve, reject) => {\n  setTimeout(() => {\n    resolve('啦啦啦')\n  }, 1000)\n})\npromise.then(res => {\n  console.log(res)\n  return '1111'\n}, err => {}).then(res => {\n  console.log(res)\n}, err => {})\nconsole.log(1234)\n\n// 1234   \"啦啦啦\"     \"1111\"\n```\n木有问题\n\n### 总结\n\n到目前为止，我们的代码就全部实现了，虽然代码量有点多，但是只要我们一步一步分析，其实也不是很难。\n","slug":"promise","published":1,"updated":"2020-11-05T03:59:02.921Z","_id":"ckh35fe8b0000g3ol3hzvcox8","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h3><p>&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;由于 JS 是单线程执行的，这就导致我们有些处理不得不使用异步执行的方式，比如请求数据啦，浏览器的一些方法啦等等。这就会导致一种场景存在，如果我们接下来的逻辑需要依赖异步执行后的结果怎么办？在过去，我们通常会用回调函数的方法来解决，就像下面这个例子</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">request.onreadystatechange = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>&#123;<br>    <span class=\"hljs-keyword\">if</span> (request.readyState === <span class=\"hljs-number\">4</span>) &#123;<br>        <span class=\"hljs-keyword\">if</span> (request.status === <span class=\"hljs-number\">200</span>) &#123;<br>            <span class=\"hljs-keyword\">return</span> success(request.responseText);<br>        &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>            <span class=\"hljs-keyword\">return</span> fail(request.status);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;假如我们有多个请求都是依赖关系，那么就会导致一个回调函数内嵌套另一个回调函数，这样的代码看起来真的不是很好理解，也不利于后期代码的维护😖。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// 类似这样，回调地狱，想想都可怕</span><br>ajax(url, () =&gt; &#123;<br>    <span class=\"hljs-comment\">// 处理逻辑</span><br>    ajax(url1, () =&gt; &#123;<br>        <span class=\"hljs-comment\">// 处理逻辑</span><br>        ajax(url2, () =&gt; &#123;<br>            <span class=\"hljs-comment\">// 处理逻辑</span><br>        &#125;)<br>    &#125;)<br>&#125;)<br></code></pre></td></tr></table></figure>\n<p>&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;为了解决这个问题，Promise 就诞生了👏🏻👏🏻👏🏻，它是 ES6 中的语法，有了它我们就再也不用写这种恶心的回调地狱式代码。</p>\n<h3 id=\"初识Promise\"><a href=\"#初识Promise\" class=\"headerlink\" title=\"初识Promise\"></a>初识Promise</h3><p>&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;promise 翻译成中文是允诺，许诺的意思，我们可以理解为允诺在未来的某一个时刻会有一个确切的答复，并且这个允诺有三种状态，分别是：</p>\n<ul>\n<li>等待中（pending）</li>\n<li>完成了（resolved）</li>\n<li>拒绝了（rejected）</li>\n</ul>\n<p>一旦从等待状态转变为其它状态就不能再改变了。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve, reject</span>) =&gt;</span> &#123;<br>  resolve(<span class=\"hljs-string\">'success'</span>)<br>  reject(<span class=\"hljs-string\">'fail'</span>) <span class=\"hljs-comment\">// 无效，已经变成 resolved 状态</span><br>&#125;)<br></code></pre></td></tr></table></figure>\n<p>Promise 构造函数内部的代码是立即执行的。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve</span>) =&gt;</span> &#123;<br>  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'start'</span>)<br>  resolve(<span class=\"hljs-string\">'success'</span>)<br>&#125;)<br><span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'end'</span>)<br><br><span class=\"hljs-comment\">// start  end</span><br></code></pre></td></tr></table></figure>\n<p>Promise 实现了链式调用，每次调用 then 之后都会返回一个全新的 Promise，在 then 中如果使用了 return , return 中的值就会被 Promise.resolve() 包裹。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve</span>) =&gt;</span> &#123;<br>  resolve(<span class=\"hljs-string\">'success'</span>)<br>&#125;).then(<span class=\"hljs-function\"><span class=\"hljs-params\">res</span> =&gt;</span> &#123;<br>  <span class=\"hljs-built_in\">console</span>.log(res)<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">'111'</span><br>&#125;).then(<span class=\"hljs-function\"><span class=\"hljs-params\">res</span> =&gt;</span> &#123;<br>  <span class=\"hljs-built_in\">console</span>.log(res)<br>&#125;)<br><span class=\"hljs-comment\">// success    111</span><br></code></pre></td></tr></table></figure>\n<p>下面让我们来看看 Promise 如何解决回调地狱的问题吧。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">ajax(url)<br>  .then(<span class=\"hljs-function\"><span class=\"hljs-params\">res</span> =&gt;</span> &#123;<br>      <span class=\"hljs-built_in\">console</span>.log(res)<br>      <span class=\"hljs-keyword\">return</span> ajax(url1)<br>  &#125;).then(<span class=\"hljs-function\"><span class=\"hljs-params\">res</span> =&gt;</span> &#123;<br>      <span class=\"hljs-built_in\">console</span>.log(res)<br>      <span class=\"hljs-keyword\">return</span> ajax(url2)<br>  &#125;).then(<span class=\"hljs-function\"><span class=\"hljs-params\">res</span> =&gt;</span> <span class=\"hljs-built_in\">console</span>.log(res))<br></code></pre></td></tr></table></figure>\n<p>&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp; 现在，你是否对 Promise 有一个大体的了解了呢，Promise 还有其它一些好用的 API，在这里我就不一一的详述啦，大家可以去看一下 MDN 官方的<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise\" target=\"_blank\" rel=\"noopener\">文档</a>，或者也可以看一下<a href=\"https://www.liaoxuefeng.com/wiki/1022910821149312/1023024413276544\" target=\"_blank\" rel=\"noopener\">廖雪峰的博客</a>进行深入的了解。最后附上一张官方的图片，这张图将 Promise 解释的淋漓尽致。</p>\n<img src=\"/blog/2020/11/04/promise/promise.png\" class=\"\">\n\n<h3 id=\"进阶Promise\"><a href=\"#进阶Promise\" class=\"headerlink\" title=\"进阶Promise\"></a>进阶Promise</h3><p>&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;当然，有追求的我们怎能单单的仅限于如何使用的层面呢🙄，接下来我们就要大展身手实现一个盗版的 Promise😏。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> promise = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve, reject</span>) =&gt;</span> &#123;<br>  resolve(<span class=\"hljs-string\">'success'</span>)<br>&#125;)<br>promise.then(<span class=\"hljs-function\">(<span class=\"hljs-params\">res</span>)=&gt;</span>&#123;<br>  <span class=\"hljs-built_in\">console</span>.log(res)<br>&#125;,(err)=&gt; &#123;<br>  <span class=\"hljs-built_in\">console</span>.log(err)<br>&#125;)<br></code></pre></td></tr></table></figure>\n<p>上面的这段代码是我们正常的一个 promise 调用。</p>\n<ul>\n<li><p>我们先创建了一个 Promise 实例。</p>\n</li>\n<li><p>给这个实例传进了一个函数数据类型的参数，这个函数参数是同步的，会直接运行，并且这个函数也接收了两个函数作为参数，分别代表 成功时候执行的回调 和 失败的时候执行的回调。</p>\n</li>\n<li><p>我们在构造函数中执行了这个成功的回调，并且传进了一个字符串作为参数</p>\n</li>\n<li><p>之后呢我们调用了 then，这个 then 方法接收了两个函数数据类型的参数，一个代表成功的回调，一个代表失败的回调，我们会根据调用了 resolve 还是 reject 来执行对应的回调。</p>\n</li>\n<li><p>在这里呢，我们执行了 resolve 回调，并传进了一个参数，我们将这个参数成功的打印出来啦。</p>\n</li>\n<li><p>结束。。。</p>\n</li>\n</ul>\n<p>到现在我们一步步分析完了，废话不多说，我们来一步步的实现吧💪🏻。</p>\n<p>首先我们来创建一个 Mypromise 构造函数</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Mypromise</span></span>&#123;<br>  <span class=\"hljs-keyword\">constructor</span>()&#123;&#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>哈哈，创建好啦，没错，就是这么简单。<br>现在我们按照步骤，应该给这个构造函数传参，还是一个函数数据类型的参数，并且要直接运行。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Mypromise</span></span>&#123;<br>  <span class=\"hljs-keyword\">constructor</span>(excution)&#123;<br>    excution(resolve, reject)<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>此时，我们发现这里的 resolve 和 reject 这两个函数参数并没有定义，所以我们要定义一下，并且还要定义三种状态的常量，初始化的状态为pending。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> PENDING = <span class=\"hljs-string\">'pending'</span><br><span class=\"hljs-keyword\">const</span> RESOLVE = <span class=\"hljs-string\">'resolve'</span><br><span class=\"hljs-keyword\">const</span> REJECT = <span class=\"hljs-string\">'reject'</span><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Mypromise</span></span>&#123;<br>  status = PENDING<br>  result = <span class=\"hljs-literal\">undefined</span><br>  reason = <span class=\"hljs-literal\">undefined</span><br>  <span class=\"hljs-keyword\">constructor</span>(excution)&#123;<br>    <span class=\"hljs-keyword\">const</span> resolve = <span class=\"hljs-function\">(<span class=\"hljs-params\">result</span>) =&gt;</span> &#123;<br>      <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-keyword\">this</span>.status = PENDING)&#123;<br>        <span class=\"hljs-keyword\">this</span>.status = RESOLVE<br>        <span class=\"hljs-keyword\">this</span>.result = result<br>      &#125;<br>    &#125;<br>    <span class=\"hljs-keyword\">const</span> reject = <span class=\"hljs-function\">(<span class=\"hljs-params\">reason</span>) =&gt;</span> &#123;<br>      <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-keyword\">this</span>.status = PENDING)&#123;<br>        <span class=\"hljs-keyword\">this</span>.status = REJECT<br>        <span class=\"hljs-keyword\">this</span>.reason = reason<br>      &#125;<br>    &#125;<br>    excution(resolve, reject)<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>在这一步我们还顺便把 成功 和 失败 的回调函数传参给实现了，相当于<code>result(&#39;success&#39;)</code>。因为 Promise 只有在状态为 pending 时才会改变状态，执行 resolve 和 reject 回调时我们的状态会改变，并且将参数存起来。</p>\n<p>之后我们就要开始实现 then 函数啦，接收两个函数数据类型的参数，判断状态不为 pending 时，分别执行对应的函数。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> PENDING = <span class=\"hljs-string\">'pending'</span><br><span class=\"hljs-keyword\">const</span> RESOLVE = <span class=\"hljs-string\">'resolve'</span><br><span class=\"hljs-keyword\">const</span> REJECT = <span class=\"hljs-string\">'reject'</span><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Mypromise</span></span>&#123;<br>  status = PENDING<br>  result = <span class=\"hljs-literal\">undefined</span><br>  reason = <span class=\"hljs-literal\">undefined</span><br>  <span class=\"hljs-keyword\">constructor</span>(excution)&#123;<br>    <span class=\"hljs-keyword\">const</span> resolve = <span class=\"hljs-function\">(<span class=\"hljs-params\">result</span>) =&gt;</span> &#123;<br>      <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-keyword\">this</span>.status === PENDING)&#123;<br>        <span class=\"hljs-keyword\">this</span>.status = RESOLVE<br>        <span class=\"hljs-keyword\">this</span>.result = result<br>      &#125;<br>    &#125;<br>    <span class=\"hljs-keyword\">const</span> reject = <span class=\"hljs-function\">(<span class=\"hljs-params\">reason</span>) =&gt;</span> &#123;<br>      <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-keyword\">this</span>.status === PENDING)&#123;<br>        <span class=\"hljs-keyword\">this</span>.status = REJECT<br>        <span class=\"hljs-keyword\">this</span>.reason = reason<br>      &#125;<br>    &#125;<br>    excution(resolve, reject)<br>  &#125;<br>  then(onResolved, onRejected)&#123;<br>    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-keyword\">this</span>.status === RESOLVE)&#123;<br>      onResolved(<span class=\"hljs-keyword\">this</span>.result)<br>    &#125;<br>    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-keyword\">this</span>.status === REJECT)&#123;<br>      onRejected(<span class=\"hljs-keyword\">this</span>.reason)<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>现在，让我们来试一下我们初见雏形的 promise 吧</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> promise = <span class=\"hljs-keyword\">new</span> Mypromise(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve, reject</span>) =&gt;</span> &#123;<br>    resolve(<span class=\"hljs-string\">'success'</span>)<br>&#125;)<br>promise.then(<span class=\"hljs-function\"><span class=\"hljs-params\">res</span> =&gt;</span> &#123;<br>    <span class=\"hljs-built_in\">console</span>.log(res)<br>&#125;, err =&gt; &#123;&#125;)<br><br><span class=\"hljs-comment\">// success</span><br></code></pre></td></tr></table></figure>\n<p>没问题，到目前为止，我么已经实现了一个基本的 promise 啦，哈哈哈，激动不😎，来，我们继续发现问题，解决问题。</p>\n<p>看一下这个例子</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> promise = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve, reject</span>) =&gt;</span> &#123;<br>  resolve(<span class=\"hljs-string\">'success'</span>)<br>&#125;)<br>promise.then(<span class=\"hljs-function\"><span class=\"hljs-params\">res</span> =&gt;</span> &#123;<br>  <span class=\"hljs-built_in\">console</span>.log(res)<br>&#125;)<br><span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'end'</span>)<br><span class=\"hljs-comment\">// end success</span><br></code></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> promise = <span class=\"hljs-keyword\">new</span> Mypromise(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve, reject</span>) =&gt;</span> &#123;<br>  resolve(<span class=\"hljs-string\">'success'</span>)<br>&#125;)<br>promise.then(<span class=\"hljs-function\"><span class=\"hljs-params\">res</span> =&gt;</span> &#123;<br>  <span class=\"hljs-built_in\">console</span>.log(res)<br>&#125;)<br><span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'end'</span>)<br><span class=\"hljs-comment\">// success end</span><br></code></pre></td></tr></table></figure>\n<p>细心的同学会发现，我们盗版 Mypromise 得到结果的顺序和正版的结果顺序不太一样诶，让我们来分析一下。</p>\n<p>看过文档的同学应该已经知道了，因为then方法是异步执行的，而我们现在实现的是同步的，所以会从上到下正常输出，那么我们来解决这个问题吧。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> PENDING = <span class=\"hljs-string\">'pending'</span><br><span class=\"hljs-keyword\">const</span> RESOLVE = <span class=\"hljs-string\">'resolve'</span><br><span class=\"hljs-keyword\">const</span> REJECT = <span class=\"hljs-string\">'reject'</span><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Mypromise</span></span>&#123;<br>  status = PENDING<br>  result = <span class=\"hljs-literal\">undefined</span><br>  reason = <span class=\"hljs-literal\">undefined</span><br>  <span class=\"hljs-keyword\">constructor</span>(excution)&#123;<br>    <span class=\"hljs-keyword\">const</span> resolve = <span class=\"hljs-function\">(<span class=\"hljs-params\">result</span>) =&gt;</span> &#123;<br>      <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-keyword\">this</span>.status === PENDING)&#123;<br>        <span class=\"hljs-keyword\">this</span>.status = RESOLVE<br>        <span class=\"hljs-keyword\">this</span>.result = result<br>      &#125;<br>    &#125;<br>    <span class=\"hljs-keyword\">const</span> reject = <span class=\"hljs-function\">(<span class=\"hljs-params\">reason</span>) =&gt;</span> &#123;<br>      <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-keyword\">this</span>.status === PENDING)&#123;<br>        <span class=\"hljs-keyword\">this</span>.status = REJECT<br>        <span class=\"hljs-keyword\">this</span>.reason = reason<br>      &#125;<br>    &#125;<br>    excution(resolve, reject)<br>  &#125;<br>  then(onResolved, onRejected)&#123;<br>    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-keyword\">this</span>.status === RESOLVE)&#123;<br>      setTimeout(<span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> &#123;<br>        onResolved(<span class=\"hljs-keyword\">this</span>.result)<br>      &#125;, <span class=\"hljs-number\">0</span>)<br>    &#125;<br>    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-keyword\">this</span>.status === REJECT)&#123;<br>      setTimeout(<span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> &#123;<br>        onRejected(<span class=\"hljs-keyword\">this</span>.reason)<br>      &#125;, <span class=\"hljs-number\">0</span>)<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>我们用 setTimeout 将其包裹一下，这不就变成异步了么，来，再让我们试试</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> promise = <span class=\"hljs-keyword\">new</span> Mypromise(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve, reject</span>) =&gt;</span> &#123;<br>  resolve(<span class=\"hljs-string\">'success'</span>)<br>&#125;)<br>promise.then(<span class=\"hljs-function\"><span class=\"hljs-params\">res</span> =&gt;</span> &#123;<br>  <span class=\"hljs-built_in\">console</span>.log(res)<br>&#125;)<br><span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'end'</span>)<br><span class=\"hljs-comment\">// end  success</span><br></code></pre></td></tr></table></figure>\n<p>OK! No problem，我们解决了这个问题。</p>\n<p>开始切换下一个场景</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> promise = <span class=\"hljs-keyword\">new</span> Mypromise(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve, reject</span>) =&gt;</span> &#123;<br>  setTimeout(<span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> &#123;<br>    resolve(<span class=\"hljs-string\">'success'</span>)<br>  &#125;,<span class=\"hljs-number\">1000</span>)<br>&#125;)<br>promise.then(<span class=\"hljs-function\"><span class=\"hljs-params\">res</span> =&gt;</span> &#123;<br>  <span class=\"hljs-built_in\">console</span>.log(res)<br>&#125;, err =&gt; &#123;&#125;)<br></code></pre></td></tr></table></figure>\n<p>嗯？纳尼，怎么什么都没有输出呀，不是应该在1s之后输出 success 么，和我们想的不一样，好吧，让我们来康康我们实现的代码，分析一下。。。。</p>\n<p>我们发现，在我们执行 then 方法时，此时的状态还是 pending，因为在我们创建实例的时候写了一个异步的方法，所以在没有执行这个方法前，状态都不会改变，一直是pending，而我们实现的 then 方法并没有判断状态为 pending 时的处理逻辑，所以什么都不会打印出来。</p>\n<p>那我们整理一下思路，这时我们可能需要一个订阅者模式，在状态改变时，我们再判断执行哪个回调。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> PENDING = <span class=\"hljs-string\">'pending'</span><br><span class=\"hljs-keyword\">const</span> RESOLVE = <span class=\"hljs-string\">'resolve'</span><br><span class=\"hljs-keyword\">const</span> REJECT = <span class=\"hljs-string\">'reject'</span><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Mypromise</span> </span>&#123;<br>  status = PENDING<br>  result = <span class=\"hljs-literal\">undefined</span><br>  reason = <span class=\"hljs-literal\">undefined</span><br>  onResolvedArr = []<br>  onRejectedArr = []<br>  <span class=\"hljs-keyword\">constructor</span>(excution)&#123;<br>    <span class=\"hljs-keyword\">const</span> resolve = <span class=\"hljs-function\">(<span class=\"hljs-params\">result</span>) =&gt;</span> &#123;<br>      <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-keyword\">this</span>.status === PENDING)&#123;<br>        <span class=\"hljs-keyword\">this</span>.status = RESOLVE<br>        <span class=\"hljs-keyword\">this</span>.result = result<br>        <span class=\"hljs-keyword\">this</span>.onResolvedArr.map(<span class=\"hljs-function\"><span class=\"hljs-params\">fn</span> =&gt;</span> fn())<br>      &#125;<br>    &#125;<br>    <span class=\"hljs-keyword\">const</span> reject = <span class=\"hljs-function\">(<span class=\"hljs-params\">reason</span>) =&gt;</span> &#123;<br>      <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-keyword\">this</span>.status === PENDING)&#123;<br>        <span class=\"hljs-keyword\">this</span>.status = REJECT<br>        <span class=\"hljs-keyword\">this</span>.reason = reason<br>        <span class=\"hljs-keyword\">this</span>.onRejectedArr.map(<span class=\"hljs-function\"><span class=\"hljs-params\">fn</span> =&gt;</span> fn())<br>      &#125;<br>    &#125;<br>    excution(resolve, reject)<br>  &#125;<br>  then(onResolved, onRejected)&#123;<br>    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-keyword\">this</span>.status === RESOLVE)&#123;<br>      setTimeout(<span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> &#123;<br>        onResolved(<span class=\"hljs-keyword\">this</span>.result)<br>      &#125;, <span class=\"hljs-number\">0</span>)<br>    &#125;<br>    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-keyword\">this</span>.status === REJECT)&#123;<br>      setTimeout(<span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> &#123;<br>        onRejected(<span class=\"hljs-keyword\">this</span>.reason)<br>      &#125;, <span class=\"hljs-number\">0</span>)<br>    &#125;<br>    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-keyword\">this</span>.status === PENDING)&#123;<br>      <span class=\"hljs-keyword\">this</span>.onResolvedArr.push(<span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> &#123;<br>        onResolved(<span class=\"hljs-keyword\">this</span>.result)<br>      &#125;)<br>      <span class=\"hljs-keyword\">this</span>.onRejectedArr.push(<span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> &#123;<br>        onRejected(<span class=\"hljs-keyword\">this</span>.reason)<br>      &#125;)<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>我们增加两个数组 onResolved 和 onRejected ，在then方法中判断状态为 pending 时（为 pending 代表构造函数方法内是异步的），将事件分别添加到这两个数组中，等待状态改变时执行</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> promise = <span class=\"hljs-keyword\">new</span> Mypromise(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve, reject</span>) =&gt;</span> &#123;<br>  setTimeout(<span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> &#123;<br>    resolve(<span class=\"hljs-string\">'success'</span>)<br>  &#125;,<span class=\"hljs-number\">1000</span>)<br>&#125;)<br>promise.then(<span class=\"hljs-function\"><span class=\"hljs-params\">res</span> =&gt;</span> &#123;<br>  <span class=\"hljs-built_in\">console</span>.log(res)<br>&#125;, err =&gt; &#123;&#125;)<br><br><span class=\"hljs-comment\">// 过了1s后  success</span><br></code></pre></td></tr></table></figure>\n<p>官方的版本最大的优势就是在于 .then 的链式调用，就像这样</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> promise = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve, reject</span>) =&gt;</span> &#123;<br>  resolve(<span class=\"hljs-string\">'success'</span>)<br>&#125;)<br>promise.then(<span class=\"hljs-function\"><span class=\"hljs-params\">res</span> =&gt;</span> &#123;<br>  <span class=\"hljs-built_in\">console</span>.log(res)<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">'11111'</span><br>&#125;).then(<span class=\"hljs-function\"><span class=\"hljs-params\">res</span> =&gt;</span> &#123;<br>  <span class=\"hljs-built_in\">console</span>.log(res)<br>&#125;)<br><br><span class=\"hljs-comment\">// success   11111</span><br></code></pre></td></tr></table></figure>\n<p>然鹅~~我们并不支持，因为我们的 then 方法是没有返回值的，返回是 undefined，所以我们可以让 then 返回一个 Mypromise 对象，这样我们就可以继续调用 then 方法了，我们看一下 then 方法的改写</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">then(onResolved, onRejected)&#123;<br>  <span class=\"hljs-keyword\">const</span> newPromise = <span class=\"hljs-keyword\">new</span> Mypromise(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve, reject</span>) =&gt;</span> &#123;<br>    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-keyword\">this</span>.status === RESOLVE)&#123;<br>      setTimeout(<span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> &#123;<br>        onResolved(<span class=\"hljs-keyword\">this</span>.result)<br>      &#125;, <span class=\"hljs-number\">0</span>)<br>    &#125;<br>    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-keyword\">this</span>.status === REJECT)&#123;<br>      setTimeout(<span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> &#123;<br>        onRejected(<span class=\"hljs-keyword\">this</span>.reason)<br>      &#125;, <span class=\"hljs-number\">0</span>)<br>    &#125;<br>    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-keyword\">this</span>.status === PENDING)&#123;<br>      <span class=\"hljs-keyword\">this</span>.onResolvedArr.push(<span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> &#123;<br>        onResolved(<span class=\"hljs-keyword\">this</span>.result)<br>      &#125;)<br>      <span class=\"hljs-keyword\">this</span>.onRejectedArr.push(<span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> &#123;<br>        onRejected(<span class=\"hljs-keyword\">this</span>.reason)<br>      &#125;)<br>    &#125;<br>  &#125;)<br>  <span class=\"hljs-keyword\">return</span> newPromise<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>这样我们虽然在写 .then 的链式调用不会报错了，但是，resolve 和 reject 一直都没有执行，我们需要一个函数来解决这个问题。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> PENDING = <span class=\"hljs-string\">'pending'</span><br><span class=\"hljs-keyword\">const</span> RESOLVE = <span class=\"hljs-string\">'resolve'</span><br><span class=\"hljs-keyword\">const</span> REJECT = <span class=\"hljs-string\">'reject'</span><br><span class=\"hljs-keyword\">const</span> handlePromise = <span class=\"hljs-function\">(<span class=\"hljs-params\">result, newPromise, resolve, reject</span>) =&gt;</span> &#123;<br>  <span class=\"hljs-keyword\">if</span>(result === newPromise)&#123; <span class=\"hljs-comment\">// 如果直接将 then 的返回值返回没有任何意义</span><br>    <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Error</span>(<span class=\"hljs-string\">'can not return oneself'</span>)<br>  &#125;<br>  <span class=\"hljs-keyword\">if</span>((<span class=\"hljs-keyword\">typeof</span> result === <span class=\"hljs-string\">'object'</span> &amp;&amp; result !== <span class=\"hljs-literal\">null</span>) || <span class=\"hljs-keyword\">typeof</span> result === <span class=\"hljs-string\">'function'</span>)&#123; <span class=\"hljs-comment\">// 判断是否为一个promise构造函数，或者其实例</span><br>    <span class=\"hljs-keyword\">const</span> then  = result.then <span class=\"hljs-comment\">// 是否具有 then 方法</span><br>    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-keyword\">typeof</span> then === <span class=\"hljs-string\">'function'</span>)&#123; <span class=\"hljs-comment\">// 确定是一个 promise 类型的值</span><br>      then.call( <span class=\"hljs-comment\">// 执行这个then方法，并传参</span><br>        result,<br>        r =&gt; &#123;<br>          handlePromise(r, newPromise, resolve, reject) <span class=\"hljs-comment\">// 直到不是一个promise的值</span><br>        &#125;,<br>        e =&gt; &#123;<br>          reject(e) <span class=\"hljs-comment\">// 失败直接reject就可以了</span><br>        &#125;)<br>    &#125;<span class=\"hljs-keyword\">else</span>&#123;<br>      resolve(then) <span class=\"hljs-comment\">// 没有 then 方法，那就不会用链式调用，直接作为参数即可</span><br>    &#125;<br>  &#125;<span class=\"hljs-keyword\">else</span>&#123;<br>    resolve(result) <span class=\"hljs-comment\">// 是一个类似 '123' 这样的常量，直接作为参数即可</span><br>  &#125;<br>&#125;<br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Mypromise</span> </span>&#123;<br>  status = PENDING<br>  result = <span class=\"hljs-literal\">undefined</span><br>  reason = <span class=\"hljs-literal\">undefined</span><br>  onResolvedArr = []<br>  onRejectedArr = []<br>  <span class=\"hljs-keyword\">constructor</span>(excution)&#123;<br>    <span class=\"hljs-keyword\">const</span> resolve = <span class=\"hljs-function\">(<span class=\"hljs-params\">result</span>) =&gt;</span> &#123;<br>      <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-keyword\">this</span>.status === PENDING)&#123;<br>        <span class=\"hljs-keyword\">this</span>.status = RESOLVE<br>        <span class=\"hljs-keyword\">this</span>.result = result<br>        <span class=\"hljs-keyword\">this</span>.onResolvedArr.map(<span class=\"hljs-function\"><span class=\"hljs-params\">fn</span> =&gt;</span> fn())<br>      &#125;<br>    &#125;<br>    <span class=\"hljs-keyword\">const</span> reject = <span class=\"hljs-function\">(<span class=\"hljs-params\">reason</span>) =&gt;</span> &#123;<br>      <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-keyword\">this</span>.status === PENDING)&#123;<br>        <span class=\"hljs-keyword\">this</span>.status = REJECT<br>        <span class=\"hljs-keyword\">this</span>.reason = reason<br>        <span class=\"hljs-keyword\">this</span>.onRejectedArr.map(<span class=\"hljs-function\"><span class=\"hljs-params\">fn</span> =&gt;</span> fn())<br>      &#125;<br>    &#125;<br>    excution(resolve, reject)<br>  &#125;<br>  then(onResolved, onRejected)&#123;<br>    <span class=\"hljs-keyword\">const</span> newPromise = <span class=\"hljs-keyword\">new</span> Mypromise(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve, reject</span>) =&gt;</span> &#123;<br>      <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-keyword\">this</span>.status === RESOLVE)&#123;<br>        setTimeout(<span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> &#123;<br>          <span class=\"hljs-keyword\">const</span> result = onResolved(<span class=\"hljs-keyword\">this</span>.result) <span class=\"hljs-comment\">// result 接收执行后的结果</span><br>          handlePromise(result, newPromise, resolve, reject) <span class=\"hljs-comment\">// 执行这个方法，将结果，和调用then返回的promise对象，成功函数以及失败函数作为参数传进去。</span><br>        &#125;, <span class=\"hljs-number\">0</span>)<br>      &#125;<br>      <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-keyword\">this</span>.status === REJECT)&#123;<br>        setTimeout(<span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> &#123;<br>          <span class=\"hljs-keyword\">const</span> result = onRejected(<span class=\"hljs-keyword\">this</span>.reason) <span class=\"hljs-comment\">// 同理</span><br>          handlePromise(result, newPromise, resolve, reject) <span class=\"hljs-comment\">// 同理</span><br>        &#125;, <span class=\"hljs-number\">0</span>)<br>      &#125;<br>      <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-keyword\">this</span>.status === PENDING)&#123;<br>        <span class=\"hljs-keyword\">this</span>.onResolvedArr.push(<span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> &#123;<br>          <span class=\"hljs-keyword\">const</span> result = onResolved(<span class=\"hljs-keyword\">this</span>.result) <span class=\"hljs-comment\">// 同理</span><br>          handlePromise(result, newPromise, resolve, reject) <span class=\"hljs-comment\">// 同理</span><br>        &#125;)<br>        <span class=\"hljs-keyword\">this</span>.onRejectedArr.push(<span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> &#123;<br>          <span class=\"hljs-keyword\">const</span> result = onRejected(<span class=\"hljs-keyword\">this</span>.reason) <span class=\"hljs-comment\">// 同理</span><br>          handlePromise(result, newPromise, resolve, reject) <span class=\"hljs-comment\">// 同理</span><br>        &#125;)<br>      &#125;<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> newPromise<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<ul>\n<li><p>我们先用一个常量 result 来接收第一次调用 then 的返回值</p>\n</li>\n<li><p>定义一个方法 handlePromise，给这个方法传入 result newPromise resolve reject</p>\n</li>\n<li><p>在方法中我们判断一下 result 和 newPromise 是否相等，在原生的 Promise 中是不可以将自身返回的，这样没有什么意义，所以我们判断两者若相等，就会报错</p>\n</li>\n<li><p>继续判断一下这个 result 是否为一个 promise 类型的值，也就是是否为一个对象或者函数</p>\n</li>\n<li><p>如果上一步判断为 true，那么我们继续判断是否有 then 这个方法；如果上一步判断为false，说明这个 result 是一个常量，那我们就直接执行 <code>resolve(result)</code>，并将参数传进去。(处理假如 result 为 {then: ‘123’} )</p>\n</li>\n<li><p>当我们确定 result 是一个 promise 时，我们就继续回调 handlePromise，直到它是一个确切的值，而不是 promise。</p>\n</li>\n</ul>\n<p>到目前为止，我们的 promise 经完成大部分了，还需处理异常情况，我们用 try…catch… 来捕获各个阶段的错误</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> PENDING = <span class=\"hljs-string\">'pending'</span><br><span class=\"hljs-keyword\">const</span> RESOLVE = <span class=\"hljs-string\">'resolve'</span><br><span class=\"hljs-keyword\">const</span> REJECT = <span class=\"hljs-string\">'reject'</span><br><span class=\"hljs-keyword\">const</span> handlePromise = <span class=\"hljs-function\">(<span class=\"hljs-params\">result, newPromise, resolve, reject</span>) =&gt;</span> &#123;<br>  <span class=\"hljs-keyword\">if</span>(result === newPromise)&#123;<br>    <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Error</span>(<span class=\"hljs-string\">'can not return oneself'</span>)<br>  &#125;<br>  <span class=\"hljs-keyword\">if</span>((<span class=\"hljs-keyword\">typeof</span> result === <span class=\"hljs-string\">'object'</span> &amp;&amp; result !== <span class=\"hljs-literal\">null</span>) || <span class=\"hljs-keyword\">typeof</span> result === <span class=\"hljs-string\">'function'</span>)&#123;<br>    <span class=\"hljs-keyword\">let</span> lock = <span class=\"hljs-literal\">false</span><br>    <span class=\"hljs-keyword\">try</span>&#123;<br>      <span class=\"hljs-keyword\">const</span> then  = result.then<br>      <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-keyword\">typeof</span> then === <span class=\"hljs-string\">'function'</span>)&#123;<br>        then.call(<br>          result,<br>          r =&gt; &#123;<br>            <span class=\"hljs-keyword\">if</span> (lock) <span class=\"hljs-keyword\">return</span><br>            handlePromise(r, newPromise, resolve, reject)<br>            lock = <span class=\"hljs-literal\">true</span><br>          &#125;,<br>          e =&gt; &#123;<br>            <span class=\"hljs-keyword\">if</span> (lock) <span class=\"hljs-keyword\">return</span><br>            reject(e)<br>            lock = <span class=\"hljs-literal\">true</span><br>          &#125;)<br>      &#125;<span class=\"hljs-keyword\">else</span>&#123;<br>        resolve(then)<br>      &#125;<br>    &#125;<span class=\"hljs-keyword\">catch</span>(error)&#123;<br>      reject(error)<br>    &#125;<br>  &#125;<span class=\"hljs-keyword\">else</span>&#123;<br>    resolve(result)<br>  &#125;<br>&#125;<br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Mypromise</span> </span>&#123;<br>  status = PENDING<br>  result = <span class=\"hljs-literal\">undefined</span><br>  reason = <span class=\"hljs-literal\">undefined</span><br>  onResolvedArr = []<br>  onRejectedArr = []<br>  <span class=\"hljs-keyword\">constructor</span>(excution)&#123;<br>    <span class=\"hljs-keyword\">const</span> resolve = <span class=\"hljs-function\">(<span class=\"hljs-params\">result</span>) =&gt;</span> &#123;<br>      <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-keyword\">this</span>.status === PENDING)&#123;<br>        <span class=\"hljs-keyword\">this</span>.status = RESOLVE<br>        <span class=\"hljs-keyword\">this</span>.result = result<br>        <span class=\"hljs-keyword\">this</span>.onResolvedArr.map(<span class=\"hljs-function\"><span class=\"hljs-params\">fn</span> =&gt;</span> fn())<br>      &#125;<br>    &#125;<br>    <span class=\"hljs-keyword\">const</span> reject = <span class=\"hljs-function\">(<span class=\"hljs-params\">reason</span>) =&gt;</span> &#123;<br>      <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-keyword\">this</span>.status === PENDING)&#123;<br>        <span class=\"hljs-keyword\">this</span>.status = REJECT<br>        <span class=\"hljs-keyword\">this</span>.reason = reason<br>        <span class=\"hljs-keyword\">this</span>.onRejectedArr.map(<span class=\"hljs-function\"><span class=\"hljs-params\">fn</span> =&gt;</span> fn())<br>      &#125;<br>    &#125;<br>    <span class=\"hljs-keyword\">try</span>&#123;<br>      excution(resolve, reject)<br>    &#125;<span class=\"hljs-keyword\">catch</span>(error)&#123;<br>      reject(error)<br>    &#125;<br>  &#125;<br>  then(onResolved, onRejected)&#123;<br>    <span class=\"hljs-keyword\">const</span> newPromise = <span class=\"hljs-keyword\">new</span> Mypromise(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve, reject</span>) =&gt;</span> &#123;<br>      <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-keyword\">this</span>.status === RESOLVE)&#123;<br>        setTimeout(<span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> &#123;<br>          <span class=\"hljs-keyword\">try</span>&#123;<br>            <span class=\"hljs-keyword\">const</span> result = onResolved(<span class=\"hljs-keyword\">this</span>.result)<br>            handlePromise(result, newPromise, resolve, reject)<br>          &#125;<span class=\"hljs-keyword\">catch</span>(error)&#123;<br>            reject(error)<br>          &#125;<br>        &#125;, <span class=\"hljs-number\">0</span>)<br>      &#125;<br>      <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-keyword\">this</span>.status === REJECT)&#123;<br>        setTimeout(<span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> &#123;<br>          <span class=\"hljs-keyword\">try</span>&#123;<br>            <span class=\"hljs-keyword\">const</span> result = onRejected(<span class=\"hljs-keyword\">this</span>.reason)<br>            handlePromise(result, newPromise, resolve, reject)<br>          &#125;<span class=\"hljs-keyword\">catch</span>(error)&#123;<br>            reject(error)<br>          &#125;  <br>        &#125;, <span class=\"hljs-number\">0</span>)<br>      &#125;<br>      <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-keyword\">this</span>.status === PENDING)&#123;<br>        <span class=\"hljs-keyword\">this</span>.onResolvedArr.push(<span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> &#123;<br>          <span class=\"hljs-keyword\">try</span>&#123;<br>            <span class=\"hljs-keyword\">const</span> result = onResolved(<span class=\"hljs-keyword\">this</span>.result)<br>            handlePromise(result, newPromise, resolve, reject)<br>          &#125;<span class=\"hljs-keyword\">catch</span>(error)&#123;<br>            reject(error)<br>          &#125;<br>        &#125;)<br>        <span class=\"hljs-keyword\">this</span>.onRejectedArr.push(<span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> &#123;<br>          <span class=\"hljs-keyword\">try</span>&#123;<br>            <span class=\"hljs-keyword\">const</span> result = onRejected(<span class=\"hljs-keyword\">this</span>.reason)<br>            handlePromise(result, newPromise, resolve, reject)<br>          &#125;<span class=\"hljs-keyword\">catch</span>(error)&#123;<br>            reject(error)<br>          &#125;<br>        &#125;)<br>      &#125;<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> newPromise<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>之后我们再实现一个catch方法</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> PENDING = <span class=\"hljs-string\">'pending'</span><br><span class=\"hljs-keyword\">const</span> RESOLVE = <span class=\"hljs-string\">'resolve'</span><br><span class=\"hljs-keyword\">const</span> REJECT = <span class=\"hljs-string\">'reject'</span><br><span class=\"hljs-keyword\">const</span> handlePromise = <span class=\"hljs-function\">(<span class=\"hljs-params\">result, newPromise, resolve, reject</span>) =&gt;</span> &#123;<br>  <span class=\"hljs-keyword\">if</span>(result === newPromise)&#123;<br>    <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Error</span>(<span class=\"hljs-string\">'can not return oneself'</span>)<br>  &#125;<br>  <span class=\"hljs-keyword\">if</span>((<span class=\"hljs-keyword\">typeof</span> result === <span class=\"hljs-string\">'object'</span> &amp;&amp; result !== <span class=\"hljs-literal\">null</span>) || <span class=\"hljs-keyword\">typeof</span> result === <span class=\"hljs-string\">'function'</span>)&#123;<br>    <span class=\"hljs-keyword\">let</span> lock = <span class=\"hljs-literal\">false</span><br>    <span class=\"hljs-keyword\">try</span>&#123;<br>      <span class=\"hljs-keyword\">const</span> then  = result.then<br>      <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-keyword\">typeof</span> then === <span class=\"hljs-string\">'function'</span>)&#123;<br>        then.call(<br>          result,<br>          r =&gt; &#123;<br>            <span class=\"hljs-keyword\">if</span> (lock) <span class=\"hljs-keyword\">return</span><br>            handlePromise(r, newPromise, resolve, reject)<br>            lock = <span class=\"hljs-literal\">true</span><br>          &#125;,<br>          e =&gt; &#123;<br>            <span class=\"hljs-keyword\">if</span> (lock) <span class=\"hljs-keyword\">return</span><br>            reject(e)<br>            lock = <span class=\"hljs-literal\">true</span><br>          &#125;)<br>      &#125;<span class=\"hljs-keyword\">else</span>&#123;<br>        resolve(then)<br>      &#125;<br>    &#125;<span class=\"hljs-keyword\">catch</span>(error)&#123;<br>      reject(error)<br>    &#125;<br>  &#125;<span class=\"hljs-keyword\">else</span>&#123;<br>    resolve(result)<br>  &#125;<br>&#125;<br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Mypromise</span> </span>&#123;<br>  status = PENDING<br>  result = <span class=\"hljs-literal\">undefined</span><br>  reason = <span class=\"hljs-literal\">undefined</span><br>  onResolvedArr = []<br>  onRejectedArr = []<br>  <span class=\"hljs-keyword\">constructor</span>(excution)&#123;<br>    <span class=\"hljs-keyword\">const</span> resolve = <span class=\"hljs-function\">(<span class=\"hljs-params\">result</span>) =&gt;</span> &#123;<br>      <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-keyword\">this</span>.status === PENDING)&#123;<br>        <span class=\"hljs-keyword\">this</span>.status = RESOLVE<br>        <span class=\"hljs-keyword\">this</span>.result = result<br>        <span class=\"hljs-keyword\">this</span>.onResolvedArr.map(<span class=\"hljs-function\"><span class=\"hljs-params\">fn</span> =&gt;</span> fn())<br>      &#125;<br>    &#125;<br>    <span class=\"hljs-keyword\">const</span> reject = <span class=\"hljs-function\">(<span class=\"hljs-params\">reason</span>) =&gt;</span> &#123;<br>      <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-keyword\">this</span>.status === PENDING)&#123;<br>        <span class=\"hljs-keyword\">this</span>.status = REJECT<br>        <span class=\"hljs-keyword\">this</span>.reason = reason<br>        <span class=\"hljs-keyword\">this</span>.onRejectedArr.map(<span class=\"hljs-function\"><span class=\"hljs-params\">fn</span> =&gt;</span> fn())<br>      &#125;<br>    &#125;<br>    <span class=\"hljs-keyword\">try</span>&#123;<br>      excution(resolve, reject)<br>    &#125;<span class=\"hljs-keyword\">catch</span>(error)&#123;<br>      reject(error)<br>    &#125;<br>  &#125;<br>  then(onResolved, onRejected)&#123;<br>    onResolved = <span class=\"hljs-keyword\">typeof</span> onResolved === <span class=\"hljs-string\">'function'</span>? onResolved : <span class=\"hljs-function\"><span class=\"hljs-params\">data</span> =&gt;</span> data<br>    onRejected = <span class=\"hljs-keyword\">typeof</span> onRejected === <span class=\"hljs-string\">'function'</span>? onRejected : <span class=\"hljs-function\"><span class=\"hljs-params\">err</span> =&gt;</span> &#123;<br>      <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Error</span>(err)<br>    &#125;<br>    <span class=\"hljs-keyword\">const</span> newPromise = <span class=\"hljs-keyword\">new</span> Mypromise(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve, reject</span>) =&gt;</span> &#123;<br>      <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-keyword\">this</span>.status === RESOLVE)&#123;<br>        setTimeout(<span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> &#123;<br>          <span class=\"hljs-keyword\">try</span>&#123;<br>            <span class=\"hljs-keyword\">const</span> result = onResolved(<span class=\"hljs-keyword\">this</span>.result)<br>            handlePromise(result, newPromise, resolve, reject)<br>          &#125;<span class=\"hljs-keyword\">catch</span>(error)&#123;<br>            reject(error)<br>          &#125;<br>        &#125;, <span class=\"hljs-number\">0</span>)<br>      &#125;<br>      <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-keyword\">this</span>.status === REJECT)&#123;<br>        setTimeout(<span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> &#123;<br>          <span class=\"hljs-keyword\">try</span>&#123;<br>            <span class=\"hljs-keyword\">const</span> result = onRejected(<span class=\"hljs-keyword\">this</span>.reason)<br>            handlePromise(result, newPromise, resolve, reject)<br>          &#125;<span class=\"hljs-keyword\">catch</span>(error)&#123;<br>            reject(error)<br>          &#125;  <br>        &#125;, <span class=\"hljs-number\">0</span>)<br>      &#125;<br>      <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-keyword\">this</span>.status === PENDING)&#123;<br>        <span class=\"hljs-keyword\">this</span>.onResolvedArr.push(<span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> &#123;<br>          <span class=\"hljs-keyword\">try</span>&#123;<br>            <span class=\"hljs-keyword\">const</span> result = onResolved(<span class=\"hljs-keyword\">this</span>.result)<br>            handlePromise(result, newPromise, resolve, reject)<br>          &#125;<span class=\"hljs-keyword\">catch</span>(error)&#123;<br>            reject(error)<br>          &#125;<br>        &#125;)<br>        <span class=\"hljs-keyword\">this</span>.onRejectedArr.push(<span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> &#123;<br>          <span class=\"hljs-keyword\">try</span>&#123;<br>            <span class=\"hljs-keyword\">const</span> result = onRejected(<span class=\"hljs-keyword\">this</span>.reason)<br>            handlePromise(result, newPromise, resolve, reject)<br>          &#125;<span class=\"hljs-keyword\">catch</span>(error)&#123;<br>            reject(error)<br>          &#125;<br>        &#125;)<br>      &#125;<br>    &#125;)<br>    <span class=\"hljs-keyword\">return</span> newPromise<br>  &#125;<br>  <span class=\"hljs-keyword\">catch</span>(onRejected)&#123;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.then(<span class=\"hljs-literal\">undefined</span>, onRejected)<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>catch 方法我们可以基于 then 方法来实现，第一个参数传 Undefined，但是这时我们还要在 then 方法中处理一下传参不是函数的情况</p>\n<p>现在让我们来测试一下</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> promise = <span class=\"hljs-keyword\">new</span> Mypromise(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve, reject</span>) =&gt;</span> &#123;<br>  setTimeout(<span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> &#123;<br>    resolve(<span class=\"hljs-string\">'啦啦啦'</span>)<br>  &#125;, <span class=\"hljs-number\">1000</span>)<br>&#125;)<br>promise.then(<span class=\"hljs-function\"><span class=\"hljs-params\">res</span> =&gt;</span> &#123;<br>  <span class=\"hljs-built_in\">console</span>.log(res)<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">'1111'</span><br>&#125;, err =&gt; &#123;&#125;).then(<span class=\"hljs-function\"><span class=\"hljs-params\">res</span> =&gt;</span> &#123;<br>  <span class=\"hljs-built_in\">console</span>.log(res)<br>&#125;, err =&gt; &#123;&#125;)<br><span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-number\">1234</span>)<br><br><span class=\"hljs-comment\">// 1234   \"啦啦啦\"     \"1111\"</span><br></code></pre></td></tr></table></figure>\n<p>木有问题</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>到目前为止，我们的代码就全部实现了，虽然代码量有点多，但是只要我们一步一步分析，其实也不是很难。</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h3><p>&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;由于 JS 是单线程执行的，这就导致我们有些处理不得不使用异步执行的方式，比如请求数据啦，浏览器的一些方法啦等等。这就会导致一种场景存在，如果我们接下来的逻辑需要依赖异步执行后的结果怎么办？在过去，我们通常会用回调函数的方法来解决，就像下面这个例子</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">request.onreadystatechange = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>&#123;<br>    <span class=\"hljs-keyword\">if</span> (request.readyState === <span class=\"hljs-number\">4</span>) &#123;<br>        <span class=\"hljs-keyword\">if</span> (request.status === <span class=\"hljs-number\">200</span>) &#123;<br>            <span class=\"hljs-keyword\">return</span> success(request.responseText);<br>        &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>            <span class=\"hljs-keyword\">return</span> fail(request.status);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;假如我们有多个请求都是依赖关系，那么就会导致一个回调函数内嵌套另一个回调函数，这样的代码看起来真的不是很好理解，也不利于后期代码的维护😖。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// 类似这样，回调地狱，想想都可怕</span><br>ajax(url, () =&gt; &#123;<br>    <span class=\"hljs-comment\">// 处理逻辑</span><br>    ajax(url1, () =&gt; &#123;<br>        <span class=\"hljs-comment\">// 处理逻辑</span><br>        ajax(url2, () =&gt; &#123;<br>            <span class=\"hljs-comment\">// 处理逻辑</span><br>        &#125;)<br>    &#125;)<br>&#125;)<br></code></pre></td></tr></table></figure>\n<p>&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;为了解决这个问题，Promise 就诞生了👏🏻👏🏻👏🏻，它是 ES6 中的语法，有了它我们就再也不用写这种恶心的回调地狱式代码。</p>\n<h3 id=\"初识Promise\"><a href=\"#初识Promise\" class=\"headerlink\" title=\"初识Promise\"></a>初识Promise</h3><p>&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;promise 翻译成中文是允诺，许诺的意思，我们可以理解为允诺在未来的某一个时刻会有一个确切的答复，并且这个允诺有三种状态，分别是：</p>\n<ul>\n<li>等待中（pending）</li>\n<li>完成了（resolved）</li>\n<li>拒绝了（rejected）</li>\n</ul>\n<p>一旦从等待状态转变为其它状态就不能再改变了。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve, reject</span>) =&gt;</span> &#123;<br>  resolve(<span class=\"hljs-string\">'success'</span>)<br>  reject(<span class=\"hljs-string\">'fail'</span>) <span class=\"hljs-comment\">// 无效，已经变成 resolved 状态</span><br>&#125;)<br></code></pre></td></tr></table></figure>\n<p>Promise 构造函数内部的代码是立即执行的。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve</span>) =&gt;</span> &#123;<br>  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'start'</span>)<br>  resolve(<span class=\"hljs-string\">'success'</span>)<br>&#125;)<br><span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'end'</span>)<br><br><span class=\"hljs-comment\">// start  end</span><br></code></pre></td></tr></table></figure>\n<p>Promise 实现了链式调用，每次调用 then 之后都会返回一个全新的 Promise，在 then 中如果使用了 return , return 中的值就会被 Promise.resolve() 包裹。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve</span>) =&gt;</span> &#123;<br>  resolve(<span class=\"hljs-string\">'success'</span>)<br>&#125;).then(<span class=\"hljs-function\"><span class=\"hljs-params\">res</span> =&gt;</span> &#123;<br>  <span class=\"hljs-built_in\">console</span>.log(res)<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">'111'</span><br>&#125;).then(<span class=\"hljs-function\"><span class=\"hljs-params\">res</span> =&gt;</span> &#123;<br>  <span class=\"hljs-built_in\">console</span>.log(res)<br>&#125;)<br><span class=\"hljs-comment\">// success    111</span><br></code></pre></td></tr></table></figure>\n<p>下面让我们来看看 Promise 如何解决回调地狱的问题吧。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">ajax(url)<br>  .then(<span class=\"hljs-function\"><span class=\"hljs-params\">res</span> =&gt;</span> &#123;<br>      <span class=\"hljs-built_in\">console</span>.log(res)<br>      <span class=\"hljs-keyword\">return</span> ajax(url1)<br>  &#125;).then(<span class=\"hljs-function\"><span class=\"hljs-params\">res</span> =&gt;</span> &#123;<br>      <span class=\"hljs-built_in\">console</span>.log(res)<br>      <span class=\"hljs-keyword\">return</span> ajax(url2)<br>  &#125;).then(<span class=\"hljs-function\"><span class=\"hljs-params\">res</span> =&gt;</span> <span class=\"hljs-built_in\">console</span>.log(res))<br></code></pre></td></tr></table></figure>\n<p>&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp; 现在，你是否对 Promise 有一个大体的了解了呢，Promise 还有其它一些好用的 API，在这里我就不一一的详述啦，大家可以去看一下 MDN 官方的<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise\" target=\"_blank\" rel=\"noopener\">文档</a>，或者也可以看一下<a href=\"https://www.liaoxuefeng.com/wiki/1022910821149312/1023024413276544\" target=\"_blank\" rel=\"noopener\">廖雪峰的博客</a>进行深入的了解。最后附上一张官方的图片，这张图将 Promise 解释的淋漓尽致。</p>\n<img src=\"/blog/2020/11/04/promise/promise.png\" class=\"\">\n\n<h3 id=\"进阶Promise\"><a href=\"#进阶Promise\" class=\"headerlink\" title=\"进阶Promise\"></a>进阶Promise</h3><p>&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;当然，有追求的我们怎能单单的仅限于如何使用的层面呢🙄，接下来我们就要大展身手实现一个盗版的 Promise😏。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> promise = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve, reject</span>) =&gt;</span> &#123;<br>  resolve(<span class=\"hljs-string\">'success'</span>)<br>&#125;)<br>promise.then(<span class=\"hljs-function\">(<span class=\"hljs-params\">res</span>)=&gt;</span>&#123;<br>  <span class=\"hljs-built_in\">console</span>.log(res)<br>&#125;,(err)=&gt; &#123;<br>  <span class=\"hljs-built_in\">console</span>.log(err)<br>&#125;)<br></code></pre></td></tr></table></figure>\n<p>上面的这段代码是我们正常的一个 promise 调用。</p>\n<ul>\n<li><p>我们先创建了一个 Promise 实例。</p>\n</li>\n<li><p>给这个实例传进了一个函数数据类型的参数，这个函数参数是同步的，会直接运行，并且这个函数也接收了两个函数作为参数，分别代表 成功时候执行的回调 和 失败的时候执行的回调。</p>\n</li>\n<li><p>我们在构造函数中执行了这个成功的回调，并且传进了一个字符串作为参数</p>\n</li>\n<li><p>之后呢我们调用了 then，这个 then 方法接收了两个函数数据类型的参数，一个代表成功的回调，一个代表失败的回调，我们会根据调用了 resolve 还是 reject 来执行对应的回调。</p>\n</li>\n<li><p>在这里呢，我们执行了 resolve 回调，并传进了一个参数，我们将这个参数成功的打印出来啦。</p>\n</li>\n<li><p>结束。。。</p>\n</li>\n</ul>\n<p>到现在我们一步步分析完了，废话不多说，我们来一步步的实现吧💪🏻。</p>\n<p>首先我们来创建一个 Mypromise 构造函数</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Mypromise</span></span>&#123;<br>  <span class=\"hljs-keyword\">constructor</span>()&#123;&#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>哈哈，创建好啦，没错，就是这么简单。<br>现在我们按照步骤，应该给这个构造函数传参，还是一个函数数据类型的参数，并且要直接运行。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Mypromise</span></span>&#123;<br>  <span class=\"hljs-keyword\">constructor</span>(excution)&#123;<br>    excution(resolve, reject)<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>此时，我们发现这里的 resolve 和 reject 这两个函数参数并没有定义，所以我们要定义一下，并且还要定义三种状态的常量，初始化的状态为pending。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> PENDING = <span class=\"hljs-string\">'pending'</span><br><span class=\"hljs-keyword\">const</span> RESOLVE = <span class=\"hljs-string\">'resolve'</span><br><span class=\"hljs-keyword\">const</span> REJECT = <span class=\"hljs-string\">'reject'</span><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Mypromise</span></span>&#123;<br>  status = PENDING<br>  result = <span class=\"hljs-literal\">undefined</span><br>  reason = <span class=\"hljs-literal\">undefined</span><br>  <span class=\"hljs-keyword\">constructor</span>(excution)&#123;<br>    <span class=\"hljs-keyword\">const</span> resolve = <span class=\"hljs-function\">(<span class=\"hljs-params\">result</span>) =&gt;</span> &#123;<br>      <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-keyword\">this</span>.status = PENDING)&#123;<br>        <span class=\"hljs-keyword\">this</span>.status = RESOLVE<br>        <span class=\"hljs-keyword\">this</span>.result = result<br>      &#125;<br>    &#125;<br>    <span class=\"hljs-keyword\">const</span> reject = <span class=\"hljs-function\">(<span class=\"hljs-params\">reason</span>) =&gt;</span> &#123;<br>      <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-keyword\">this</span>.status = PENDING)&#123;<br>        <span class=\"hljs-keyword\">this</span>.status = REJECT<br>        <span class=\"hljs-keyword\">this</span>.reason = reason<br>      &#125;<br>    &#125;<br>    excution(resolve, reject)<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>在这一步我们还顺便把 成功 和 失败 的回调函数传参给实现了，相当于<code>result(&#39;success&#39;)</code>。因为 Promise 只有在状态为 pending 时才会改变状态，执行 resolve 和 reject 回调时我们的状态会改变，并且将参数存起来。</p>\n<p>之后我们就要开始实现 then 函数啦，接收两个函数数据类型的参数，判断状态不为 pending 时，分别执行对应的函数。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> PENDING = <span class=\"hljs-string\">'pending'</span><br><span class=\"hljs-keyword\">const</span> RESOLVE = <span class=\"hljs-string\">'resolve'</span><br><span class=\"hljs-keyword\">const</span> REJECT = <span class=\"hljs-string\">'reject'</span><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Mypromise</span></span>&#123;<br>  status = PENDING<br>  result = <span class=\"hljs-literal\">undefined</span><br>  reason = <span class=\"hljs-literal\">undefined</span><br>  <span class=\"hljs-keyword\">constructor</span>(excution)&#123;<br>    <span class=\"hljs-keyword\">const</span> resolve = <span class=\"hljs-function\">(<span class=\"hljs-params\">result</span>) =&gt;</span> &#123;<br>      <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-keyword\">this</span>.status === PENDING)&#123;<br>        <span class=\"hljs-keyword\">this</span>.status = RESOLVE<br>        <span class=\"hljs-keyword\">this</span>.result = result<br>      &#125;<br>    &#125;<br>    <span class=\"hljs-keyword\">const</span> reject = <span class=\"hljs-function\">(<span class=\"hljs-params\">reason</span>) =&gt;</span> &#123;<br>      <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-keyword\">this</span>.status === PENDING)&#123;<br>        <span class=\"hljs-keyword\">this</span>.status = REJECT<br>        <span class=\"hljs-keyword\">this</span>.reason = reason<br>      &#125;<br>    &#125;<br>    excution(resolve, reject)<br>  &#125;<br>  then(onResolved, onRejected)&#123;<br>    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-keyword\">this</span>.status === RESOLVE)&#123;<br>      onResolved(<span class=\"hljs-keyword\">this</span>.result)<br>    &#125;<br>    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-keyword\">this</span>.status === REJECT)&#123;<br>      onRejected(<span class=\"hljs-keyword\">this</span>.reason)<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>现在，让我们来试一下我们初见雏形的 promise 吧</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> promise = <span class=\"hljs-keyword\">new</span> Mypromise(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve, reject</span>) =&gt;</span> &#123;<br>    resolve(<span class=\"hljs-string\">'success'</span>)<br>&#125;)<br>promise.then(<span class=\"hljs-function\"><span class=\"hljs-params\">res</span> =&gt;</span> &#123;<br>    <span class=\"hljs-built_in\">console</span>.log(res)<br>&#125;, err =&gt; &#123;&#125;)<br><br><span class=\"hljs-comment\">// success</span><br></code></pre></td></tr></table></figure>\n<p>没问题，到目前为止，我么已经实现了一个基本的 promise 啦，哈哈哈，激动不😎，来，我们继续发现问题，解决问题。</p>\n<p>看一下这个例子</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> promise = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve, reject</span>) =&gt;</span> &#123;<br>  resolve(<span class=\"hljs-string\">'success'</span>)<br>&#125;)<br>promise.then(<span class=\"hljs-function\"><span class=\"hljs-params\">res</span> =&gt;</span> &#123;<br>  <span class=\"hljs-built_in\">console</span>.log(res)<br>&#125;)<br><span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'end'</span>)<br><span class=\"hljs-comment\">// end success</span><br></code></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> promise = <span class=\"hljs-keyword\">new</span> Mypromise(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve, reject</span>) =&gt;</span> &#123;<br>  resolve(<span class=\"hljs-string\">'success'</span>)<br>&#125;)<br>promise.then(<span class=\"hljs-function\"><span class=\"hljs-params\">res</span> =&gt;</span> &#123;<br>  <span class=\"hljs-built_in\">console</span>.log(res)<br>&#125;)<br><span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'end'</span>)<br><span class=\"hljs-comment\">// success end</span><br></code></pre></td></tr></table></figure>\n<p>细心的同学会发现，我们盗版 Mypromise 得到结果的顺序和正版的结果顺序不太一样诶，让我们来分析一下。</p>\n<p>看过文档的同学应该已经知道了，因为then方法是异步执行的，而我们现在实现的是同步的，所以会从上到下正常输出，那么我们来解决这个问题吧。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> PENDING = <span class=\"hljs-string\">'pending'</span><br><span class=\"hljs-keyword\">const</span> RESOLVE = <span class=\"hljs-string\">'resolve'</span><br><span class=\"hljs-keyword\">const</span> REJECT = <span class=\"hljs-string\">'reject'</span><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Mypromise</span></span>&#123;<br>  status = PENDING<br>  result = <span class=\"hljs-literal\">undefined</span><br>  reason = <span class=\"hljs-literal\">undefined</span><br>  <span class=\"hljs-keyword\">constructor</span>(excution)&#123;<br>    <span class=\"hljs-keyword\">const</span> resolve = <span class=\"hljs-function\">(<span class=\"hljs-params\">result</span>) =&gt;</span> &#123;<br>      <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-keyword\">this</span>.status === PENDING)&#123;<br>        <span class=\"hljs-keyword\">this</span>.status = RESOLVE<br>        <span class=\"hljs-keyword\">this</span>.result = result<br>      &#125;<br>    &#125;<br>    <span class=\"hljs-keyword\">const</span> reject = <span class=\"hljs-function\">(<span class=\"hljs-params\">reason</span>) =&gt;</span> &#123;<br>      <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-keyword\">this</span>.status === PENDING)&#123;<br>        <span class=\"hljs-keyword\">this</span>.status = REJECT<br>        <span class=\"hljs-keyword\">this</span>.reason = reason<br>      &#125;<br>    &#125;<br>    excution(resolve, reject)<br>  &#125;<br>  then(onResolved, onRejected)&#123;<br>    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-keyword\">this</span>.status === RESOLVE)&#123;<br>      setTimeout(<span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> &#123;<br>        onResolved(<span class=\"hljs-keyword\">this</span>.result)<br>      &#125;, <span class=\"hljs-number\">0</span>)<br>    &#125;<br>    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-keyword\">this</span>.status === REJECT)&#123;<br>      setTimeout(<span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> &#123;<br>        onRejected(<span class=\"hljs-keyword\">this</span>.reason)<br>      &#125;, <span class=\"hljs-number\">0</span>)<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>我们用 setTimeout 将其包裹一下，这不就变成异步了么，来，再让我们试试</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> promise = <span class=\"hljs-keyword\">new</span> Mypromise(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve, reject</span>) =&gt;</span> &#123;<br>  resolve(<span class=\"hljs-string\">'success'</span>)<br>&#125;)<br>promise.then(<span class=\"hljs-function\"><span class=\"hljs-params\">res</span> =&gt;</span> &#123;<br>  <span class=\"hljs-built_in\">console</span>.log(res)<br>&#125;)<br><span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'end'</span>)<br><span class=\"hljs-comment\">// end  success</span><br></code></pre></td></tr></table></figure>\n<p>OK! No problem，我们解决了这个问题。</p>\n<p>开始切换下一个场景</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> promise = <span class=\"hljs-keyword\">new</span> Mypromise(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve, reject</span>) =&gt;</span> &#123;<br>  setTimeout(<span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> &#123;<br>    resolve(<span class=\"hljs-string\">'success'</span>)<br>  &#125;,<span class=\"hljs-number\">1000</span>)<br>&#125;)<br>promise.then(<span class=\"hljs-function\"><span class=\"hljs-params\">res</span> =&gt;</span> &#123;<br>  <span class=\"hljs-built_in\">console</span>.log(res)<br>&#125;, err =&gt; &#123;&#125;)<br></code></pre></td></tr></table></figure>\n<p>嗯？纳尼，怎么什么都没有输出呀，不是应该在1s之后输出 success 么，和我们想的不一样，好吧，让我们来康康我们实现的代码，分析一下。。。。</p>\n<p>我们发现，在我们执行 then 方法时，此时的状态还是 pending，因为在我们创建实例的时候写了一个异步的方法，所以在没有执行这个方法前，状态都不会改变，一直是pending，而我们实现的 then 方法并没有判断状态为 pending 时的处理逻辑，所以什么都不会打印出来。</p>\n<p>那我们整理一下思路，这时我们可能需要一个订阅者模式，在状态改变时，我们再判断执行哪个回调。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> PENDING = <span class=\"hljs-string\">'pending'</span><br><span class=\"hljs-keyword\">const</span> RESOLVE = <span class=\"hljs-string\">'resolve'</span><br><span class=\"hljs-keyword\">const</span> REJECT = <span class=\"hljs-string\">'reject'</span><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Mypromise</span> </span>&#123;<br>  status = PENDING<br>  result = <span class=\"hljs-literal\">undefined</span><br>  reason = <span class=\"hljs-literal\">undefined</span><br>  onResolvedArr = []<br>  onRejectedArr = []<br>  <span class=\"hljs-keyword\">constructor</span>(excution)&#123;<br>    <span class=\"hljs-keyword\">const</span> resolve = <span class=\"hljs-function\">(<span class=\"hljs-params\">result</span>) =&gt;</span> &#123;<br>      <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-keyword\">this</span>.status === PENDING)&#123;<br>        <span class=\"hljs-keyword\">this</span>.status = RESOLVE<br>        <span class=\"hljs-keyword\">this</span>.result = result<br>        <span class=\"hljs-keyword\">this</span>.onResolvedArr.map(<span class=\"hljs-function\"><span class=\"hljs-params\">fn</span> =&gt;</span> fn())<br>      &#125;<br>    &#125;<br>    <span class=\"hljs-keyword\">const</span> reject = <span class=\"hljs-function\">(<span class=\"hljs-params\">reason</span>) =&gt;</span> &#123;<br>      <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-keyword\">this</span>.status === PENDING)&#123;<br>        <span class=\"hljs-keyword\">this</span>.status = REJECT<br>        <span class=\"hljs-keyword\">this</span>.reason = reason<br>        <span class=\"hljs-keyword\">this</span>.onRejectedArr.map(<span class=\"hljs-function\"><span class=\"hljs-params\">fn</span> =&gt;</span> fn())<br>      &#125;<br>    &#125;<br>    excution(resolve, reject)<br>  &#125;<br>  then(onResolved, onRejected)&#123;<br>    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-keyword\">this</span>.status === RESOLVE)&#123;<br>      setTimeout(<span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> &#123;<br>        onResolved(<span class=\"hljs-keyword\">this</span>.result)<br>      &#125;, <span class=\"hljs-number\">0</span>)<br>    &#125;<br>    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-keyword\">this</span>.status === REJECT)&#123;<br>      setTimeout(<span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> &#123;<br>        onRejected(<span class=\"hljs-keyword\">this</span>.reason)<br>      &#125;, <span class=\"hljs-number\">0</span>)<br>    &#125;<br>    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-keyword\">this</span>.status === PENDING)&#123;<br>      <span class=\"hljs-keyword\">this</span>.onResolvedArr.push(<span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> &#123;<br>        onResolved(<span class=\"hljs-keyword\">this</span>.result)<br>      &#125;)<br>      <span class=\"hljs-keyword\">this</span>.onRejectedArr.push(<span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> &#123;<br>        onRejected(<span class=\"hljs-keyword\">this</span>.reason)<br>      &#125;)<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>我们增加两个数组 onResolved 和 onRejected ，在then方法中判断状态为 pending 时（为 pending 代表构造函数方法内是异步的），将事件分别添加到这两个数组中，等待状态改变时执行</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> promise = <span class=\"hljs-keyword\">new</span> Mypromise(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve, reject</span>) =&gt;</span> &#123;<br>  setTimeout(<span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> &#123;<br>    resolve(<span class=\"hljs-string\">'success'</span>)<br>  &#125;,<span class=\"hljs-number\">1000</span>)<br>&#125;)<br>promise.then(<span class=\"hljs-function\"><span class=\"hljs-params\">res</span> =&gt;</span> &#123;<br>  <span class=\"hljs-built_in\">console</span>.log(res)<br>&#125;, err =&gt; &#123;&#125;)<br><br><span class=\"hljs-comment\">// 过了1s后  success</span><br></code></pre></td></tr></table></figure>\n<p>官方的版本最大的优势就是在于 .then 的链式调用，就像这样</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> promise = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve, reject</span>) =&gt;</span> &#123;<br>  resolve(<span class=\"hljs-string\">'success'</span>)<br>&#125;)<br>promise.then(<span class=\"hljs-function\"><span class=\"hljs-params\">res</span> =&gt;</span> &#123;<br>  <span class=\"hljs-built_in\">console</span>.log(res)<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">'11111'</span><br>&#125;).then(<span class=\"hljs-function\"><span class=\"hljs-params\">res</span> =&gt;</span> &#123;<br>  <span class=\"hljs-built_in\">console</span>.log(res)<br>&#125;)<br><br><span class=\"hljs-comment\">// success   11111</span><br></code></pre></td></tr></table></figure>\n<p>然鹅~~我们并不支持，因为我们的 then 方法是没有返回值的，返回是 undefined，所以我们可以让 then 返回一个 Mypromise 对象，这样我们就可以继续调用 then 方法了，我们看一下 then 方法的改写</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">then(onResolved, onRejected)&#123;<br>  <span class=\"hljs-keyword\">const</span> newPromise = <span class=\"hljs-keyword\">new</span> Mypromise(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve, reject</span>) =&gt;</span> &#123;<br>    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-keyword\">this</span>.status === RESOLVE)&#123;<br>      setTimeout(<span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> &#123;<br>        onResolved(<span class=\"hljs-keyword\">this</span>.result)<br>      &#125;, <span class=\"hljs-number\">0</span>)<br>    &#125;<br>    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-keyword\">this</span>.status === REJECT)&#123;<br>      setTimeout(<span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> &#123;<br>        onRejected(<span class=\"hljs-keyword\">this</span>.reason)<br>      &#125;, <span class=\"hljs-number\">0</span>)<br>    &#125;<br>    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-keyword\">this</span>.status === PENDING)&#123;<br>      <span class=\"hljs-keyword\">this</span>.onResolvedArr.push(<span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> &#123;<br>        onResolved(<span class=\"hljs-keyword\">this</span>.result)<br>      &#125;)<br>      <span class=\"hljs-keyword\">this</span>.onRejectedArr.push(<span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> &#123;<br>        onRejected(<span class=\"hljs-keyword\">this</span>.reason)<br>      &#125;)<br>    &#125;<br>  &#125;)<br>  <span class=\"hljs-keyword\">return</span> newPromise<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>这样我们虽然在写 .then 的链式调用不会报错了，但是，resolve 和 reject 一直都没有执行，我们需要一个函数来解决这个问题。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> PENDING = <span class=\"hljs-string\">'pending'</span><br><span class=\"hljs-keyword\">const</span> RESOLVE = <span class=\"hljs-string\">'resolve'</span><br><span class=\"hljs-keyword\">const</span> REJECT = <span class=\"hljs-string\">'reject'</span><br><span class=\"hljs-keyword\">const</span> handlePromise = <span class=\"hljs-function\">(<span class=\"hljs-params\">result, newPromise, resolve, reject</span>) =&gt;</span> &#123;<br>  <span class=\"hljs-keyword\">if</span>(result === newPromise)&#123; <span class=\"hljs-comment\">// 如果直接将 then 的返回值返回没有任何意义</span><br>    <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Error</span>(<span class=\"hljs-string\">'can not return oneself'</span>)<br>  &#125;<br>  <span class=\"hljs-keyword\">if</span>((<span class=\"hljs-keyword\">typeof</span> result === <span class=\"hljs-string\">'object'</span> &amp;&amp; result !== <span class=\"hljs-literal\">null</span>) || <span class=\"hljs-keyword\">typeof</span> result === <span class=\"hljs-string\">'function'</span>)&#123; <span class=\"hljs-comment\">// 判断是否为一个promise构造函数，或者其实例</span><br>    <span class=\"hljs-keyword\">const</span> then  = result.then <span class=\"hljs-comment\">// 是否具有 then 方法</span><br>    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-keyword\">typeof</span> then === <span class=\"hljs-string\">'function'</span>)&#123; <span class=\"hljs-comment\">// 确定是一个 promise 类型的值</span><br>      then.call( <span class=\"hljs-comment\">// 执行这个then方法，并传参</span><br>        result,<br>        r =&gt; &#123;<br>          handlePromise(r, newPromise, resolve, reject) <span class=\"hljs-comment\">// 直到不是一个promise的值</span><br>        &#125;,<br>        e =&gt; &#123;<br>          reject(e) <span class=\"hljs-comment\">// 失败直接reject就可以了</span><br>        &#125;)<br>    &#125;<span class=\"hljs-keyword\">else</span>&#123;<br>      resolve(then) <span class=\"hljs-comment\">// 没有 then 方法，那就不会用链式调用，直接作为参数即可</span><br>    &#125;<br>  &#125;<span class=\"hljs-keyword\">else</span>&#123;<br>    resolve(result) <span class=\"hljs-comment\">// 是一个类似 '123' 这样的常量，直接作为参数即可</span><br>  &#125;<br>&#125;<br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Mypromise</span> </span>&#123;<br>  status = PENDING<br>  result = <span class=\"hljs-literal\">undefined</span><br>  reason = <span class=\"hljs-literal\">undefined</span><br>  onResolvedArr = []<br>  onRejectedArr = []<br>  <span class=\"hljs-keyword\">constructor</span>(excution)&#123;<br>    <span class=\"hljs-keyword\">const</span> resolve = <span class=\"hljs-function\">(<span class=\"hljs-params\">result</span>) =&gt;</span> &#123;<br>      <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-keyword\">this</span>.status === PENDING)&#123;<br>        <span class=\"hljs-keyword\">this</span>.status = RESOLVE<br>        <span class=\"hljs-keyword\">this</span>.result = result<br>        <span class=\"hljs-keyword\">this</span>.onResolvedArr.map(<span class=\"hljs-function\"><span class=\"hljs-params\">fn</span> =&gt;</span> fn())<br>      &#125;<br>    &#125;<br>    <span class=\"hljs-keyword\">const</span> reject = <span class=\"hljs-function\">(<span class=\"hljs-params\">reason</span>) =&gt;</span> &#123;<br>      <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-keyword\">this</span>.status === PENDING)&#123;<br>        <span class=\"hljs-keyword\">this</span>.status = REJECT<br>        <span class=\"hljs-keyword\">this</span>.reason = reason<br>        <span class=\"hljs-keyword\">this</span>.onRejectedArr.map(<span class=\"hljs-function\"><span class=\"hljs-params\">fn</span> =&gt;</span> fn())<br>      &#125;<br>    &#125;<br>    excution(resolve, reject)<br>  &#125;<br>  then(onResolved, onRejected)&#123;<br>    <span class=\"hljs-keyword\">const</span> newPromise = <span class=\"hljs-keyword\">new</span> Mypromise(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve, reject</span>) =&gt;</span> &#123;<br>      <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-keyword\">this</span>.status === RESOLVE)&#123;<br>        setTimeout(<span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> &#123;<br>          <span class=\"hljs-keyword\">const</span> result = onResolved(<span class=\"hljs-keyword\">this</span>.result) <span class=\"hljs-comment\">// result 接收执行后的结果</span><br>          handlePromise(result, newPromise, resolve, reject) <span class=\"hljs-comment\">// 执行这个方法，将结果，和调用then返回的promise对象，成功函数以及失败函数作为参数传进去。</span><br>        &#125;, <span class=\"hljs-number\">0</span>)<br>      &#125;<br>      <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-keyword\">this</span>.status === REJECT)&#123;<br>        setTimeout(<span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> &#123;<br>          <span class=\"hljs-keyword\">const</span> result = onRejected(<span class=\"hljs-keyword\">this</span>.reason) <span class=\"hljs-comment\">// 同理</span><br>          handlePromise(result, newPromise, resolve, reject) <span class=\"hljs-comment\">// 同理</span><br>        &#125;, <span class=\"hljs-number\">0</span>)<br>      &#125;<br>      <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-keyword\">this</span>.status === PENDING)&#123;<br>        <span class=\"hljs-keyword\">this</span>.onResolvedArr.push(<span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> &#123;<br>          <span class=\"hljs-keyword\">const</span> result = onResolved(<span class=\"hljs-keyword\">this</span>.result) <span class=\"hljs-comment\">// 同理</span><br>          handlePromise(result, newPromise, resolve, reject) <span class=\"hljs-comment\">// 同理</span><br>        &#125;)<br>        <span class=\"hljs-keyword\">this</span>.onRejectedArr.push(<span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> &#123;<br>          <span class=\"hljs-keyword\">const</span> result = onRejected(<span class=\"hljs-keyword\">this</span>.reason) <span class=\"hljs-comment\">// 同理</span><br>          handlePromise(result, newPromise, resolve, reject) <span class=\"hljs-comment\">// 同理</span><br>        &#125;)<br>      &#125;<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> newPromise<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<ul>\n<li><p>我们先用一个常量 result 来接收第一次调用 then 的返回值</p>\n</li>\n<li><p>定义一个方法 handlePromise，给这个方法传入 result newPromise resolve reject</p>\n</li>\n<li><p>在方法中我们判断一下 result 和 newPromise 是否相等，在原生的 Promise 中是不可以将自身返回的，这样没有什么意义，所以我们判断两者若相等，就会报错</p>\n</li>\n<li><p>继续判断一下这个 result 是否为一个 promise 类型的值，也就是是否为一个对象或者函数</p>\n</li>\n<li><p>如果上一步判断为 true，那么我们继续判断是否有 then 这个方法；如果上一步判断为false，说明这个 result 是一个常量，那我们就直接执行 <code>resolve(result)</code>，并将参数传进去。(处理假如 result 为 {then: ‘123’} )</p>\n</li>\n<li><p>当我们确定 result 是一个 promise 时，我们就继续回调 handlePromise，直到它是一个确切的值，而不是 promise。</p>\n</li>\n</ul>\n<p>到目前为止，我们的 promise 经完成大部分了，还需处理异常情况，我们用 try…catch… 来捕获各个阶段的错误</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> PENDING = <span class=\"hljs-string\">'pending'</span><br><span class=\"hljs-keyword\">const</span> RESOLVE = <span class=\"hljs-string\">'resolve'</span><br><span class=\"hljs-keyword\">const</span> REJECT = <span class=\"hljs-string\">'reject'</span><br><span class=\"hljs-keyword\">const</span> handlePromise = <span class=\"hljs-function\">(<span class=\"hljs-params\">result, newPromise, resolve, reject</span>) =&gt;</span> &#123;<br>  <span class=\"hljs-keyword\">if</span>(result === newPromise)&#123;<br>    <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Error</span>(<span class=\"hljs-string\">'can not return oneself'</span>)<br>  &#125;<br>  <span class=\"hljs-keyword\">if</span>((<span class=\"hljs-keyword\">typeof</span> result === <span class=\"hljs-string\">'object'</span> &amp;&amp; result !== <span class=\"hljs-literal\">null</span>) || <span class=\"hljs-keyword\">typeof</span> result === <span class=\"hljs-string\">'function'</span>)&#123;<br>    <span class=\"hljs-keyword\">let</span> lock = <span class=\"hljs-literal\">false</span><br>    <span class=\"hljs-keyword\">try</span>&#123;<br>      <span class=\"hljs-keyword\">const</span> then  = result.then<br>      <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-keyword\">typeof</span> then === <span class=\"hljs-string\">'function'</span>)&#123;<br>        then.call(<br>          result,<br>          r =&gt; &#123;<br>            <span class=\"hljs-keyword\">if</span> (lock) <span class=\"hljs-keyword\">return</span><br>            handlePromise(r, newPromise, resolve, reject)<br>            lock = <span class=\"hljs-literal\">true</span><br>          &#125;,<br>          e =&gt; &#123;<br>            <span class=\"hljs-keyword\">if</span> (lock) <span class=\"hljs-keyword\">return</span><br>            reject(e)<br>            lock = <span class=\"hljs-literal\">true</span><br>          &#125;)<br>      &#125;<span class=\"hljs-keyword\">else</span>&#123;<br>        resolve(then)<br>      &#125;<br>    &#125;<span class=\"hljs-keyword\">catch</span>(error)&#123;<br>      reject(error)<br>    &#125;<br>  &#125;<span class=\"hljs-keyword\">else</span>&#123;<br>    resolve(result)<br>  &#125;<br>&#125;<br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Mypromise</span> </span>&#123;<br>  status = PENDING<br>  result = <span class=\"hljs-literal\">undefined</span><br>  reason = <span class=\"hljs-literal\">undefined</span><br>  onResolvedArr = []<br>  onRejectedArr = []<br>  <span class=\"hljs-keyword\">constructor</span>(excution)&#123;<br>    <span class=\"hljs-keyword\">const</span> resolve = <span class=\"hljs-function\">(<span class=\"hljs-params\">result</span>) =&gt;</span> &#123;<br>      <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-keyword\">this</span>.status === PENDING)&#123;<br>        <span class=\"hljs-keyword\">this</span>.status = RESOLVE<br>        <span class=\"hljs-keyword\">this</span>.result = result<br>        <span class=\"hljs-keyword\">this</span>.onResolvedArr.map(<span class=\"hljs-function\"><span class=\"hljs-params\">fn</span> =&gt;</span> fn())<br>      &#125;<br>    &#125;<br>    <span class=\"hljs-keyword\">const</span> reject = <span class=\"hljs-function\">(<span class=\"hljs-params\">reason</span>) =&gt;</span> &#123;<br>      <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-keyword\">this</span>.status === PENDING)&#123;<br>        <span class=\"hljs-keyword\">this</span>.status = REJECT<br>        <span class=\"hljs-keyword\">this</span>.reason = reason<br>        <span class=\"hljs-keyword\">this</span>.onRejectedArr.map(<span class=\"hljs-function\"><span class=\"hljs-params\">fn</span> =&gt;</span> fn())<br>      &#125;<br>    &#125;<br>    <span class=\"hljs-keyword\">try</span>&#123;<br>      excution(resolve, reject)<br>    &#125;<span class=\"hljs-keyword\">catch</span>(error)&#123;<br>      reject(error)<br>    &#125;<br>  &#125;<br>  then(onResolved, onRejected)&#123;<br>    <span class=\"hljs-keyword\">const</span> newPromise = <span class=\"hljs-keyword\">new</span> Mypromise(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve, reject</span>) =&gt;</span> &#123;<br>      <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-keyword\">this</span>.status === RESOLVE)&#123;<br>        setTimeout(<span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> &#123;<br>          <span class=\"hljs-keyword\">try</span>&#123;<br>            <span class=\"hljs-keyword\">const</span> result = onResolved(<span class=\"hljs-keyword\">this</span>.result)<br>            handlePromise(result, newPromise, resolve, reject)<br>          &#125;<span class=\"hljs-keyword\">catch</span>(error)&#123;<br>            reject(error)<br>          &#125;<br>        &#125;, <span class=\"hljs-number\">0</span>)<br>      &#125;<br>      <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-keyword\">this</span>.status === REJECT)&#123;<br>        setTimeout(<span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> &#123;<br>          <span class=\"hljs-keyword\">try</span>&#123;<br>            <span class=\"hljs-keyword\">const</span> result = onRejected(<span class=\"hljs-keyword\">this</span>.reason)<br>            handlePromise(result, newPromise, resolve, reject)<br>          &#125;<span class=\"hljs-keyword\">catch</span>(error)&#123;<br>            reject(error)<br>          &#125;  <br>        &#125;, <span class=\"hljs-number\">0</span>)<br>      &#125;<br>      <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-keyword\">this</span>.status === PENDING)&#123;<br>        <span class=\"hljs-keyword\">this</span>.onResolvedArr.push(<span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> &#123;<br>          <span class=\"hljs-keyword\">try</span>&#123;<br>            <span class=\"hljs-keyword\">const</span> result = onResolved(<span class=\"hljs-keyword\">this</span>.result)<br>            handlePromise(result, newPromise, resolve, reject)<br>          &#125;<span class=\"hljs-keyword\">catch</span>(error)&#123;<br>            reject(error)<br>          &#125;<br>        &#125;)<br>        <span class=\"hljs-keyword\">this</span>.onRejectedArr.push(<span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> &#123;<br>          <span class=\"hljs-keyword\">try</span>&#123;<br>            <span class=\"hljs-keyword\">const</span> result = onRejected(<span class=\"hljs-keyword\">this</span>.reason)<br>            handlePromise(result, newPromise, resolve, reject)<br>          &#125;<span class=\"hljs-keyword\">catch</span>(error)&#123;<br>            reject(error)<br>          &#125;<br>        &#125;)<br>      &#125;<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> newPromise<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>之后我们再实现一个catch方法</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> PENDING = <span class=\"hljs-string\">'pending'</span><br><span class=\"hljs-keyword\">const</span> RESOLVE = <span class=\"hljs-string\">'resolve'</span><br><span class=\"hljs-keyword\">const</span> REJECT = <span class=\"hljs-string\">'reject'</span><br><span class=\"hljs-keyword\">const</span> handlePromise = <span class=\"hljs-function\">(<span class=\"hljs-params\">result, newPromise, resolve, reject</span>) =&gt;</span> &#123;<br>  <span class=\"hljs-keyword\">if</span>(result === newPromise)&#123;<br>    <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Error</span>(<span class=\"hljs-string\">'can not return oneself'</span>)<br>  &#125;<br>  <span class=\"hljs-keyword\">if</span>((<span class=\"hljs-keyword\">typeof</span> result === <span class=\"hljs-string\">'object'</span> &amp;&amp; result !== <span class=\"hljs-literal\">null</span>) || <span class=\"hljs-keyword\">typeof</span> result === <span class=\"hljs-string\">'function'</span>)&#123;<br>    <span class=\"hljs-keyword\">let</span> lock = <span class=\"hljs-literal\">false</span><br>    <span class=\"hljs-keyword\">try</span>&#123;<br>      <span class=\"hljs-keyword\">const</span> then  = result.then<br>      <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-keyword\">typeof</span> then === <span class=\"hljs-string\">'function'</span>)&#123;<br>        then.call(<br>          result,<br>          r =&gt; &#123;<br>            <span class=\"hljs-keyword\">if</span> (lock) <span class=\"hljs-keyword\">return</span><br>            handlePromise(r, newPromise, resolve, reject)<br>            lock = <span class=\"hljs-literal\">true</span><br>          &#125;,<br>          e =&gt; &#123;<br>            <span class=\"hljs-keyword\">if</span> (lock) <span class=\"hljs-keyword\">return</span><br>            reject(e)<br>            lock = <span class=\"hljs-literal\">true</span><br>          &#125;)<br>      &#125;<span class=\"hljs-keyword\">else</span>&#123;<br>        resolve(then)<br>      &#125;<br>    &#125;<span class=\"hljs-keyword\">catch</span>(error)&#123;<br>      reject(error)<br>    &#125;<br>  &#125;<span class=\"hljs-keyword\">else</span>&#123;<br>    resolve(result)<br>  &#125;<br>&#125;<br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Mypromise</span> </span>&#123;<br>  status = PENDING<br>  result = <span class=\"hljs-literal\">undefined</span><br>  reason = <span class=\"hljs-literal\">undefined</span><br>  onResolvedArr = []<br>  onRejectedArr = []<br>  <span class=\"hljs-keyword\">constructor</span>(excution)&#123;<br>    <span class=\"hljs-keyword\">const</span> resolve = <span class=\"hljs-function\">(<span class=\"hljs-params\">result</span>) =&gt;</span> &#123;<br>      <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-keyword\">this</span>.status === PENDING)&#123;<br>        <span class=\"hljs-keyword\">this</span>.status = RESOLVE<br>        <span class=\"hljs-keyword\">this</span>.result = result<br>        <span class=\"hljs-keyword\">this</span>.onResolvedArr.map(<span class=\"hljs-function\"><span class=\"hljs-params\">fn</span> =&gt;</span> fn())<br>      &#125;<br>    &#125;<br>    <span class=\"hljs-keyword\">const</span> reject = <span class=\"hljs-function\">(<span class=\"hljs-params\">reason</span>) =&gt;</span> &#123;<br>      <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-keyword\">this</span>.status === PENDING)&#123;<br>        <span class=\"hljs-keyword\">this</span>.status = REJECT<br>        <span class=\"hljs-keyword\">this</span>.reason = reason<br>        <span class=\"hljs-keyword\">this</span>.onRejectedArr.map(<span class=\"hljs-function\"><span class=\"hljs-params\">fn</span> =&gt;</span> fn())<br>      &#125;<br>    &#125;<br>    <span class=\"hljs-keyword\">try</span>&#123;<br>      excution(resolve, reject)<br>    &#125;<span class=\"hljs-keyword\">catch</span>(error)&#123;<br>      reject(error)<br>    &#125;<br>  &#125;<br>  then(onResolved, onRejected)&#123;<br>    onResolved = <span class=\"hljs-keyword\">typeof</span> onResolved === <span class=\"hljs-string\">'function'</span>? onResolved : <span class=\"hljs-function\"><span class=\"hljs-params\">data</span> =&gt;</span> data<br>    onRejected = <span class=\"hljs-keyword\">typeof</span> onRejected === <span class=\"hljs-string\">'function'</span>? onRejected : <span class=\"hljs-function\"><span class=\"hljs-params\">err</span> =&gt;</span> &#123;<br>      <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Error</span>(err)<br>    &#125;<br>    <span class=\"hljs-keyword\">const</span> newPromise = <span class=\"hljs-keyword\">new</span> Mypromise(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve, reject</span>) =&gt;</span> &#123;<br>      <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-keyword\">this</span>.status === RESOLVE)&#123;<br>        setTimeout(<span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> &#123;<br>          <span class=\"hljs-keyword\">try</span>&#123;<br>            <span class=\"hljs-keyword\">const</span> result = onResolved(<span class=\"hljs-keyword\">this</span>.result)<br>            handlePromise(result, newPromise, resolve, reject)<br>          &#125;<span class=\"hljs-keyword\">catch</span>(error)&#123;<br>            reject(error)<br>          &#125;<br>        &#125;, <span class=\"hljs-number\">0</span>)<br>      &#125;<br>      <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-keyword\">this</span>.status === REJECT)&#123;<br>        setTimeout(<span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> &#123;<br>          <span class=\"hljs-keyword\">try</span>&#123;<br>            <span class=\"hljs-keyword\">const</span> result = onRejected(<span class=\"hljs-keyword\">this</span>.reason)<br>            handlePromise(result, newPromise, resolve, reject)<br>          &#125;<span class=\"hljs-keyword\">catch</span>(error)&#123;<br>            reject(error)<br>          &#125;  <br>        &#125;, <span class=\"hljs-number\">0</span>)<br>      &#125;<br>      <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-keyword\">this</span>.status === PENDING)&#123;<br>        <span class=\"hljs-keyword\">this</span>.onResolvedArr.push(<span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> &#123;<br>          <span class=\"hljs-keyword\">try</span>&#123;<br>            <span class=\"hljs-keyword\">const</span> result = onResolved(<span class=\"hljs-keyword\">this</span>.result)<br>            handlePromise(result, newPromise, resolve, reject)<br>          &#125;<span class=\"hljs-keyword\">catch</span>(error)&#123;<br>            reject(error)<br>          &#125;<br>        &#125;)<br>        <span class=\"hljs-keyword\">this</span>.onRejectedArr.push(<span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> &#123;<br>          <span class=\"hljs-keyword\">try</span>&#123;<br>            <span class=\"hljs-keyword\">const</span> result = onRejected(<span class=\"hljs-keyword\">this</span>.reason)<br>            handlePromise(result, newPromise, resolve, reject)<br>          &#125;<span class=\"hljs-keyword\">catch</span>(error)&#123;<br>            reject(error)<br>          &#125;<br>        &#125;)<br>      &#125;<br>    &#125;)<br>    <span class=\"hljs-keyword\">return</span> newPromise<br>  &#125;<br>  <span class=\"hljs-keyword\">catch</span>(onRejected)&#123;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.then(<span class=\"hljs-literal\">undefined</span>, onRejected)<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>catch 方法我们可以基于 then 方法来实现，第一个参数传 Undefined，但是这时我们还要在 then 方法中处理一下传参不是函数的情况</p>\n<p>现在让我们来测试一下</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> promise = <span class=\"hljs-keyword\">new</span> Mypromise(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve, reject</span>) =&gt;</span> &#123;<br>  setTimeout(<span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> &#123;<br>    resolve(<span class=\"hljs-string\">'啦啦啦'</span>)<br>  &#125;, <span class=\"hljs-number\">1000</span>)<br>&#125;)<br>promise.then(<span class=\"hljs-function\"><span class=\"hljs-params\">res</span> =&gt;</span> &#123;<br>  <span class=\"hljs-built_in\">console</span>.log(res)<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">'1111'</span><br>&#125;, err =&gt; &#123;&#125;).then(<span class=\"hljs-function\"><span class=\"hljs-params\">res</span> =&gt;</span> &#123;<br>  <span class=\"hljs-built_in\">console</span>.log(res)<br>&#125;, err =&gt; &#123;&#125;)<br><span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-number\">1234</span>)<br><br><span class=\"hljs-comment\">// 1234   \"啦啦啦\"     \"1111\"</span><br></code></pre></td></tr></table></figure>\n<p>木有问题</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>到目前为止，我们的代码就全部实现了，虽然代码量有点多，但是只要我们一步一步分析，其实也不是很难。</p>\n"},{"title":"通过权限码来控制动态路由","date":"2020-10-13T03:28:53.000Z","_content":"### 背景\n\n&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;之前有做过这样一个后台管理的需求，要求不同身份的用户登录我们的后台管理系统会显示不同的功能菜单、路由页面、按钮等。其实就是要在前端做一个权限路由。\n\n### 分析\n\n&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;我们可以做一个动态路由，获取用户信息之后来渲染路由数据，查阅vue-router文档，发现 [router.addRoutes](https://router.vuejs.org/zh/api/#router-addroutes)这个API可以支持我们来实现一个动态的路由。接下来就是各种的逻辑通过用户的权限码来匹配不同的路由啦。\n\n### 步骤\n- 先和后端定义好每一个code码所对应的权限名称还有页面。（比如说，code：user_manage，代表 用户管理 这个菜单，所以用户管理菜单的权限码就是user_manage）\n\n- 在前端先定义好一个权限码静态路由配置项，这个配置项里标识了每个code码对应的菜单名和页面组件等信息\n  ![](./项目实战/route.png)\n  我们定义好的这个路由配置项的结构符合 routes 选项要求的数组，最后只要将这个数组作为 router.addRoutes 的参数传进去即可。\n\n- 接下来，在用户登录的时候我们就获取这个用户下的所有权限code码数组。\n  ![](./项目实战/app.png)\n  获取权限码之后我们要进行一些处理，通过这个权限码数组来生成对应的路由项\n  ![](./项目实战/vuex.png)\n\n- 根据这个权限码数组以及我们定义好的权限码静态路由配置项，遍历生成该用户所能访问的路由数据。\n  ![](./项目实战/filter.png)\n  具体的代码处理逻辑可以看上图\n\n- 最后就是调用 vue-router 的 addRoutes 动态创建真实路由\n\n- 我们的菜单栏也是通过遍历这个路由来创建的","source":"_posts/项目实战.md","raw":"---\ntitle: 通过权限码来控制动态路由\ndate: 2020-10-13 11:28:53\ntags: JS\ncategories:\n- 项目\n---\n### 背景\n\n&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;之前有做过这样一个后台管理的需求，要求不同身份的用户登录我们的后台管理系统会显示不同的功能菜单、路由页面、按钮等。其实就是要在前端做一个权限路由。\n\n### 分析\n\n&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;我们可以做一个动态路由，获取用户信息之后来渲染路由数据，查阅vue-router文档，发现 [router.addRoutes](https://router.vuejs.org/zh/api/#router-addroutes)这个API可以支持我们来实现一个动态的路由。接下来就是各种的逻辑通过用户的权限码来匹配不同的路由啦。\n\n### 步骤\n- 先和后端定义好每一个code码所对应的权限名称还有页面。（比如说，code：user_manage，代表 用户管理 这个菜单，所以用户管理菜单的权限码就是user_manage）\n\n- 在前端先定义好一个权限码静态路由配置项，这个配置项里标识了每个code码对应的菜单名和页面组件等信息\n  ![](./项目实战/route.png)\n  我们定义好的这个路由配置项的结构符合 routes 选项要求的数组，最后只要将这个数组作为 router.addRoutes 的参数传进去即可。\n\n- 接下来，在用户登录的时候我们就获取这个用户下的所有权限code码数组。\n  ![](./项目实战/app.png)\n  获取权限码之后我们要进行一些处理，通过这个权限码数组来生成对应的路由项\n  ![](./项目实战/vuex.png)\n\n- 根据这个权限码数组以及我们定义好的权限码静态路由配置项，遍历生成该用户所能访问的路由数据。\n  ![](./项目实战/filter.png)\n  具体的代码处理逻辑可以看上图\n\n- 最后就是调用 vue-router 的 addRoutes 动态创建真实路由\n\n- 我们的菜单栏也是通过遍历这个路由来创建的","slug":"项目实战","published":1,"updated":"2022-05-14T12:01:31.761Z","_id":"ckh35fe8i0002g3ol80um5jjo","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h3><p>&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;之前有做过这样一个后台管理的需求，要求不同身份的用户登录我们的后台管理系统会显示不同的功能菜单、路由页面、按钮等。其实就是要在前端做一个权限路由。</p>\n<h3 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h3><p>&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;我们可以做一个动态路由，获取用户信息之后来渲染路由数据，查阅vue-router文档，发现 <a href=\"https://router.vuejs.org/zh/api/#router-addroutes\" target=\"_blank\" rel=\"noopener\">router.addRoutes</a>这个API可以支持我们来实现一个动态的路由。接下来就是各种的逻辑通过用户的权限码来匹配不同的路由啦。</p>\n<h3 id=\"步骤\"><a href=\"#步骤\" class=\"headerlink\" title=\"步骤\"></a>步骤</h3><ul>\n<li><p>先和后端定义好每一个code码所对应的权限名称还有页面。（比如说，code：user_manage，代表 用户管理 这个菜单，所以用户管理菜单的权限码就是user_manage）</p>\n</li>\n<li><p>在前端先定义好一个权限码静态路由配置项，这个配置项里标识了每个code码对应的菜单名和页面组件等信息</p>\n<img src=\"/blog/2020/10/13/%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98/route.png\" class=\"\">\n<p>我们定义好的这个路由配置项的结构符合 routes 选项要求的数组，最后只要将这个数组作为 router.addRoutes 的参数传进去即可。</p>\n</li>\n<li><p>接下来，在用户登录的时候我们就获取这个用户下的所有权限code码数组。</p>\n<img src=\"/blog/2020/10/13/%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98/app.png\" class=\"\">\n<p>获取权限码之后我们要进行一些处理，通过这个权限码数组来生成对应的路由项</p>\n<img src=\"/blog/2020/10/13/%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98/vuex.png\" class=\"\">\n</li>\n<li><p>根据这个权限码数组以及我们定义好的权限码静态路由配置项，遍历生成该用户所能访问的路由数据。</p>\n<img src=\"/blog/2020/10/13/%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98/filter.png\" class=\"\">\n<p>具体的代码处理逻辑可以看上图</p>\n</li>\n<li><p>最后就是调用 vue-router 的 addRoutes 动态创建真实路由</p>\n</li>\n<li><p>我们的菜单栏也是通过遍历这个路由来创建的</p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h3><p>&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;之前有做过这样一个后台管理的需求，要求不同身份的用户登录我们的后台管理系统会显示不同的功能菜单、路由页面、按钮等。其实就是要在前端做一个权限路由。</p>\n<h3 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h3><p>&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;我们可以做一个动态路由，获取用户信息之后来渲染路由数据，查阅vue-router文档，发现 <a href=\"https://router.vuejs.org/zh/api/#router-addroutes\" target=\"_blank\" rel=\"noopener\">router.addRoutes</a>这个API可以支持我们来实现一个动态的路由。接下来就是各种的逻辑通过用户的权限码来匹配不同的路由啦。</p>\n<h3 id=\"步骤\"><a href=\"#步骤\" class=\"headerlink\" title=\"步骤\"></a>步骤</h3><ul>\n<li><p>先和后端定义好每一个code码所对应的权限名称还有页面。（比如说，code：user_manage，代表 用户管理 这个菜单，所以用户管理菜单的权限码就是user_manage）</p>\n</li>\n<li><p>在前端先定义好一个权限码静态路由配置项，这个配置项里标识了每个code码对应的菜单名和页面组件等信息</p>\n<img src=\"/blog/2020/10/13/%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98/route.png\" class=\"\">\n<p>我们定义好的这个路由配置项的结构符合 routes 选项要求的数组，最后只要将这个数组作为 router.addRoutes 的参数传进去即可。</p>\n</li>\n<li><p>接下来，在用户登录的时候我们就获取这个用户下的所有权限code码数组。</p>\n<img src=\"/blog/2020/10/13/%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98/app.png\" class=\"\">\n<p>获取权限码之后我们要进行一些处理，通过这个权限码数组来生成对应的路由项</p>\n<img src=\"/blog/2020/10/13/%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98/vuex.png\" class=\"\">\n</li>\n<li><p>根据这个权限码数组以及我们定义好的权限码静态路由配置项，遍历生成该用户所能访问的路由数据。</p>\n<img src=\"/blog/2020/10/13/%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98/filter.png\" class=\"\">\n<p>具体的代码处理逻辑可以看上图</p>\n</li>\n<li><p>最后就是调用 vue-router 的 addRoutes 动态创建真实路由</p>\n</li>\n<li><p>我们的菜单栏也是通过遍历这个路由来创建的</p>\n</li>\n</ul>\n"}],"PostAsset":[{"_id":"source/_posts/hello-world/jt.png","slug":"jt.png","post":"ckfl1j01s0004m4olh9mq581v","modified":0,"renderable":0},{"_id":"source/_posts/hello-world/result.png","slug":"result.png","post":"ckfl1j01s0004m4olh9mq581v","modified":0,"renderable":0},{"_id":"source/_posts/webpack03/warn.png","slug":"warn.png","post":"ckfl1j03e001mm4ol4nyu7y92","modified":0,"renderable":0},{"_id":"source/_posts/webpack02/ catalogue.jpeg","slug":" catalogue.jpeg","post":"ckfl1j03d001jm4olf1tdf35r","modified":0,"renderable":0},{"_id":"source/_posts/promise/promise.png","slug":"promise.png","post":"ckh35fe8b0000g3ol3hzvcox8","modified":0,"renderable":0},{"_id":"source/_posts/项目实战/route.png","slug":"route.png","post":"ckh35fe8i0002g3ol80um5jjo","modified":1,"renderable":0},{"_id":"source/_posts/项目实战/app.png","slug":"app.png","post":"ckh35fe8i0002g3ol80um5jjo","modified":1,"renderable":0},{"_id":"source/_posts/项目实战/vuex.png","slug":"vuex.png","post":"ckh35fe8i0002g3ol80um5jjo","modified":1,"renderable":0},{"_id":"source/_posts/项目实战/filter.png","slug":"filter.png","post":"ckh35fe8i0002g3ol80um5jjo","modified":1,"renderable":0}],"PostCategory":[{"post_id":"ckfl1j01t0005m4olfb4u4qmf","category_id":"ckfl1j01p0002m4oldhy4cuo5","_id":"ckfl1j01x000cm4ol0q7sdcqq"},{"post_id":"ckfl1j01h0000m4olcnaz8wyk","category_id":"ckfl1j01p0002m4oldhy4cuo5","_id":"ckfl1j01y000gm4olbo4dasmb"},{"post_id":"ckfl1j01w000am4ol500whkdv","category_id":"ckfl1j01v0007m4ol66xegef6","_id":"ckfl1j01z000im4olhxjsg8hx"},{"post_id":"ckfl1j01o0001m4olbdq74bzd","category_id":"ckfl1j01v0007m4ol66xegef6","_id":"ckfl1j020000mm4ol0f93bc6w"},{"post_id":"ckfl1j01x000bm4ol9c5demco","category_id":"ckfl1j01v0007m4ol66xegef6","_id":"ckfl1j021000om4ol2bfu8jfq"},{"post_id":"ckfl1j01s0004m4olh9mq581v","category_id":"ckfl1j01x000dm4ol73nzf18b","_id":"ckfl1j021000pm4ol6ra71m6t"},{"post_id":"ckfl1j01u0006m4oldzbtax2l","category_id":"ckfl1j01v0007m4ol66xegef6","_id":"ckfl1j022000rm4ol1n1g2y48"},{"post_id":"ckfl1j02o000sm4olhdyqad3t","category_id":"ckfl1j01p0002m4oldhy4cuo5","_id":"ckfl1j02y0011m4ol7uj16l9d"},{"post_id":"ckfl1j02s000um4ol1xs8d033","category_id":"ckfl1j01v0007m4ol66xegef6","_id":"ckfl1j02z0015m4ol92ix37ue"},{"post_id":"ckfl1j02w0010m4ol7legg9f4","category_id":"ckfl1j01v0007m4ol66xegef6","_id":"ckfl1j031001am4oldvh28ab5"},{"post_id":"ckfl1j02z0014m4olea422n6n","category_id":"ckfl1j01v0007m4ol66xegef6","_id":"ckfl1j031001cm4ol9wzq4iz6"},{"post_id":"ckfl1j02z0017m4olhp3t6bvd","category_id":"ckfl1j01x000dm4ol73nzf18b","_id":"ckfl1j032001em4olhozj31mj"},{"post_id":"ckfl1j02u000xm4ol91q40kn3","category_id":"ckfl1j02y0012m4ol9pm9bndm","_id":"ckfl1j032001fm4olgsjc5g03"},{"post_id":"ckfl1j0300019m4ol212tfrla","category_id":"ckfl1j01v0007m4ol66xegef6","_id":"ckfl1j032001hm4ol4he9583x"},{"post_id":"ckfl1j03e001nm4ol2wg03ybb","category_id":"ckfl1j03d001km4olbazkf34s","_id":"ckfl1j03k001sm4ol6lhwb8kd"},{"post_id":"ckfl1j03c001im4olg3szcpny","category_id":"ckfl1j03d001km4olbazkf34s","_id":"ckfl1j03l001wm4ol0186ah4u"},{"post_id":"ckfl1j03d001jm4olf1tdf35r","category_id":"ckfl1j03d001km4olbazkf34s","_id":"ckfl1j03l001xm4ol5byl2gs5"},{"post_id":"ckfl1j03e001mm4ol4nyu7y92","category_id":"ckfl1j03d001km4olbazkf34s","_id":"ckfl1j03l001zm4ol6d8u0xes"},{"post_id":"ckfmjl20u0000seolbpa3a6nf","category_id":"ckfl1j01v0007m4ol66xegef6","_id":"ckfmjl2120002seolgos75ckt"},{"post_id":"ckfnrdmx00000gyolcmesblv9","category_id":"ckfl1j01v0007m4ol66xegef6","_id":"ckfnre2ko0002gyolbznm7hoz"},{"post_id":"ckh35fe8b0000g3ol3hzvcox8","category_id":"ckfl1j01v0007m4ol66xegef6","_id":"ckh35fe8j0003g3ol3oyqboi9"},{"post_id":"ckh35fe8i0002g3ol80um5jjo","category_id":"ckh35fe8j0004g3ol603b76tj","_id":"ckh35fe8t0006g3ol86dqagss"}],"PostTag":[{"post_id":"ckfl1j01h0000m4olcnaz8wyk","tag_id":"ckfl1j01r0003m4ol92ukfaf0","_id":"ckfl1j01v0009m4olf30u4joq"},{"post_id":"ckfl1j01w000am4ol500whkdv","tag_id":"ckfl1j01v0008m4ol2k9afz5w","_id":"ckfl1j01y000fm4ol9r29hzgk"},{"post_id":"ckfl1j01o0001m4olbdq74bzd","tag_id":"ckfl1j01v0008m4ol2k9afz5w","_id":"ckfl1j01y000hm4olf32ke9lr"},{"post_id":"ckfl1j01x000bm4ol9c5demco","tag_id":"ckfl1j01v0008m4ol2k9afz5w","_id":"ckfl1j01z000lm4ol0gnafab0"},{"post_id":"ckfl1j01t0005m4olfb4u4qmf","tag_id":"ckfl1j01y000em4ol7j9574nt","_id":"ckfl1j020000nm4ol7u0b1ptk"},{"post_id":"ckfl1j01u0006m4oldzbtax2l","tag_id":"ckfl1j01v0008m4ol2k9afz5w","_id":"ckfl1j021000qm4ol0lr7bdp1"},{"post_id":"ckfl1j02o000sm4olhdyqad3t","tag_id":"ckfl1j01y000em4ol7j9574nt","_id":"ckfl1j02u000wm4olaghablh7"},{"post_id":"ckfl1j02s000um4ol1xs8d033","tag_id":"ckfl1j01v0008m4ol2k9afz5w","_id":"ckfl1j02v000zm4ol0r9uflvg"},{"post_id":"ckfl1j02u000xm4ol91q40kn3","tag_id":"ckfl1j01v0008m4ol2k9afz5w","_id":"ckfl1j02z0013m4olfobwbacq"},{"post_id":"ckfl1j02w0010m4ol7legg9f4","tag_id":"ckfl1j01v0008m4ol2k9afz5w","_id":"ckfl1j02z0016m4ol1ci4cfqa"},{"post_id":"ckfl1j02z0014m4olea422n6n","tag_id":"ckfl1j01v0008m4ol2k9afz5w","_id":"ckfl1j0300018m4ol31twbgzf"},{"post_id":"ckfl1j0300019m4ol212tfrla","tag_id":"ckfl1j01v0008m4ol2k9afz5w","_id":"ckfl1j032001dm4ol4y0sdlc1"},{"post_id":"ckfl1j02z0017m4olhp3t6bvd","tag_id":"ckfl1j031001bm4olh8xe5pi7","_id":"ckfl1j032001gm4oldrf1dn2c"},{"post_id":"ckfl1j03e001nm4ol2wg03ybb","tag_id":"ckfl1j03d001lm4ol9wnpbblp","_id":"ckfl1j03k001qm4ol3yv8hqr9"},{"post_id":"ckfl1j03c001im4olg3szcpny","tag_id":"ckfl1j03d001lm4ol9wnpbblp","_id":"ckfl1j03k001rm4oleipp411l"},{"post_id":"ckfl1j03d001jm4olf1tdf35r","tag_id":"ckfl1j03d001lm4ol9wnpbblp","_id":"ckfl1j03l001vm4olcudqamhw"},{"post_id":"ckfl1j03e001mm4ol4nyu7y92","tag_id":"ckfl1j03d001lm4ol9wnpbblp","_id":"ckfl1j03l001ym4olc5ndad1q"},{"post_id":"ckfmjl20u0000seolbpa3a6nf","tag_id":"ckfl1j01v0008m4ol2k9afz5w","_id":"ckfmjl2120001seoleojx11m2"},{"post_id":"ckfnrdmx00000gyolcmesblv9","tag_id":"ckfl1j01v0008m4ol2k9afz5w","_id":"ckfnre2ko0001gyol4zi37h95"},{"post_id":"ckh35fe8b0000g3ol3hzvcox8","tag_id":"ckfl1j01v0008m4ol2k9afz5w","_id":"ckh35fe8i0001g3ol9lmi9svp"},{"post_id":"ckh35fe8i0002g3ol80um5jjo","tag_id":"ckfl1j01v0008m4ol2k9afz5w","_id":"ckh35fe8p0005g3olcqha3woh"}],"Tag":[{"name":"TCP","_id":"ckfl1j01r0003m4ol92ukfaf0"},{"name":"JS","_id":"ckfl1j01v0008m4ol2k9afz5w"},{"name":"http","_id":"ckfl1j01y000em4ol7j9574nt"},{"name":"算法","_id":"ckfl1j031001bm4olh8xe5pi7"},{"name":"webpack","_id":"ckfl1j03d001lm4ol9wnpbblp"}]}}